// This file is generated by generate_grammar_inc.py

#include "spirv_inc.bt"

typedef uint32 SpvWord_t;

typedef struct SpvOperandImageOperands_ (int64 endOffset) {
    SpvImageOperandsMask value;
} SpvOperandImageOperands_t;

typedef struct SpvOperandFPFastMathMode_ (int64 endOffset) {
    SpvFPFastMathModeMask value;
} SpvOperandFPFastMathMode_t;

typedef struct SpvOperandSelectionControl_ (int64 endOffset) {
    SpvSelectionControlMask value;
} SpvOperandSelectionControl_t;

typedef struct SpvOperandLoopControl_ (int64 endOffset) {
    SpvLoopControlMask value;
} SpvOperandLoopControl_t;

typedef struct SpvOperandFunctionControl_ (int64 endOffset) {
    SpvFunctionControlMask value;
} SpvOperandFunctionControl_t;

typedef struct SpvOperandMemorySemantics_ (int64 endOffset) {
    SpvMemorySemanticsMask value;
} SpvOperandMemorySemantics_t;

typedef struct SpvOperandMemoryAccess_ (int64 endOffset) {
    SpvMemoryAccessMask value;
} SpvOperandMemoryAccess_t;

typedef struct SpvOperandKernelProfilingInfo_ (int64 endOffset) {
    SpvKernelProfilingInfoMask value;
} SpvOperandKernelProfilingInfo_t;

typedef struct SpvOperandRayFlags_ (int64 endOffset) {
    SpvRayFlagsMask value;
} SpvOperandRayFlags_t;

typedef struct SpvOperandFragmentShadingRate_ (int64 endOffset) {
    SpvFragmentShadingRateMask value;
} SpvOperandFragmentShadingRate_t;

typedef struct SpvOperandRawAccessChainOperands_ (int64 endOffset) {
    SpvRawAccessChainOperandsMask value;
} SpvOperandRawAccessChainOperands_t;

typedef struct SpvOperandSourceLanguage_ (int64 endOffset) {
    SpvSourceLanguage value;
} SpvOperandSourceLanguage_t;

typedef struct SpvOperandExecutionModel_ (int64 endOffset) {
    SpvExecutionModel value;
} SpvOperandExecutionModel_t;

typedef struct SpvOperandAddressingModel_ (int64 endOffset) {
    SpvAddressingModel value;
} SpvOperandAddressingModel_t;

typedef struct SpvOperandMemoryModel_ (int64 endOffset) {
    SpvMemoryModel value;
} SpvOperandMemoryModel_t;

typedef struct SpvOperandExecutionMode_ (int64 endOffset) {
    SpvExecutionMode value;
} SpvOperandExecutionMode_t;

typedef struct SpvOperandStorageClass_ (int64 endOffset) {
    SpvStorageClass value;
} SpvOperandStorageClass_t;

typedef struct SpvOperandDim_ (int64 endOffset) {
    SpvDim value;
} SpvOperandDim_t;

typedef struct SpvOperandSamplerAddressingMode_ (int64 endOffset) {
    SpvSamplerAddressingMode value;
} SpvOperandSamplerAddressingMode_t;

typedef struct SpvOperandSamplerFilterMode_ (int64 endOffset) {
    SpvSamplerFilterMode value;
} SpvOperandSamplerFilterMode_t;

typedef struct SpvOperandImageFormat_ (int64 endOffset) {
    SpvImageFormat value;
} SpvOperandImageFormat_t;

typedef struct SpvOperandImageChannelOrder_ (int64 endOffset) {
    SpvImageChannelOrder value;
} SpvOperandImageChannelOrder_t;

typedef struct SpvOperandImageChannelDataType_ (int64 endOffset) {
    SpvImageChannelDataType value;
} SpvOperandImageChannelDataType_t;

typedef struct SpvOperandFPRoundingMode_ (int64 endOffset) {
    SpvFPRoundingMode value;
} SpvOperandFPRoundingMode_t;

typedef struct SpvOperandFPDenormMode_ (int64 endOffset) {
    SpvFPDenormMode value;
} SpvOperandFPDenormMode_t;

typedef struct SpvOperandQuantizationModes_ (int64 endOffset) {
    SpvQuantizationModes value;
} SpvOperandQuantizationModes_t;

typedef struct SpvOperandFPOperationMode_ (int64 endOffset) {
    SpvFPOperationMode value;
} SpvOperandFPOperationMode_t;

typedef struct SpvOperandOverflowModes_ (int64 endOffset) {
    SpvOverflowModes value;
} SpvOperandOverflowModes_t;

typedef struct SpvOperandLinkageType_ (int64 endOffset) {
    SpvLinkageType value;
} SpvOperandLinkageType_t;

typedef struct SpvOperandAccessQualifier_ (int64 endOffset) {
    SpvAccessQualifier value;
} SpvOperandAccessQualifier_t;

typedef struct SpvOperandHostAccessQualifier_ (int64 endOffset) {
    SpvHostAccessQualifier value;
} SpvOperandHostAccessQualifier_t;

typedef struct SpvOperandFunctionParameterAttribute_ (int64 endOffset) {
    SpvFunctionParameterAttribute value;
} SpvOperandFunctionParameterAttribute_t;

typedef struct SpvOperandDecoration_ (int64 endOffset) {
    SpvDecoration value;
} SpvOperandDecoration_t;

typedef struct SpvOperandBuiltIn_ (int64 endOffset) {
    SpvBuiltIn value;
} SpvOperandBuiltIn_t;

typedef struct SpvOperandScope_ (int64 endOffset) {
    SpvScope value;
} SpvOperandScope_t;

typedef struct SpvOperandGroupOperation_ (int64 endOffset) {
    SpvGroupOperation value;
} SpvOperandGroupOperation_t;

typedef struct SpvOperandKernelEnqueueFlags_ (int64 endOffset) {
    SpvKernelEnqueueFlags value;
} SpvOperandKernelEnqueueFlags_t;

typedef struct SpvOperandCapability_ (int64 endOffset) {
    SpvCapability value;
} SpvOperandCapability_t;

typedef struct SpvOperandRayQueryIntersection_ (int64 endOffset) {
    SpvRayQueryIntersection value;
} SpvOperandRayQueryIntersection_t;

typedef struct SpvOperandRayQueryCommittedIntersectionType_ (int64 endOffset) {
    SpvRayQueryCommittedIntersectionType value;
} SpvOperandRayQueryCommittedIntersectionType_t;

typedef struct SpvOperandRayQueryCandidateIntersectionType_ (int64 endOffset) {
    SpvRayQueryCandidateIntersectionType value;
} SpvOperandRayQueryCandidateIntersectionType_t;

typedef struct SpvOperandPackedVectorFormat_ (int64 endOffset) {
    SpvPackedVectorFormat value;
} SpvOperandPackedVectorFormat_t;

typedef struct SpvOperandCooperativeMatrixOperands_ (int64 endOffset) {
    SpvCooperativeMatrixOperandsMask value;
} SpvOperandCooperativeMatrixOperands_t;

typedef struct SpvOperandCooperativeMatrixLayout_ (int64 endOffset) {
    SpvCooperativeMatrixLayout value;
} SpvOperandCooperativeMatrixLayout_t;

typedef struct SpvOperandCooperativeMatrixUse_ (int64 endOffset) {
    SpvCooperativeMatrixUse value;
} SpvOperandCooperativeMatrixUse_t;

typedef struct SpvOperandInitializationModeQualifier_ (int64 endOffset) {
    SpvInitializationModeQualifier value;
} SpvOperandInitializationModeQualifier_t;

typedef struct SpvOperandLoadCacheControl_ (int64 endOffset) {
    SpvLoadCacheControl value;
} SpvOperandLoadCacheControl_t;

typedef struct SpvOperandStoreCacheControl_ (int64 endOffset) {
    SpvStoreCacheControl value;
} SpvOperandStoreCacheControl_t;

typedef struct SpvOperandNamedMaximumNumberOfRegisters_ (int64 endOffset) {
    SpvNamedMaximumNumberOfRegisters value;
} SpvOperandNamedMaximumNumberOfRegisters_t;

typedef struct SpvOperandFPEncoding_ (int64 endOffset) {
    SpvFPEncoding value;
} SpvOperandFPEncoding_t;

typedef struct SpvOperandIdResultType_ (int64 endOffset) {
    SpvId value;
} SpvOperandIdResultType_t;

typedef struct SpvOperandIdResult_ (int64 endOffset) {
    SpvId value;
} SpvOperandIdResult_t;

typedef struct SpvOperandIdMemorySemantics_ (int64 endOffset) {
    SpvId value;
} SpvOperandIdMemorySemantics_t;

typedef struct SpvOperandIdScope_ (int64 endOffset) {
    SpvId value;
} SpvOperandIdScope_t;

typedef struct SpvOperandIdRef_ (int64 endOffset) {
    SpvId value;
} SpvOperandIdRef_t;

typedef struct SpvOperandLiteralInteger_ (int64 endOffset) {
    uint32 value;
} SpvOperandLiteralInteger_t;

typedef struct SpvOperandLiteralString_ (int64 endOffset) {
    string value;
    local int64 fpos = FTell();
    fpos = (fpos + sizeof(SpvWord_t) - 1) & ~(sizeof(SpvWord_t)-1);
    FSeek(fpos);
} SpvOperandLiteralString_t;

typedef struct SpvOperandLiteralFloat_ (int64 endOffset) {
    float value;
} SpvOperandLiteralFloat_t;

typedef struct SpvOperandLiteralContextDependentNumber_ (int64 endOffset) {
    local int64 fpos = FTell();
    local int64 len = endOffset - fpos;
    byte value[len];
} SpvOperandLiteralContextDependentNumber_t;

typedef struct SpvOperandLiteralExtInstInteger_ (int64 endOffset) {
    uint32 value;
} SpvOperandLiteralExtInstInteger_t;

typedef struct SpvOperandLiteralSpecConstantOpInteger_ (int64 endOffset) {
    uint32 value;
    local int64 fpos = FTell();
    local int64 len = endOffset - fpos;
    byte operands[len];
} SpvOperandLiteralSpecConstantOpInteger_t;

typedef struct SpvOperandPairLiteralIntegerIdRef_ (int64 endOffset) {
    SpvOperandLiteralInteger_t value0;
    SpvOperandIdRef_t value1;
} SpvOperandPairLiteralIntegerIdRef_t;

typedef struct SpvOperandPairIdRefLiteralInteger_ (int64 endOffset) {
    SpvOperandIdRef_t value0;
    SpvOperandLiteralInteger_t value1;
} SpvOperandPairIdRefLiteralInteger_t;

typedef struct SpvOperandPairIdRefIdRef_ (int64 endOffset) {
    SpvOperandIdRef_t value0;
    SpvOperandIdRef_t value1;
} SpvOperandPairIdRefIdRef_t;

void ParseOperandsSpvOpNop(int64 endOffset) {
}

void ParseOperandsSpvOpUndef(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpSourceContinued(int64 endOffset) {
    SpvOperandLiteralString_t operand0(endOffset);
}

void ParseOperandsSpvOpSource(int64 endOffset) {
    SpvOperandSourceLanguage_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand2(endOffset);
    }
    if (FTell() < endOffset) {
        SpvOperandLiteralString_t operand3(endOffset);
    }
}

void ParseOperandsSpvOpSourceExtension(int64 endOffset) {
    SpvOperandLiteralString_t operand0(endOffset);
}

void ParseOperandsSpvOpName(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandLiteralString_t operand1(endOffset);
}

void ParseOperandsSpvOpMemberName(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
    SpvOperandLiteralString_t operand2(endOffset);
}

void ParseOperandsSpvOpString(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandLiteralString_t operand1(endOffset);
}

void ParseOperandsSpvOpLine(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
    SpvOperandLiteralInteger_t operand2(endOffset);
}

void ParseOperandsSpvOpExtension(int64 endOffset) {
    SpvOperandLiteralString_t operand0(endOffset);
}

void ParseOperandsSpvOpExtInstImport(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandLiteralString_t operand1(endOffset);
}

void ParseOperandsSpvOpExtInst(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralExtInstInteger_t operand3(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic4(endOffset);
    }
}

void ParseOperandsSpvOpMemoryModel(int64 endOffset) {
    SpvOperandAddressingModel_t operand0(endOffset);
    SpvOperandMemoryModel_t operand1(endOffset);
}

void ParseOperandsSpvOpEntryPoint(int64 endOffset) {
    SpvOperandExecutionModel_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandLiteralString_t operand2(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic3(endOffset);
    }
}

void ParseOperandsSpvOpExecutionMode(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandExecutionMode_t operand1(endOffset);
}

void ParseOperandsSpvOpCapability(int64 endOffset) {
    SpvOperandCapability_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeVoid(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeBool(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeInt(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
    SpvOperandLiteralInteger_t operand2(endOffset);
}

void ParseOperandsSpvOpTypeFloat(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
    if (FTell() < endOffset) {
        SpvOperandFPEncoding_t operand2(endOffset);
    }
}

void ParseOperandsSpvOpTypeVector(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandLiteralInteger_t operand2(endOffset);
}

void ParseOperandsSpvOpTypeMatrix(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandLiteralInteger_t operand2(endOffset);
}

void ParseOperandsSpvOpTypeImage(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandDim_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandImageFormat_t operand7(endOffset);
    if (FTell() < endOffset) {
        SpvOperandAccessQualifier_t operand8(endOffset);
    }
}

void ParseOperandsSpvOpTypeSampler(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeSampledImage(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpTypeArray(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpTypeRuntimeArray(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpTypeStruct(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic1(endOffset);
    }
}

void ParseOperandsSpvOpTypeOpaque(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandLiteralString_t operand1(endOffset);
}

void ParseOperandsSpvOpTypePointer(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandStorageClass_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpTypeFunction(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic2(endOffset);
    }
}

void ParseOperandsSpvOpTypeEvent(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeDeviceEvent(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeReserveId(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeQueue(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypePipe(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandAccessQualifier_t operand1(endOffset);
}

void ParseOperandsSpvOpTypeForwardPointer(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandStorageClass_t operand1(endOffset);
}

void ParseOperandsSpvOpConstantTrue(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpConstantFalse(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpConstant(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandLiteralContextDependentNumber_t operand2(endOffset);
}

void ParseOperandsSpvOpConstantComposite(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic2(endOffset);
    }
}

void ParseOperandsSpvOpConstantSampler(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandSamplerAddressingMode_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandSamplerFilterMode_t operand4(endOffset);
}

void ParseOperandsSpvOpConstantNull(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpSpecConstantTrue(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpSpecConstantFalse(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpSpecConstant(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandLiteralContextDependentNumber_t operand2(endOffset);
}

void ParseOperandsSpvOpSpecConstantComposite(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic2(endOffset);
    }
}

void ParseOperandsSpvOpSpecConstantOp(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandLiteralSpecConstantOpInteger_t operand2(endOffset);
}

void ParseOperandsSpvOpFunction(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandFunctionControl_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFunctionParameter(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpFunctionEnd(int64 endOffset) {
}

void ParseOperandsSpvOpFunctionCall(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic3(endOffset);
    }
}

void ParseOperandsSpvOpVariable(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandStorageClass_t operand2(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand3(endOffset);
    }
}

void ParseOperandsSpvOpImageTexelPointer(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpLoad(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand3(endOffset);
    }
}

void ParseOperandsSpvOpStore(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand2(endOffset);
    }
}

void ParseOperandsSpvOpCopyMemory(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand2(endOffset);
    }
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand3(endOffset);
    }
}

void ParseOperandsSpvOpCopyMemorySized(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand3(endOffset);
    }
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpAccessChain(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic3(endOffset);
    }
}

void ParseOperandsSpvOpInBoundsAccessChain(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic3(endOffset);
    }
}

void ParseOperandsSpvOpPtrAccessChain(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic4(endOffset);
    }
}

void ParseOperandsSpvOpArrayLength(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
}

void ParseOperandsSpvOpGenericPtrMemSemantics(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpInBoundsPtrAccessChain(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic4(endOffset);
    }
}

void ParseOperandsSpvOpDecorate(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandDecoration_t operand1(endOffset);
}

void ParseOperandsSpvOpMemberDecorate(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
    SpvOperandDecoration_t operand2(endOffset);
}

void ParseOperandsSpvOpDecorationGroup(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpGroupDecorate(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic1(endOffset);
    }
}

void ParseOperandsSpvOpGroupMemberDecorate(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    while (FTell() < endOffset) {
        SpvOperandPairIdRefLiteralInteger_t operandVariadic1(endOffset);
    }
}

void ParseOperandsSpvOpVectorExtractDynamic(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpVectorInsertDynamic(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpVectorShuffle(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    while (FTell() < endOffset) {
        SpvOperandLiteralInteger_t operandVariadic4(endOffset);
    }
}

void ParseOperandsSpvOpCompositeConstruct(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic2(endOffset);
    }
}

void ParseOperandsSpvOpCompositeExtract(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    while (FTell() < endOffset) {
        SpvOperandLiteralInteger_t operandVariadic3(endOffset);
    }
}

void ParseOperandsSpvOpCompositeInsert(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    while (FTell() < endOffset) {
        SpvOperandLiteralInteger_t operandVariadic4(endOffset);
    }
}

void ParseOperandsSpvOpCopyObject(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpTranspose(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSampledImage(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpImageSampleImplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpImageSampleExplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandImageOperands_t operand4(endOffset);
}

void ParseOperandsSpvOpImageSampleDrefImplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpImageSampleDrefExplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandImageOperands_t operand5(endOffset);
}

void ParseOperandsSpvOpImageSampleProjImplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpImageSampleProjExplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandImageOperands_t operand4(endOffset);
}

void ParseOperandsSpvOpImageSampleProjDrefImplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpImageSampleProjDrefExplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandImageOperands_t operand5(endOffset);
}

void ParseOperandsSpvOpImageFetch(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpImageGather(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpImageDrefGather(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpImageRead(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpImageWrite(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand3(endOffset);
    }
}

void ParseOperandsSpvOpImage(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpImageQueryFormat(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpImageQueryOrder(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpImageQuerySizeLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpImageQuerySize(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpImageQueryLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpImageQueryLevels(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpImageQuerySamples(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertFToU(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertFToS(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertSToF(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertUToF(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpUConvert(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSConvert(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpFConvert(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpQuantizeToF16(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertPtrToU(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSatConvertSToU(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSatConvertUToS(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertUToPtr(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpPtrCastToGeneric(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpGenericCastToPtr(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpGenericCastToPtrExplicit(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandStorageClass_t operand3(endOffset);
}

void ParseOperandsSpvOpBitcast(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSNegate(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpFNegate(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpIAdd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFAdd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpISub(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFSub(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpIMul(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFMul(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUDiv(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSDiv(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFDiv(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUMod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSRem(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSMod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFRem(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFMod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpVectorTimesScalar(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpMatrixTimesScalar(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpVectorTimesMatrix(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpMatrixTimesVector(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpMatrixTimesMatrix(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpOuterProduct(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpDot(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpIAddCarry(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpISubBorrow(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUMulExtended(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSMulExtended(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpAny(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpAll(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpIsNan(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpIsInf(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpIsFinite(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpIsNormal(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSignBitSet(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpLessOrGreater(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpOrdered(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUnordered(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpLogicalEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpLogicalNotEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpLogicalOr(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpLogicalAnd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpLogicalNot(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSelect(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpIEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpINotEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUGreaterThan(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSGreaterThan(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUGreaterThanEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSGreaterThanEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpULessThan(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSLessThan(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpULessThanEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSLessThanEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFOrdEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFUnordEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFOrdNotEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFUnordNotEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFOrdLessThan(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFUnordLessThan(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFOrdGreaterThan(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFUnordGreaterThan(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFOrdLessThanEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFUnordLessThanEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFOrdGreaterThanEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFUnordGreaterThanEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpShiftRightLogical(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpShiftRightArithmetic(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpShiftLeftLogical(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpBitwiseOr(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpBitwiseXor(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpBitwiseAnd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpNot(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpBitFieldInsert(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpBitFieldSExtract(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpBitFieldUExtract(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpBitReverse(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpBitCount(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpDPdx(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpDPdy(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpFwidth(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpDPdxFine(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpDPdyFine(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpFwidthFine(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpDPdxCoarse(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpDPdyCoarse(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpFwidthCoarse(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpEmitVertex(int64 endOffset) {
}

void ParseOperandsSpvOpEndPrimitive(int64 endOffset) {
}

void ParseOperandsSpvOpEmitStreamVertex(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpEndStreamPrimitive(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpControlBarrier(int64 endOffset) {
    SpvOperandIdScope_t operand0(endOffset);
    SpvOperandIdScope_t operand1(endOffset);
    SpvOperandIdMemorySemantics_t operand2(endOffset);
}

void ParseOperandsSpvOpMemoryBarrier(int64 endOffset) {
    SpvOperandIdScope_t operand0(endOffset);
    SpvOperandIdMemorySemantics_t operand1(endOffset);
}

void ParseOperandsSpvOpAtomicLoad(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
}

void ParseOperandsSpvOpAtomicStore(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdScope_t operand1(endOffset);
    SpvOperandIdMemorySemantics_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpAtomicExchange(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicCompareExchange(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdMemorySemantics_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
}

void ParseOperandsSpvOpAtomicCompareExchangeWeak(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdMemorySemantics_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
}

void ParseOperandsSpvOpAtomicIIncrement(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
}

void ParseOperandsSpvOpAtomicIDecrement(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
}

void ParseOperandsSpvOpAtomicIAdd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicISub(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicSMin(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicUMin(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicSMax(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicUMax(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicAnd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicOr(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicXor(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpPhi(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    while (FTell() < endOffset) {
        SpvOperandPairIdRefIdRef_t operandVariadic2(endOffset);
    }
}

void ParseOperandsSpvOpLoopMerge(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandLoopControl_t operand2(endOffset);
}

void ParseOperandsSpvOpSelectionMerge(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandSelectionControl_t operand1(endOffset);
}

void ParseOperandsSpvOpLabel(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpBranch(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpBranchConditional(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    while (FTell() < endOffset) {
        SpvOperandLiteralInteger_t operandVariadic3(endOffset);
    }
}

void ParseOperandsSpvOpSwitch(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    while (FTell() < endOffset) {
        SpvOperandPairLiteralIntegerIdRef_t operandVariadic2(endOffset);
    }
}

void ParseOperandsSpvOpKill(int64 endOffset) {
}

void ParseOperandsSpvOpReturn(int64 endOffset) {
}

void ParseOperandsSpvOpReturnValue(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpUnreachable(int64 endOffset) {
}

void ParseOperandsSpvOpLifetimeStart(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
}

void ParseOperandsSpvOpLifetimeStop(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
}

void ParseOperandsSpvOpGroupAsyncCopy(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
}

void ParseOperandsSpvOpGroupWaitEvents(int64 endOffset) {
    SpvOperandIdScope_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpGroupAll(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupAny(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupBroadcast(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupIAdd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupFAdd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupFMin(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupUMin(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupSMin(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupFMax(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupUMax(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupSMax(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpReadPipe(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpWritePipe(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpReservedReadPipe(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
}

void ParseOperandsSpvOpReservedWritePipe(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
}

void ParseOperandsSpvOpReserveReadPipePackets(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpReserveWritePipePackets(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpCommitReadPipe(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpCommitWritePipe(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpIsValidReserveId(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpGetNumPipePackets(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGetMaxPipePackets(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupReserveReadPipePackets(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpGroupReserveWritePipePackets(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpGroupCommitReadPipe(int64 endOffset) {
    SpvOperandIdScope_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupCommitWritePipe(int64 endOffset) {
    SpvOperandIdScope_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpEnqueueMarker(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpEnqueueKernel(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic12(endOffset);
    }
}

void ParseOperandsSpvOpGetKernelNDrangeSubGroupCount(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpGetKernelNDrangeMaxSubGroupSize(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpGetKernelWorkGroupSize(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpGetKernelPreferredWorkGroupSizeMultiple(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpRetainEvent(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpReleaseEvent(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpCreateUserEvent(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpIsValidEvent(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSetUserEventStatus(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpCaptureEventProfilingInfo(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpGetDefaultQueue(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpBuildNDRange(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpImageSparseSampleImplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpImageSparseSampleExplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandImageOperands_t operand4(endOffset);
}

void ParseOperandsSpvOpImageSparseSampleDrefImplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpImageSparseSampleDrefExplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandImageOperands_t operand5(endOffset);
}

void ParseOperandsSpvOpImageSparseSampleProjImplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpImageSparseSampleProjExplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandImageOperands_t operand4(endOffset);
}

void ParseOperandsSpvOpImageSparseSampleProjDrefImplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpImageSparseSampleProjDrefExplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandImageOperands_t operand5(endOffset);
}

void ParseOperandsSpvOpImageSparseFetch(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpImageSparseGather(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpImageSparseDrefGather(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpImageSparseTexelsResident(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpNoLine(int64 endOffset) {
}

void ParseOperandsSpvOpAtomicFlagTestAndSet(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
}

void ParseOperandsSpvOpAtomicFlagClear(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdScope_t operand1(endOffset);
    SpvOperandIdMemorySemantics_t operand2(endOffset);
}

void ParseOperandsSpvOpImageSparseRead(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpSizeOf(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpTypePipeStorage(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpConstantPipeStorage(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandLiteralInteger_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
}

void ParseOperandsSpvOpCreatePipeFromPipeStorage(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpGetKernelLocalSizeForSubgroupCount(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpGetKernelMaxNumSubgroups(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpTypeNamedBarrier(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpNamedBarrierInitialize(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpMemoryNamedBarrier(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdScope_t operand1(endOffset);
    SpvOperandIdMemorySemantics_t operand2(endOffset);
}

void ParseOperandsSpvOpModuleProcessed(int64 endOffset) {
    SpvOperandLiteralString_t operand0(endOffset);
}

void ParseOperandsSpvOpExecutionModeId(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandExecutionMode_t operand1(endOffset);
}

void ParseOperandsSpvOpDecorateId(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandDecoration_t operand1(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformElect(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformAll(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformAny(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformAllEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformBroadcast(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformBroadcastFirst(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformBallot(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformInverseBallot(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformBallotBitExtract(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformBallotBitCount(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformBallotFindLSB(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformBallotFindMSB(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformShuffle(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformShuffleXor(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformShuffleUp(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformShuffleDown(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformIAdd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformFAdd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformIMul(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformFMul(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformSMin(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformUMin(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformFMin(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformSMax(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformUMax(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformFMax(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformBitwiseAnd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformBitwiseOr(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformBitwiseXor(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformLogicalAnd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformLogicalOr(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformLogicalXor(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformQuadBroadcast(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformQuadSwap(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpCopyLogical(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpPtrEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpPtrNotEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpPtrDiff(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpColorAttachmentReadEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand3(endOffset);
    }
}

void ParseOperandsSpvOpDepthAttachmentReadEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand2(endOffset);
    }
}

void ParseOperandsSpvOpStencilAttachmentReadEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand2(endOffset);
    }
}

void ParseOperandsSpvOpTerminateInvocation(int64 endOffset) {
}

void ParseOperandsSpvOpTypeUntypedPointerKHR(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandStorageClass_t operand1(endOffset);
}

void ParseOperandsSpvOpUntypedVariableKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandStorageClass_t operand2(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand3(endOffset);
    }
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpUntypedAccessChainKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic4(endOffset);
    }
}

void ParseOperandsSpvOpUntypedInBoundsAccessChainKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic4(endOffset);
    }
}

void ParseOperandsSpvOpSubgroupBallotKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupFirstInvocationKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpUntypedPtrAccessChainKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic5(endOffset);
    }
}

void ParseOperandsSpvOpUntypedInBoundsPtrAccessChainKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic5(endOffset);
    }
}

void ParseOperandsSpvOpUntypedArrayLengthKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
}

void ParseOperandsSpvOpUntypedPrefetchKHR(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand2(endOffset);
    }
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand3(endOffset);
    }
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpSubgroupAllKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAnyKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAllEqualKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformRotateKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpSubgroupReadInvocationKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpExtInstWithForwardRefsKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralExtInstInteger_t operand3(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic4(endOffset);
    }
}

void ParseOperandsSpvOpTraceRayKHR(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
}

void ParseOperandsSpvOpExecuteCallableKHR(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpConvertUToAccelerationStructureKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpIgnoreIntersectionKHR(int64 endOffset) {
}

void ParseOperandsSpvOpTerminateRayKHR(int64 endOffset) {
}

void ParseOperandsSpvOpSDot(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpSDotKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpUDot(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpUDotKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpSUDot(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpSUDotKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpSDotAccSat(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpSDotAccSatKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpUDotAccSat(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpUDotAccSatKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpSUDotAccSat(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpSUDotAccSatKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpTypeCooperativeMatrixKHR(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpCooperativeMatrixLoadKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand4(endOffset);
    }
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpCooperativeMatrixStoreKHR(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand3(endOffset);
    }
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpCooperativeMatrixMulAddKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandCooperativeMatrixOperands_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpCooperativeMatrixLengthKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConstantCompositeReplicateEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSpecConstantCompositeReplicateEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpCompositeConstructReplicateEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpTypeRayQueryKHR(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpRayQueryInitializeKHR(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
}

void ParseOperandsSpvOpRayQueryTerminateKHR(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpRayQueryGenerateIntersectionKHR(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpRayQueryConfirmIntersectionKHR(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpRayQueryProceedKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionTypeKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpImageSampleWeightedQCOM(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpImageBoxFilterQCOM(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpImageBlockMatchSSDQCOM(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpImageBlockMatchSADQCOM(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpImageBlockMatchWindowSSDQCOM(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpImageBlockMatchWindowSADQCOM(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpImageBlockMatchGatherSSDQCOM(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpImageBlockMatchGatherSADQCOM(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpGroupIAddNonUniformAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupFAddNonUniformAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupFMinNonUniformAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupUMinNonUniformAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupSMinNonUniformAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupFMaxNonUniformAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupUMaxNonUniformAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupSMaxNonUniformAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpFragmentMaskFetchAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFragmentFetchAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpReadClockKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
}

void ParseOperandsSpvOpFinalizeNodePayloadsAMDX(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpFinishWritingNodePayloadAMDX(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpInitializeNodePayloadsAMDX(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdScope_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformQuadAllKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformQuadAnyKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectRecordHitMotionNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
    SpvOperandIdRef_t operand12(endOffset);
    SpvOperandIdRef_t operand13(endOffset);
}

void ParseOperandsSpvOpHitObjectRecordHitWithIndexMotionNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
    SpvOperandIdRef_t operand12(endOffset);
}

void ParseOperandsSpvOpHitObjectRecordMissMotionNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpHitObjectGetWorldToObjectNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetObjectToWorldNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetObjectRayDirectionNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetObjectRayOriginNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectTraceRayMotionNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
    SpvOperandIdRef_t operand12(endOffset);
}

void ParseOperandsSpvOpHitObjectGetShaderRecordBufferHandleNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetShaderBindingTableRecordIndexNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectRecordEmptyNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpHitObjectTraceRayNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
}

void ParseOperandsSpvOpHitObjectRecordHitNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
    SpvOperandIdRef_t operand12(endOffset);
}

void ParseOperandsSpvOpHitObjectRecordHitWithIndexNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
}

void ParseOperandsSpvOpHitObjectRecordMissNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpHitObjectExecuteShaderNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpHitObjectGetCurrentTimeNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetAttributesNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpHitObjectGetHitKindNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetPrimitiveIndexNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetGeometryIndexNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetInstanceIdNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetInstanceCustomIndexNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetWorldRayDirectionNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetWorldRayOriginNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetRayTMaxNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetRayTMinNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectIsEmptyNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectIsHitNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectIsMissNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpReorderThreadWithHitObjectNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand1(endOffset);
    }
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand2(endOffset);
    }
}

void ParseOperandsSpvOpReorderThreadWithHintNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpTypeHitObjectNV(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpImageSampleFootprintNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand6(endOffset);
    }
}

void ParseOperandsSpvOpEmitMeshTasksEXT(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand3(endOffset);
    }
}

void ParseOperandsSpvOpSetMeshOutputsEXT(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformPartitionNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpWritePackedPrimitiveIndices4x8NV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpFetchMicroTriangleVertexPositionNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpFetchMicroTriangleVertexBarycentricNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpReportIntersectionKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpReportIntersectionNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpIgnoreIntersectionNV(int64 endOffset) {
}

void ParseOperandsSpvOpTerminateRayNV(int64 endOffset) {
}

void ParseOperandsSpvOpTraceNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
}

void ParseOperandsSpvOpTraceMotionNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
}

void ParseOperandsSpvOpTraceRayMotionNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionTriangleVertexPositionsKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpTypeAccelerationStructureKHR(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAccelerationStructureNV(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpExecuteCallableNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpTypeCooperativeMatrixNV(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpCooperativeMatrixLoadNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpCooperativeMatrixStoreNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpCooperativeMatrixMulAddNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpCooperativeMatrixLengthNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpBeginInvocationInterlockEXT(int64 endOffset) {
}

void ParseOperandsSpvOpEndInvocationInterlockEXT(int64 endOffset) {
}

void ParseOperandsSpvOpDemoteToHelperInvocation(int64 endOffset) {
}

void ParseOperandsSpvOpDemoteToHelperInvocationEXT(int64 endOffset) {
}

void ParseOperandsSpvOpIsHelperInvocationEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpConvertUToImageNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertUToSamplerNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertImageToUNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertSamplerToUNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertUToSampledImageNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertSampledImageToUNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSamplerImageAddressingModeNV(int64 endOffset) {
    SpvOperandLiteralInteger_t operand0(endOffset);
}

void ParseOperandsSpvOpRawAccessChainNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    if (FTell() < endOffset) {
        SpvOperandRawAccessChainOperands_t operand6(endOffset);
    }
}

void ParseOperandsSpvOpSubgroupShuffleINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupShuffleDownINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupShuffleUpINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupShuffleXorINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupBlockReadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupBlockWriteINTEL(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpSubgroupImageBlockReadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupImageBlockWriteINTEL(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupImageMediaBlockReadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupImageMediaBlockWriteINTEL(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpUCountLeadingZerosINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpUCountTrailingZerosINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpAbsISubINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpAbsUSubINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpIAddSatINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUAddSatINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpIAverageINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUAverageINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpIAverageRoundedINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUAverageRoundedINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpISubSatINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUSubSatINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpIMul32x16INTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUMul32x16INTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpConstantFunctionPointerINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpFunctionPointerCallINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic2(endOffset);
    }
}

void ParseOperandsSpvOpAsmTargetINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandLiteralString_t operand2(endOffset);
}

void ParseOperandsSpvOpAsmINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralString_t operand4(endOffset);
    SpvOperandLiteralString_t operand5(endOffset);
}

void ParseOperandsSpvOpAsmCallINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic3(endOffset);
    }
}

void ParseOperandsSpvOpAtomicFMinEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicFMaxEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAssumeTrueKHR(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpExpectKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpDecorateString(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandDecoration_t operand1(endOffset);
}

void ParseOperandsSpvOpDecorateStringGOOGLE(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandDecoration_t operand1(endOffset);
}

void ParseOperandsSpvOpMemberDecorateString(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
    SpvOperandDecoration_t operand2(endOffset);
}

void ParseOperandsSpvOpMemberDecorateStringGOOGLE(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
    SpvOperandDecoration_t operand2(endOffset);
}

void ParseOperandsSpvOpVmeImageINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpTypeVmeImageINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpTypeAvcImePayloadINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcRefPayloadINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcSicPayloadINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcMcePayloadINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcMceResultINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcImeResultINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcImeResultDualReferenceStreamoutINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcImeSingleReferenceStreaminINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcImeDualReferenceStreaminINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcRefResultINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcSicResultINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceSetInterShapePenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceSetAcOnlyHaarINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceConvertToImePayloadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceConvertToImeResultINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceConvertToRefPayloadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceConvertToRefResultINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceConvertToSicPayloadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceConvertToSicResultINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetMotionVectorsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetInterDistortionsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetBestInterDistortionsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetInterMajorShapeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetInterMinorShapeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetInterDirectionsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetInterReferenceIdsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeInitializeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeSetSingleReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeSetDualReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeRefWindowSizeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeAdjustRefOffsetINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeConvertToMcePayloadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeSetWeightedSadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeConvertToMceResultINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetBorderReachedINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcFmeInitializeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcBmeInitializeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcRefConvertToMcePayloadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcRefConvertToMceResultINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicInitializeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicConfigureSkcINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicConfigureIpeLumaINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
    SpvOperandIdRef_t operand12(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicGetMotionVectorMaskINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicConvertToMcePayloadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicEvaluateIpeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicConvertToMceResultINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicGetIpeLumaShapeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicGetIpeChromaModeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicGetInterRawSadsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpVariableLengthArrayINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSaveMemoryINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpRestoreMemoryINTEL(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatSinCosPiINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatCastINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatCastFromIntINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatCastToIntINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatAddINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
    SpvOperandLiteralInteger_t operand9(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatSubINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
    SpvOperandLiteralInteger_t operand9(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatMulINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
    SpvOperandLiteralInteger_t operand9(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatDivINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
    SpvOperandLiteralInteger_t operand9(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatGTINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatGEINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatLTINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatLEINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatEQINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatRecipINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatRSqrtINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatCbrtINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatHypotINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
    SpvOperandLiteralInteger_t operand9(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatSqrtINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatLogINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatLog2INTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatLog10INTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatLog1pINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatExpINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatExp2INTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatExp10INTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatExpm1INTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatSinINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatCosINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatSinCosINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatSinPiINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatCosPiINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatASinINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatASinPiINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatACosINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatACosPiINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatATanINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatATanPiINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatATan2INTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
    SpvOperandLiteralInteger_t operand9(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatPowINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
    SpvOperandLiteralInteger_t operand9(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatPowRINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
    SpvOperandLiteralInteger_t operand9(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatPowNINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpLoopControlINTEL(int64 endOffset) {
    while (FTell() < endOffset) {
        SpvOperandLiteralInteger_t operandVariadic0(endOffset);
    }
}

void ParseOperandsSpvOpAliasDomainDeclINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand1(endOffset);
    }
}

void ParseOperandsSpvOpAliasScopeDeclINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand2(endOffset);
    }
}

void ParseOperandsSpvOpAliasScopeListDeclINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic1(endOffset);
    }
}

void ParseOperandsSpvOpFixedSqrtINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedRecipINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedRsqrtINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedSinINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedCosINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedSinCosINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedSinPiINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedCosPiINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedSinCosPiINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedLogINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedExpINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpPtrCastToCrossWorkgroupINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpCrossWorkgroupCastToPtrINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpReadPipeBlockingINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpWritePipeBlockingINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFPGARegINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetRayTMinKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpRayQueryGetRayFlagsKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionTKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionInstanceCustomIndexKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionInstanceIdKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionGeometryIndexKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionPrimitiveIndexKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionBarycentricsKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionFrontFaceKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionCandidateAABBOpaqueKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionObjectRayDirectionKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionObjectRayOriginKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetWorldRayDirectionKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpRayQueryGetWorldRayOriginKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionObjectToWorldKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionWorldToObjectKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpAtomicFAddEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpTypeBufferSurfaceINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandAccessQualifier_t operand1(endOffset);
}

void ParseOperandsSpvOpTypeStructContinuedINTEL(int64 endOffset) {
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic0(endOffset);
    }
}

void ParseOperandsSpvOpConstantCompositeContinuedINTEL(int64 endOffset) {
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic0(endOffset);
    }
}

void ParseOperandsSpvOpSpecConstantCompositeContinuedINTEL(int64 endOffset) {
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic0(endOffset);
    }
}

void ParseOperandsSpvOpCompositeConstructContinuedINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic2(endOffset);
    }
}

void ParseOperandsSpvOpConvertFToBF16INTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertBF16ToFINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpControlBarrierArriveINTEL(int64 endOffset) {
    SpvOperandIdScope_t operand0(endOffset);
    SpvOperandIdScope_t operand1(endOffset);
    SpvOperandIdMemorySemantics_t operand2(endOffset);
}

void ParseOperandsSpvOpControlBarrierWaitINTEL(int64 endOffset) {
    SpvOperandIdScope_t operand0(endOffset);
    SpvOperandIdScope_t operand1(endOffset);
    SpvOperandIdMemorySemantics_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupBlockPrefetchINTEL(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand2(endOffset);
    }
}

void ParseOperandsSpvOpGroupIMulKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupFMulKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupBitwiseAndKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupBitwiseOrKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupBitwiseXorKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupLogicalAndKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupLogicalOrKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupLogicalXorKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpMaskedGatherINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpMaskedScatterINTEL(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandLiteralInteger_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperands(SpvOp opcode, int64 endOffset) {
    switch (opcode) {
        case SpvOpNop:
        {
            ParseOperandsSpvOpNop(endOffset);
            break;
        }
        case SpvOpUndef:
        {
            ParseOperandsSpvOpUndef(endOffset);
            break;
        }
        case SpvOpSourceContinued:
        {
            ParseOperandsSpvOpSourceContinued(endOffset);
            break;
        }
        case SpvOpSource:
        {
            ParseOperandsSpvOpSource(endOffset);
            break;
        }
        case SpvOpSourceExtension:
        {
            ParseOperandsSpvOpSourceExtension(endOffset);
            break;
        }
        case SpvOpName:
        {
            ParseOperandsSpvOpName(endOffset);
            break;
        }
        case SpvOpMemberName:
        {
            ParseOperandsSpvOpMemberName(endOffset);
            break;
        }
        case SpvOpString:
        {
            ParseOperandsSpvOpString(endOffset);
            break;
        }
        case SpvOpLine:
        {
            ParseOperandsSpvOpLine(endOffset);
            break;
        }
        case SpvOpExtension:
        {
            ParseOperandsSpvOpExtension(endOffset);
            break;
        }
        case SpvOpExtInstImport:
        {
            ParseOperandsSpvOpExtInstImport(endOffset);
            break;
        }
        case SpvOpExtInst:
        {
            ParseOperandsSpvOpExtInst(endOffset);
            break;
        }
        case SpvOpMemoryModel:
        {
            ParseOperandsSpvOpMemoryModel(endOffset);
            break;
        }
        case SpvOpEntryPoint:
        {
            ParseOperandsSpvOpEntryPoint(endOffset);
            break;
        }
        case SpvOpExecutionMode:
        {
            ParseOperandsSpvOpExecutionMode(endOffset);
            break;
        }
        case SpvOpCapability:
        {
            ParseOperandsSpvOpCapability(endOffset);
            break;
        }
        case SpvOpTypeVoid:
        {
            ParseOperandsSpvOpTypeVoid(endOffset);
            break;
        }
        case SpvOpTypeBool:
        {
            ParseOperandsSpvOpTypeBool(endOffset);
            break;
        }
        case SpvOpTypeInt:
        {
            ParseOperandsSpvOpTypeInt(endOffset);
            break;
        }
        case SpvOpTypeFloat:
        {
            ParseOperandsSpvOpTypeFloat(endOffset);
            break;
        }
        case SpvOpTypeVector:
        {
            ParseOperandsSpvOpTypeVector(endOffset);
            break;
        }
        case SpvOpTypeMatrix:
        {
            ParseOperandsSpvOpTypeMatrix(endOffset);
            break;
        }
        case SpvOpTypeImage:
        {
            ParseOperandsSpvOpTypeImage(endOffset);
            break;
        }
        case SpvOpTypeSampler:
        {
            ParseOperandsSpvOpTypeSampler(endOffset);
            break;
        }
        case SpvOpTypeSampledImage:
        {
            ParseOperandsSpvOpTypeSampledImage(endOffset);
            break;
        }
        case SpvOpTypeArray:
        {
            ParseOperandsSpvOpTypeArray(endOffset);
            break;
        }
        case SpvOpTypeRuntimeArray:
        {
            ParseOperandsSpvOpTypeRuntimeArray(endOffset);
            break;
        }
        case SpvOpTypeStruct:
        {
            ParseOperandsSpvOpTypeStruct(endOffset);
            break;
        }
        case SpvOpTypeOpaque:
        {
            ParseOperandsSpvOpTypeOpaque(endOffset);
            break;
        }
        case SpvOpTypePointer:
        {
            ParseOperandsSpvOpTypePointer(endOffset);
            break;
        }
        case SpvOpTypeFunction:
        {
            ParseOperandsSpvOpTypeFunction(endOffset);
            break;
        }
        case SpvOpTypeEvent:
        {
            ParseOperandsSpvOpTypeEvent(endOffset);
            break;
        }
        case SpvOpTypeDeviceEvent:
        {
            ParseOperandsSpvOpTypeDeviceEvent(endOffset);
            break;
        }
        case SpvOpTypeReserveId:
        {
            ParseOperandsSpvOpTypeReserveId(endOffset);
            break;
        }
        case SpvOpTypeQueue:
        {
            ParseOperandsSpvOpTypeQueue(endOffset);
            break;
        }
        case SpvOpTypePipe:
        {
            ParseOperandsSpvOpTypePipe(endOffset);
            break;
        }
        case SpvOpTypeForwardPointer:
        {
            ParseOperandsSpvOpTypeForwardPointer(endOffset);
            break;
        }
        case SpvOpConstantTrue:
        {
            ParseOperandsSpvOpConstantTrue(endOffset);
            break;
        }
        case SpvOpConstantFalse:
        {
            ParseOperandsSpvOpConstantFalse(endOffset);
            break;
        }
        case SpvOpConstant:
        {
            ParseOperandsSpvOpConstant(endOffset);
            break;
        }
        case SpvOpConstantComposite:
        {
            ParseOperandsSpvOpConstantComposite(endOffset);
            break;
        }
        case SpvOpConstantSampler:
        {
            ParseOperandsSpvOpConstantSampler(endOffset);
            break;
        }
        case SpvOpConstantNull:
        {
            ParseOperandsSpvOpConstantNull(endOffset);
            break;
        }
        case SpvOpSpecConstantTrue:
        {
            ParseOperandsSpvOpSpecConstantTrue(endOffset);
            break;
        }
        case SpvOpSpecConstantFalse:
        {
            ParseOperandsSpvOpSpecConstantFalse(endOffset);
            break;
        }
        case SpvOpSpecConstant:
        {
            ParseOperandsSpvOpSpecConstant(endOffset);
            break;
        }
        case SpvOpSpecConstantComposite:
        {
            ParseOperandsSpvOpSpecConstantComposite(endOffset);
            break;
        }
        case SpvOpSpecConstantOp:
        {
            ParseOperandsSpvOpSpecConstantOp(endOffset);
            break;
        }
        case SpvOpFunction:
        {
            ParseOperandsSpvOpFunction(endOffset);
            break;
        }
        case SpvOpFunctionParameter:
        {
            ParseOperandsSpvOpFunctionParameter(endOffset);
            break;
        }
        case SpvOpFunctionEnd:
        {
            ParseOperandsSpvOpFunctionEnd(endOffset);
            break;
        }
        case SpvOpFunctionCall:
        {
            ParseOperandsSpvOpFunctionCall(endOffset);
            break;
        }
        case SpvOpVariable:
        {
            ParseOperandsSpvOpVariable(endOffset);
            break;
        }
        case SpvOpImageTexelPointer:
        {
            ParseOperandsSpvOpImageTexelPointer(endOffset);
            break;
        }
        case SpvOpLoad:
        {
            ParseOperandsSpvOpLoad(endOffset);
            break;
        }
        case SpvOpStore:
        {
            ParseOperandsSpvOpStore(endOffset);
            break;
        }
        case SpvOpCopyMemory:
        {
            ParseOperandsSpvOpCopyMemory(endOffset);
            break;
        }
        case SpvOpCopyMemorySized:
        {
            ParseOperandsSpvOpCopyMemorySized(endOffset);
            break;
        }
        case SpvOpAccessChain:
        {
            ParseOperandsSpvOpAccessChain(endOffset);
            break;
        }
        case SpvOpInBoundsAccessChain:
        {
            ParseOperandsSpvOpInBoundsAccessChain(endOffset);
            break;
        }
        case SpvOpPtrAccessChain:
        {
            ParseOperandsSpvOpPtrAccessChain(endOffset);
            break;
        }
        case SpvOpArrayLength:
        {
            ParseOperandsSpvOpArrayLength(endOffset);
            break;
        }
        case SpvOpGenericPtrMemSemantics:
        {
            ParseOperandsSpvOpGenericPtrMemSemantics(endOffset);
            break;
        }
        case SpvOpInBoundsPtrAccessChain:
        {
            ParseOperandsSpvOpInBoundsPtrAccessChain(endOffset);
            break;
        }
        case SpvOpDecorate:
        {
            ParseOperandsSpvOpDecorate(endOffset);
            break;
        }
        case SpvOpMemberDecorate:
        {
            ParseOperandsSpvOpMemberDecorate(endOffset);
            break;
        }
        case SpvOpDecorationGroup:
        {
            ParseOperandsSpvOpDecorationGroup(endOffset);
            break;
        }
        case SpvOpGroupDecorate:
        {
            ParseOperandsSpvOpGroupDecorate(endOffset);
            break;
        }
        case SpvOpGroupMemberDecorate:
        {
            ParseOperandsSpvOpGroupMemberDecorate(endOffset);
            break;
        }
        case SpvOpVectorExtractDynamic:
        {
            ParseOperandsSpvOpVectorExtractDynamic(endOffset);
            break;
        }
        case SpvOpVectorInsertDynamic:
        {
            ParseOperandsSpvOpVectorInsertDynamic(endOffset);
            break;
        }
        case SpvOpVectorShuffle:
        {
            ParseOperandsSpvOpVectorShuffle(endOffset);
            break;
        }
        case SpvOpCompositeConstruct:
        {
            ParseOperandsSpvOpCompositeConstruct(endOffset);
            break;
        }
        case SpvOpCompositeExtract:
        {
            ParseOperandsSpvOpCompositeExtract(endOffset);
            break;
        }
        case SpvOpCompositeInsert:
        {
            ParseOperandsSpvOpCompositeInsert(endOffset);
            break;
        }
        case SpvOpCopyObject:
        {
            ParseOperandsSpvOpCopyObject(endOffset);
            break;
        }
        case SpvOpTranspose:
        {
            ParseOperandsSpvOpTranspose(endOffset);
            break;
        }
        case SpvOpSampledImage:
        {
            ParseOperandsSpvOpSampledImage(endOffset);
            break;
        }
        case SpvOpImageSampleImplicitLod:
        {
            ParseOperandsSpvOpImageSampleImplicitLod(endOffset);
            break;
        }
        case SpvOpImageSampleExplicitLod:
        {
            ParseOperandsSpvOpImageSampleExplicitLod(endOffset);
            break;
        }
        case SpvOpImageSampleDrefImplicitLod:
        {
            ParseOperandsSpvOpImageSampleDrefImplicitLod(endOffset);
            break;
        }
        case SpvOpImageSampleDrefExplicitLod:
        {
            ParseOperandsSpvOpImageSampleDrefExplicitLod(endOffset);
            break;
        }
        case SpvOpImageSampleProjImplicitLod:
        {
            ParseOperandsSpvOpImageSampleProjImplicitLod(endOffset);
            break;
        }
        case SpvOpImageSampleProjExplicitLod:
        {
            ParseOperandsSpvOpImageSampleProjExplicitLod(endOffset);
            break;
        }
        case SpvOpImageSampleProjDrefImplicitLod:
        {
            ParseOperandsSpvOpImageSampleProjDrefImplicitLod(endOffset);
            break;
        }
        case SpvOpImageSampleProjDrefExplicitLod:
        {
            ParseOperandsSpvOpImageSampleProjDrefExplicitLod(endOffset);
            break;
        }
        case SpvOpImageFetch:
        {
            ParseOperandsSpvOpImageFetch(endOffset);
            break;
        }
        case SpvOpImageGather:
        {
            ParseOperandsSpvOpImageGather(endOffset);
            break;
        }
        case SpvOpImageDrefGather:
        {
            ParseOperandsSpvOpImageDrefGather(endOffset);
            break;
        }
        case SpvOpImageRead:
        {
            ParseOperandsSpvOpImageRead(endOffset);
            break;
        }
        case SpvOpImageWrite:
        {
            ParseOperandsSpvOpImageWrite(endOffset);
            break;
        }
        case SpvOpImage:
        {
            ParseOperandsSpvOpImage(endOffset);
            break;
        }
        case SpvOpImageQueryFormat:
        {
            ParseOperandsSpvOpImageQueryFormat(endOffset);
            break;
        }
        case SpvOpImageQueryOrder:
        {
            ParseOperandsSpvOpImageQueryOrder(endOffset);
            break;
        }
        case SpvOpImageQuerySizeLod:
        {
            ParseOperandsSpvOpImageQuerySizeLod(endOffset);
            break;
        }
        case SpvOpImageQuerySize:
        {
            ParseOperandsSpvOpImageQuerySize(endOffset);
            break;
        }
        case SpvOpImageQueryLod:
        {
            ParseOperandsSpvOpImageQueryLod(endOffset);
            break;
        }
        case SpvOpImageQueryLevels:
        {
            ParseOperandsSpvOpImageQueryLevels(endOffset);
            break;
        }
        case SpvOpImageQuerySamples:
        {
            ParseOperandsSpvOpImageQuerySamples(endOffset);
            break;
        }
        case SpvOpConvertFToU:
        {
            ParseOperandsSpvOpConvertFToU(endOffset);
            break;
        }
        case SpvOpConvertFToS:
        {
            ParseOperandsSpvOpConvertFToS(endOffset);
            break;
        }
        case SpvOpConvertSToF:
        {
            ParseOperandsSpvOpConvertSToF(endOffset);
            break;
        }
        case SpvOpConvertUToF:
        {
            ParseOperandsSpvOpConvertUToF(endOffset);
            break;
        }
        case SpvOpUConvert:
        {
            ParseOperandsSpvOpUConvert(endOffset);
            break;
        }
        case SpvOpSConvert:
        {
            ParseOperandsSpvOpSConvert(endOffset);
            break;
        }
        case SpvOpFConvert:
        {
            ParseOperandsSpvOpFConvert(endOffset);
            break;
        }
        case SpvOpQuantizeToF16:
        {
            ParseOperandsSpvOpQuantizeToF16(endOffset);
            break;
        }
        case SpvOpConvertPtrToU:
        {
            ParseOperandsSpvOpConvertPtrToU(endOffset);
            break;
        }
        case SpvOpSatConvertSToU:
        {
            ParseOperandsSpvOpSatConvertSToU(endOffset);
            break;
        }
        case SpvOpSatConvertUToS:
        {
            ParseOperandsSpvOpSatConvertUToS(endOffset);
            break;
        }
        case SpvOpConvertUToPtr:
        {
            ParseOperandsSpvOpConvertUToPtr(endOffset);
            break;
        }
        case SpvOpPtrCastToGeneric:
        {
            ParseOperandsSpvOpPtrCastToGeneric(endOffset);
            break;
        }
        case SpvOpGenericCastToPtr:
        {
            ParseOperandsSpvOpGenericCastToPtr(endOffset);
            break;
        }
        case SpvOpGenericCastToPtrExplicit:
        {
            ParseOperandsSpvOpGenericCastToPtrExplicit(endOffset);
            break;
        }
        case SpvOpBitcast:
        {
            ParseOperandsSpvOpBitcast(endOffset);
            break;
        }
        case SpvOpSNegate:
        {
            ParseOperandsSpvOpSNegate(endOffset);
            break;
        }
        case SpvOpFNegate:
        {
            ParseOperandsSpvOpFNegate(endOffset);
            break;
        }
        case SpvOpIAdd:
        {
            ParseOperandsSpvOpIAdd(endOffset);
            break;
        }
        case SpvOpFAdd:
        {
            ParseOperandsSpvOpFAdd(endOffset);
            break;
        }
        case SpvOpISub:
        {
            ParseOperandsSpvOpISub(endOffset);
            break;
        }
        case SpvOpFSub:
        {
            ParseOperandsSpvOpFSub(endOffset);
            break;
        }
        case SpvOpIMul:
        {
            ParseOperandsSpvOpIMul(endOffset);
            break;
        }
        case SpvOpFMul:
        {
            ParseOperandsSpvOpFMul(endOffset);
            break;
        }
        case SpvOpUDiv:
        {
            ParseOperandsSpvOpUDiv(endOffset);
            break;
        }
        case SpvOpSDiv:
        {
            ParseOperandsSpvOpSDiv(endOffset);
            break;
        }
        case SpvOpFDiv:
        {
            ParseOperandsSpvOpFDiv(endOffset);
            break;
        }
        case SpvOpUMod:
        {
            ParseOperandsSpvOpUMod(endOffset);
            break;
        }
        case SpvOpSRem:
        {
            ParseOperandsSpvOpSRem(endOffset);
            break;
        }
        case SpvOpSMod:
        {
            ParseOperandsSpvOpSMod(endOffset);
            break;
        }
        case SpvOpFRem:
        {
            ParseOperandsSpvOpFRem(endOffset);
            break;
        }
        case SpvOpFMod:
        {
            ParseOperandsSpvOpFMod(endOffset);
            break;
        }
        case SpvOpVectorTimesScalar:
        {
            ParseOperandsSpvOpVectorTimesScalar(endOffset);
            break;
        }
        case SpvOpMatrixTimesScalar:
        {
            ParseOperandsSpvOpMatrixTimesScalar(endOffset);
            break;
        }
        case SpvOpVectorTimesMatrix:
        {
            ParseOperandsSpvOpVectorTimesMatrix(endOffset);
            break;
        }
        case SpvOpMatrixTimesVector:
        {
            ParseOperandsSpvOpMatrixTimesVector(endOffset);
            break;
        }
        case SpvOpMatrixTimesMatrix:
        {
            ParseOperandsSpvOpMatrixTimesMatrix(endOffset);
            break;
        }
        case SpvOpOuterProduct:
        {
            ParseOperandsSpvOpOuterProduct(endOffset);
            break;
        }
        case SpvOpDot:
        {
            ParseOperandsSpvOpDot(endOffset);
            break;
        }
        case SpvOpIAddCarry:
        {
            ParseOperandsSpvOpIAddCarry(endOffset);
            break;
        }
        case SpvOpISubBorrow:
        {
            ParseOperandsSpvOpISubBorrow(endOffset);
            break;
        }
        case SpvOpUMulExtended:
        {
            ParseOperandsSpvOpUMulExtended(endOffset);
            break;
        }
        case SpvOpSMulExtended:
        {
            ParseOperandsSpvOpSMulExtended(endOffset);
            break;
        }
        case SpvOpAny:
        {
            ParseOperandsSpvOpAny(endOffset);
            break;
        }
        case SpvOpAll:
        {
            ParseOperandsSpvOpAll(endOffset);
            break;
        }
        case SpvOpIsNan:
        {
            ParseOperandsSpvOpIsNan(endOffset);
            break;
        }
        case SpvOpIsInf:
        {
            ParseOperandsSpvOpIsInf(endOffset);
            break;
        }
        case SpvOpIsFinite:
        {
            ParseOperandsSpvOpIsFinite(endOffset);
            break;
        }
        case SpvOpIsNormal:
        {
            ParseOperandsSpvOpIsNormal(endOffset);
            break;
        }
        case SpvOpSignBitSet:
        {
            ParseOperandsSpvOpSignBitSet(endOffset);
            break;
        }
        case SpvOpLessOrGreater:
        {
            ParseOperandsSpvOpLessOrGreater(endOffset);
            break;
        }
        case SpvOpOrdered:
        {
            ParseOperandsSpvOpOrdered(endOffset);
            break;
        }
        case SpvOpUnordered:
        {
            ParseOperandsSpvOpUnordered(endOffset);
            break;
        }
        case SpvOpLogicalEqual:
        {
            ParseOperandsSpvOpLogicalEqual(endOffset);
            break;
        }
        case SpvOpLogicalNotEqual:
        {
            ParseOperandsSpvOpLogicalNotEqual(endOffset);
            break;
        }
        case SpvOpLogicalOr:
        {
            ParseOperandsSpvOpLogicalOr(endOffset);
            break;
        }
        case SpvOpLogicalAnd:
        {
            ParseOperandsSpvOpLogicalAnd(endOffset);
            break;
        }
        case SpvOpLogicalNot:
        {
            ParseOperandsSpvOpLogicalNot(endOffset);
            break;
        }
        case SpvOpSelect:
        {
            ParseOperandsSpvOpSelect(endOffset);
            break;
        }
        case SpvOpIEqual:
        {
            ParseOperandsSpvOpIEqual(endOffset);
            break;
        }
        case SpvOpINotEqual:
        {
            ParseOperandsSpvOpINotEqual(endOffset);
            break;
        }
        case SpvOpUGreaterThan:
        {
            ParseOperandsSpvOpUGreaterThan(endOffset);
            break;
        }
        case SpvOpSGreaterThan:
        {
            ParseOperandsSpvOpSGreaterThan(endOffset);
            break;
        }
        case SpvOpUGreaterThanEqual:
        {
            ParseOperandsSpvOpUGreaterThanEqual(endOffset);
            break;
        }
        case SpvOpSGreaterThanEqual:
        {
            ParseOperandsSpvOpSGreaterThanEqual(endOffset);
            break;
        }
        case SpvOpULessThan:
        {
            ParseOperandsSpvOpULessThan(endOffset);
            break;
        }
        case SpvOpSLessThan:
        {
            ParseOperandsSpvOpSLessThan(endOffset);
            break;
        }
        case SpvOpULessThanEqual:
        {
            ParseOperandsSpvOpULessThanEqual(endOffset);
            break;
        }
        case SpvOpSLessThanEqual:
        {
            ParseOperandsSpvOpSLessThanEqual(endOffset);
            break;
        }
        case SpvOpFOrdEqual:
        {
            ParseOperandsSpvOpFOrdEqual(endOffset);
            break;
        }
        case SpvOpFUnordEqual:
        {
            ParseOperandsSpvOpFUnordEqual(endOffset);
            break;
        }
        case SpvOpFOrdNotEqual:
        {
            ParseOperandsSpvOpFOrdNotEqual(endOffset);
            break;
        }
        case SpvOpFUnordNotEqual:
        {
            ParseOperandsSpvOpFUnordNotEqual(endOffset);
            break;
        }
        case SpvOpFOrdLessThan:
        {
            ParseOperandsSpvOpFOrdLessThan(endOffset);
            break;
        }
        case SpvOpFUnordLessThan:
        {
            ParseOperandsSpvOpFUnordLessThan(endOffset);
            break;
        }
        case SpvOpFOrdGreaterThan:
        {
            ParseOperandsSpvOpFOrdGreaterThan(endOffset);
            break;
        }
        case SpvOpFUnordGreaterThan:
        {
            ParseOperandsSpvOpFUnordGreaterThan(endOffset);
            break;
        }
        case SpvOpFOrdLessThanEqual:
        {
            ParseOperandsSpvOpFOrdLessThanEqual(endOffset);
            break;
        }
        case SpvOpFUnordLessThanEqual:
        {
            ParseOperandsSpvOpFUnordLessThanEqual(endOffset);
            break;
        }
        case SpvOpFOrdGreaterThanEqual:
        {
            ParseOperandsSpvOpFOrdGreaterThanEqual(endOffset);
            break;
        }
        case SpvOpFUnordGreaterThanEqual:
        {
            ParseOperandsSpvOpFUnordGreaterThanEqual(endOffset);
            break;
        }
        case SpvOpShiftRightLogical:
        {
            ParseOperandsSpvOpShiftRightLogical(endOffset);
            break;
        }
        case SpvOpShiftRightArithmetic:
        {
            ParseOperandsSpvOpShiftRightArithmetic(endOffset);
            break;
        }
        case SpvOpShiftLeftLogical:
        {
            ParseOperandsSpvOpShiftLeftLogical(endOffset);
            break;
        }
        case SpvOpBitwiseOr:
        {
            ParseOperandsSpvOpBitwiseOr(endOffset);
            break;
        }
        case SpvOpBitwiseXor:
        {
            ParseOperandsSpvOpBitwiseXor(endOffset);
            break;
        }
        case SpvOpBitwiseAnd:
        {
            ParseOperandsSpvOpBitwiseAnd(endOffset);
            break;
        }
        case SpvOpNot:
        {
            ParseOperandsSpvOpNot(endOffset);
            break;
        }
        case SpvOpBitFieldInsert:
        {
            ParseOperandsSpvOpBitFieldInsert(endOffset);
            break;
        }
        case SpvOpBitFieldSExtract:
        {
            ParseOperandsSpvOpBitFieldSExtract(endOffset);
            break;
        }
        case SpvOpBitFieldUExtract:
        {
            ParseOperandsSpvOpBitFieldUExtract(endOffset);
            break;
        }
        case SpvOpBitReverse:
        {
            ParseOperandsSpvOpBitReverse(endOffset);
            break;
        }
        case SpvOpBitCount:
        {
            ParseOperandsSpvOpBitCount(endOffset);
            break;
        }
        case SpvOpDPdx:
        {
            ParseOperandsSpvOpDPdx(endOffset);
            break;
        }
        case SpvOpDPdy:
        {
            ParseOperandsSpvOpDPdy(endOffset);
            break;
        }
        case SpvOpFwidth:
        {
            ParseOperandsSpvOpFwidth(endOffset);
            break;
        }
        case SpvOpDPdxFine:
        {
            ParseOperandsSpvOpDPdxFine(endOffset);
            break;
        }
        case SpvOpDPdyFine:
        {
            ParseOperandsSpvOpDPdyFine(endOffset);
            break;
        }
        case SpvOpFwidthFine:
        {
            ParseOperandsSpvOpFwidthFine(endOffset);
            break;
        }
        case SpvOpDPdxCoarse:
        {
            ParseOperandsSpvOpDPdxCoarse(endOffset);
            break;
        }
        case SpvOpDPdyCoarse:
        {
            ParseOperandsSpvOpDPdyCoarse(endOffset);
            break;
        }
        case SpvOpFwidthCoarse:
        {
            ParseOperandsSpvOpFwidthCoarse(endOffset);
            break;
        }
        case SpvOpEmitVertex:
        {
            ParseOperandsSpvOpEmitVertex(endOffset);
            break;
        }
        case SpvOpEndPrimitive:
        {
            ParseOperandsSpvOpEndPrimitive(endOffset);
            break;
        }
        case SpvOpEmitStreamVertex:
        {
            ParseOperandsSpvOpEmitStreamVertex(endOffset);
            break;
        }
        case SpvOpEndStreamPrimitive:
        {
            ParseOperandsSpvOpEndStreamPrimitive(endOffset);
            break;
        }
        case SpvOpControlBarrier:
        {
            ParseOperandsSpvOpControlBarrier(endOffset);
            break;
        }
        case SpvOpMemoryBarrier:
        {
            ParseOperandsSpvOpMemoryBarrier(endOffset);
            break;
        }
        case SpvOpAtomicLoad:
        {
            ParseOperandsSpvOpAtomicLoad(endOffset);
            break;
        }
        case SpvOpAtomicStore:
        {
            ParseOperandsSpvOpAtomicStore(endOffset);
            break;
        }
        case SpvOpAtomicExchange:
        {
            ParseOperandsSpvOpAtomicExchange(endOffset);
            break;
        }
        case SpvOpAtomicCompareExchange:
        {
            ParseOperandsSpvOpAtomicCompareExchange(endOffset);
            break;
        }
        case SpvOpAtomicCompareExchangeWeak:
        {
            ParseOperandsSpvOpAtomicCompareExchangeWeak(endOffset);
            break;
        }
        case SpvOpAtomicIIncrement:
        {
            ParseOperandsSpvOpAtomicIIncrement(endOffset);
            break;
        }
        case SpvOpAtomicIDecrement:
        {
            ParseOperandsSpvOpAtomicIDecrement(endOffset);
            break;
        }
        case SpvOpAtomicIAdd:
        {
            ParseOperandsSpvOpAtomicIAdd(endOffset);
            break;
        }
        case SpvOpAtomicISub:
        {
            ParseOperandsSpvOpAtomicISub(endOffset);
            break;
        }
        case SpvOpAtomicSMin:
        {
            ParseOperandsSpvOpAtomicSMin(endOffset);
            break;
        }
        case SpvOpAtomicUMin:
        {
            ParseOperandsSpvOpAtomicUMin(endOffset);
            break;
        }
        case SpvOpAtomicSMax:
        {
            ParseOperandsSpvOpAtomicSMax(endOffset);
            break;
        }
        case SpvOpAtomicUMax:
        {
            ParseOperandsSpvOpAtomicUMax(endOffset);
            break;
        }
        case SpvOpAtomicAnd:
        {
            ParseOperandsSpvOpAtomicAnd(endOffset);
            break;
        }
        case SpvOpAtomicOr:
        {
            ParseOperandsSpvOpAtomicOr(endOffset);
            break;
        }
        case SpvOpAtomicXor:
        {
            ParseOperandsSpvOpAtomicXor(endOffset);
            break;
        }
        case SpvOpPhi:
        {
            ParseOperandsSpvOpPhi(endOffset);
            break;
        }
        case SpvOpLoopMerge:
        {
            ParseOperandsSpvOpLoopMerge(endOffset);
            break;
        }
        case SpvOpSelectionMerge:
        {
            ParseOperandsSpvOpSelectionMerge(endOffset);
            break;
        }
        case SpvOpLabel:
        {
            ParseOperandsSpvOpLabel(endOffset);
            break;
        }
        case SpvOpBranch:
        {
            ParseOperandsSpvOpBranch(endOffset);
            break;
        }
        case SpvOpBranchConditional:
        {
            ParseOperandsSpvOpBranchConditional(endOffset);
            break;
        }
        case SpvOpSwitch:
        {
            ParseOperandsSpvOpSwitch(endOffset);
            break;
        }
        case SpvOpKill:
        {
            ParseOperandsSpvOpKill(endOffset);
            break;
        }
        case SpvOpReturn:
        {
            ParseOperandsSpvOpReturn(endOffset);
            break;
        }
        case SpvOpReturnValue:
        {
            ParseOperandsSpvOpReturnValue(endOffset);
            break;
        }
        case SpvOpUnreachable:
        {
            ParseOperandsSpvOpUnreachable(endOffset);
            break;
        }
        case SpvOpLifetimeStart:
        {
            ParseOperandsSpvOpLifetimeStart(endOffset);
            break;
        }
        case SpvOpLifetimeStop:
        {
            ParseOperandsSpvOpLifetimeStop(endOffset);
            break;
        }
        case SpvOpGroupAsyncCopy:
        {
            ParseOperandsSpvOpGroupAsyncCopy(endOffset);
            break;
        }
        case SpvOpGroupWaitEvents:
        {
            ParseOperandsSpvOpGroupWaitEvents(endOffset);
            break;
        }
        case SpvOpGroupAll:
        {
            ParseOperandsSpvOpGroupAll(endOffset);
            break;
        }
        case SpvOpGroupAny:
        {
            ParseOperandsSpvOpGroupAny(endOffset);
            break;
        }
        case SpvOpGroupBroadcast:
        {
            ParseOperandsSpvOpGroupBroadcast(endOffset);
            break;
        }
        case SpvOpGroupIAdd:
        {
            ParseOperandsSpvOpGroupIAdd(endOffset);
            break;
        }
        case SpvOpGroupFAdd:
        {
            ParseOperandsSpvOpGroupFAdd(endOffset);
            break;
        }
        case SpvOpGroupFMin:
        {
            ParseOperandsSpvOpGroupFMin(endOffset);
            break;
        }
        case SpvOpGroupUMin:
        {
            ParseOperandsSpvOpGroupUMin(endOffset);
            break;
        }
        case SpvOpGroupSMin:
        {
            ParseOperandsSpvOpGroupSMin(endOffset);
            break;
        }
        case SpvOpGroupFMax:
        {
            ParseOperandsSpvOpGroupFMax(endOffset);
            break;
        }
        case SpvOpGroupUMax:
        {
            ParseOperandsSpvOpGroupUMax(endOffset);
            break;
        }
        case SpvOpGroupSMax:
        {
            ParseOperandsSpvOpGroupSMax(endOffset);
            break;
        }
        case SpvOpReadPipe:
        {
            ParseOperandsSpvOpReadPipe(endOffset);
            break;
        }
        case SpvOpWritePipe:
        {
            ParseOperandsSpvOpWritePipe(endOffset);
            break;
        }
        case SpvOpReservedReadPipe:
        {
            ParseOperandsSpvOpReservedReadPipe(endOffset);
            break;
        }
        case SpvOpReservedWritePipe:
        {
            ParseOperandsSpvOpReservedWritePipe(endOffset);
            break;
        }
        case SpvOpReserveReadPipePackets:
        {
            ParseOperandsSpvOpReserveReadPipePackets(endOffset);
            break;
        }
        case SpvOpReserveWritePipePackets:
        {
            ParseOperandsSpvOpReserveWritePipePackets(endOffset);
            break;
        }
        case SpvOpCommitReadPipe:
        {
            ParseOperandsSpvOpCommitReadPipe(endOffset);
            break;
        }
        case SpvOpCommitWritePipe:
        {
            ParseOperandsSpvOpCommitWritePipe(endOffset);
            break;
        }
        case SpvOpIsValidReserveId:
        {
            ParseOperandsSpvOpIsValidReserveId(endOffset);
            break;
        }
        case SpvOpGetNumPipePackets:
        {
            ParseOperandsSpvOpGetNumPipePackets(endOffset);
            break;
        }
        case SpvOpGetMaxPipePackets:
        {
            ParseOperandsSpvOpGetMaxPipePackets(endOffset);
            break;
        }
        case SpvOpGroupReserveReadPipePackets:
        {
            ParseOperandsSpvOpGroupReserveReadPipePackets(endOffset);
            break;
        }
        case SpvOpGroupReserveWritePipePackets:
        {
            ParseOperandsSpvOpGroupReserveWritePipePackets(endOffset);
            break;
        }
        case SpvOpGroupCommitReadPipe:
        {
            ParseOperandsSpvOpGroupCommitReadPipe(endOffset);
            break;
        }
        case SpvOpGroupCommitWritePipe:
        {
            ParseOperandsSpvOpGroupCommitWritePipe(endOffset);
            break;
        }
        case SpvOpEnqueueMarker:
        {
            ParseOperandsSpvOpEnqueueMarker(endOffset);
            break;
        }
        case SpvOpEnqueueKernel:
        {
            ParseOperandsSpvOpEnqueueKernel(endOffset);
            break;
        }
        case SpvOpGetKernelNDrangeSubGroupCount:
        {
            ParseOperandsSpvOpGetKernelNDrangeSubGroupCount(endOffset);
            break;
        }
        case SpvOpGetKernelNDrangeMaxSubGroupSize:
        {
            ParseOperandsSpvOpGetKernelNDrangeMaxSubGroupSize(endOffset);
            break;
        }
        case SpvOpGetKernelWorkGroupSize:
        {
            ParseOperandsSpvOpGetKernelWorkGroupSize(endOffset);
            break;
        }
        case SpvOpGetKernelPreferredWorkGroupSizeMultiple:
        {
            ParseOperandsSpvOpGetKernelPreferredWorkGroupSizeMultiple(endOffset);
            break;
        }
        case SpvOpRetainEvent:
        {
            ParseOperandsSpvOpRetainEvent(endOffset);
            break;
        }
        case SpvOpReleaseEvent:
        {
            ParseOperandsSpvOpReleaseEvent(endOffset);
            break;
        }
        case SpvOpCreateUserEvent:
        {
            ParseOperandsSpvOpCreateUserEvent(endOffset);
            break;
        }
        case SpvOpIsValidEvent:
        {
            ParseOperandsSpvOpIsValidEvent(endOffset);
            break;
        }
        case SpvOpSetUserEventStatus:
        {
            ParseOperandsSpvOpSetUserEventStatus(endOffset);
            break;
        }
        case SpvOpCaptureEventProfilingInfo:
        {
            ParseOperandsSpvOpCaptureEventProfilingInfo(endOffset);
            break;
        }
        case SpvOpGetDefaultQueue:
        {
            ParseOperandsSpvOpGetDefaultQueue(endOffset);
            break;
        }
        case SpvOpBuildNDRange:
        {
            ParseOperandsSpvOpBuildNDRange(endOffset);
            break;
        }
        case SpvOpImageSparseSampleImplicitLod:
        {
            ParseOperandsSpvOpImageSparseSampleImplicitLod(endOffset);
            break;
        }
        case SpvOpImageSparseSampleExplicitLod:
        {
            ParseOperandsSpvOpImageSparseSampleExplicitLod(endOffset);
            break;
        }
        case SpvOpImageSparseSampleDrefImplicitLod:
        {
            ParseOperandsSpvOpImageSparseSampleDrefImplicitLod(endOffset);
            break;
        }
        case SpvOpImageSparseSampleDrefExplicitLod:
        {
            ParseOperandsSpvOpImageSparseSampleDrefExplicitLod(endOffset);
            break;
        }
        case SpvOpImageSparseSampleProjImplicitLod:
        {
            ParseOperandsSpvOpImageSparseSampleProjImplicitLod(endOffset);
            break;
        }
        case SpvOpImageSparseSampleProjExplicitLod:
        {
            ParseOperandsSpvOpImageSparseSampleProjExplicitLod(endOffset);
            break;
        }
        case SpvOpImageSparseSampleProjDrefImplicitLod:
        {
            ParseOperandsSpvOpImageSparseSampleProjDrefImplicitLod(endOffset);
            break;
        }
        case SpvOpImageSparseSampleProjDrefExplicitLod:
        {
            ParseOperandsSpvOpImageSparseSampleProjDrefExplicitLod(endOffset);
            break;
        }
        case SpvOpImageSparseFetch:
        {
            ParseOperandsSpvOpImageSparseFetch(endOffset);
            break;
        }
        case SpvOpImageSparseGather:
        {
            ParseOperandsSpvOpImageSparseGather(endOffset);
            break;
        }
        case SpvOpImageSparseDrefGather:
        {
            ParseOperandsSpvOpImageSparseDrefGather(endOffset);
            break;
        }
        case SpvOpImageSparseTexelsResident:
        {
            ParseOperandsSpvOpImageSparseTexelsResident(endOffset);
            break;
        }
        case SpvOpNoLine:
        {
            ParseOperandsSpvOpNoLine(endOffset);
            break;
        }
        case SpvOpAtomicFlagTestAndSet:
        {
            ParseOperandsSpvOpAtomicFlagTestAndSet(endOffset);
            break;
        }
        case SpvOpAtomicFlagClear:
        {
            ParseOperandsSpvOpAtomicFlagClear(endOffset);
            break;
        }
        case SpvOpImageSparseRead:
        {
            ParseOperandsSpvOpImageSparseRead(endOffset);
            break;
        }
        case SpvOpSizeOf:
        {
            ParseOperandsSpvOpSizeOf(endOffset);
            break;
        }
        case SpvOpTypePipeStorage:
        {
            ParseOperandsSpvOpTypePipeStorage(endOffset);
            break;
        }
        case SpvOpConstantPipeStorage:
        {
            ParseOperandsSpvOpConstantPipeStorage(endOffset);
            break;
        }
        case SpvOpCreatePipeFromPipeStorage:
        {
            ParseOperandsSpvOpCreatePipeFromPipeStorage(endOffset);
            break;
        }
        case SpvOpGetKernelLocalSizeForSubgroupCount:
        {
            ParseOperandsSpvOpGetKernelLocalSizeForSubgroupCount(endOffset);
            break;
        }
        case SpvOpGetKernelMaxNumSubgroups:
        {
            ParseOperandsSpvOpGetKernelMaxNumSubgroups(endOffset);
            break;
        }
        case SpvOpTypeNamedBarrier:
        {
            ParseOperandsSpvOpTypeNamedBarrier(endOffset);
            break;
        }
        case SpvOpNamedBarrierInitialize:
        {
            ParseOperandsSpvOpNamedBarrierInitialize(endOffset);
            break;
        }
        case SpvOpMemoryNamedBarrier:
        {
            ParseOperandsSpvOpMemoryNamedBarrier(endOffset);
            break;
        }
        case SpvOpModuleProcessed:
        {
            ParseOperandsSpvOpModuleProcessed(endOffset);
            break;
        }
        case SpvOpExecutionModeId:
        {
            ParseOperandsSpvOpExecutionModeId(endOffset);
            break;
        }
        case SpvOpDecorateId:
        {
            ParseOperandsSpvOpDecorateId(endOffset);
            break;
        }
        case SpvOpGroupNonUniformElect:
        {
            ParseOperandsSpvOpGroupNonUniformElect(endOffset);
            break;
        }
        case SpvOpGroupNonUniformAll:
        {
            ParseOperandsSpvOpGroupNonUniformAll(endOffset);
            break;
        }
        case SpvOpGroupNonUniformAny:
        {
            ParseOperandsSpvOpGroupNonUniformAny(endOffset);
            break;
        }
        case SpvOpGroupNonUniformAllEqual:
        {
            ParseOperandsSpvOpGroupNonUniformAllEqual(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBroadcast:
        {
            ParseOperandsSpvOpGroupNonUniformBroadcast(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBroadcastFirst:
        {
            ParseOperandsSpvOpGroupNonUniformBroadcastFirst(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBallot:
        {
            ParseOperandsSpvOpGroupNonUniformBallot(endOffset);
            break;
        }
        case SpvOpGroupNonUniformInverseBallot:
        {
            ParseOperandsSpvOpGroupNonUniformInverseBallot(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBallotBitExtract:
        {
            ParseOperandsSpvOpGroupNonUniformBallotBitExtract(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBallotBitCount:
        {
            ParseOperandsSpvOpGroupNonUniformBallotBitCount(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBallotFindLSB:
        {
            ParseOperandsSpvOpGroupNonUniformBallotFindLSB(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBallotFindMSB:
        {
            ParseOperandsSpvOpGroupNonUniformBallotFindMSB(endOffset);
            break;
        }
        case SpvOpGroupNonUniformShuffle:
        {
            ParseOperandsSpvOpGroupNonUniformShuffle(endOffset);
            break;
        }
        case SpvOpGroupNonUniformShuffleXor:
        {
            ParseOperandsSpvOpGroupNonUniformShuffleXor(endOffset);
            break;
        }
        case SpvOpGroupNonUniformShuffleUp:
        {
            ParseOperandsSpvOpGroupNonUniformShuffleUp(endOffset);
            break;
        }
        case SpvOpGroupNonUniformShuffleDown:
        {
            ParseOperandsSpvOpGroupNonUniformShuffleDown(endOffset);
            break;
        }
        case SpvOpGroupNonUniformIAdd:
        {
            ParseOperandsSpvOpGroupNonUniformIAdd(endOffset);
            break;
        }
        case SpvOpGroupNonUniformFAdd:
        {
            ParseOperandsSpvOpGroupNonUniformFAdd(endOffset);
            break;
        }
        case SpvOpGroupNonUniformIMul:
        {
            ParseOperandsSpvOpGroupNonUniformIMul(endOffset);
            break;
        }
        case SpvOpGroupNonUniformFMul:
        {
            ParseOperandsSpvOpGroupNonUniformFMul(endOffset);
            break;
        }
        case SpvOpGroupNonUniformSMin:
        {
            ParseOperandsSpvOpGroupNonUniformSMin(endOffset);
            break;
        }
        case SpvOpGroupNonUniformUMin:
        {
            ParseOperandsSpvOpGroupNonUniformUMin(endOffset);
            break;
        }
        case SpvOpGroupNonUniformFMin:
        {
            ParseOperandsSpvOpGroupNonUniformFMin(endOffset);
            break;
        }
        case SpvOpGroupNonUniformSMax:
        {
            ParseOperandsSpvOpGroupNonUniformSMax(endOffset);
            break;
        }
        case SpvOpGroupNonUniformUMax:
        {
            ParseOperandsSpvOpGroupNonUniformUMax(endOffset);
            break;
        }
        case SpvOpGroupNonUniformFMax:
        {
            ParseOperandsSpvOpGroupNonUniformFMax(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBitwiseAnd:
        {
            ParseOperandsSpvOpGroupNonUniformBitwiseAnd(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBitwiseOr:
        {
            ParseOperandsSpvOpGroupNonUniformBitwiseOr(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBitwiseXor:
        {
            ParseOperandsSpvOpGroupNonUniformBitwiseXor(endOffset);
            break;
        }
        case SpvOpGroupNonUniformLogicalAnd:
        {
            ParseOperandsSpvOpGroupNonUniformLogicalAnd(endOffset);
            break;
        }
        case SpvOpGroupNonUniformLogicalOr:
        {
            ParseOperandsSpvOpGroupNonUniformLogicalOr(endOffset);
            break;
        }
        case SpvOpGroupNonUniformLogicalXor:
        {
            ParseOperandsSpvOpGroupNonUniformLogicalXor(endOffset);
            break;
        }
        case SpvOpGroupNonUniformQuadBroadcast:
        {
            ParseOperandsSpvOpGroupNonUniformQuadBroadcast(endOffset);
            break;
        }
        case SpvOpGroupNonUniformQuadSwap:
        {
            ParseOperandsSpvOpGroupNonUniformQuadSwap(endOffset);
            break;
        }
        case SpvOpCopyLogical:
        {
            ParseOperandsSpvOpCopyLogical(endOffset);
            break;
        }
        case SpvOpPtrEqual:
        {
            ParseOperandsSpvOpPtrEqual(endOffset);
            break;
        }
        case SpvOpPtrNotEqual:
        {
            ParseOperandsSpvOpPtrNotEqual(endOffset);
            break;
        }
        case SpvOpPtrDiff:
        {
            ParseOperandsSpvOpPtrDiff(endOffset);
            break;
        }
        case SpvOpColorAttachmentReadEXT:
        {
            ParseOperandsSpvOpColorAttachmentReadEXT(endOffset);
            break;
        }
        case SpvOpDepthAttachmentReadEXT:
        {
            ParseOperandsSpvOpDepthAttachmentReadEXT(endOffset);
            break;
        }
        case SpvOpStencilAttachmentReadEXT:
        {
            ParseOperandsSpvOpStencilAttachmentReadEXT(endOffset);
            break;
        }
        case SpvOpTerminateInvocation:
        {
            ParseOperandsSpvOpTerminateInvocation(endOffset);
            break;
        }
        case SpvOpTypeUntypedPointerKHR:
        {
            ParseOperandsSpvOpTypeUntypedPointerKHR(endOffset);
            break;
        }
        case SpvOpUntypedVariableKHR:
        {
            ParseOperandsSpvOpUntypedVariableKHR(endOffset);
            break;
        }
        case SpvOpUntypedAccessChainKHR:
        {
            ParseOperandsSpvOpUntypedAccessChainKHR(endOffset);
            break;
        }
        case SpvOpUntypedInBoundsAccessChainKHR:
        {
            ParseOperandsSpvOpUntypedInBoundsAccessChainKHR(endOffset);
            break;
        }
        case SpvOpSubgroupBallotKHR:
        {
            ParseOperandsSpvOpSubgroupBallotKHR(endOffset);
            break;
        }
        case SpvOpSubgroupFirstInvocationKHR:
        {
            ParseOperandsSpvOpSubgroupFirstInvocationKHR(endOffset);
            break;
        }
        case SpvOpUntypedPtrAccessChainKHR:
        {
            ParseOperandsSpvOpUntypedPtrAccessChainKHR(endOffset);
            break;
        }
        case SpvOpUntypedInBoundsPtrAccessChainKHR:
        {
            ParseOperandsSpvOpUntypedInBoundsPtrAccessChainKHR(endOffset);
            break;
        }
        case SpvOpUntypedArrayLengthKHR:
        {
            ParseOperandsSpvOpUntypedArrayLengthKHR(endOffset);
            break;
        }
        case SpvOpUntypedPrefetchKHR:
        {
            ParseOperandsSpvOpUntypedPrefetchKHR(endOffset);
            break;
        }
        case SpvOpSubgroupAllKHR:
        {
            ParseOperandsSpvOpSubgroupAllKHR(endOffset);
            break;
        }
        case SpvOpSubgroupAnyKHR:
        {
            ParseOperandsSpvOpSubgroupAnyKHR(endOffset);
            break;
        }
        case SpvOpSubgroupAllEqualKHR:
        {
            ParseOperandsSpvOpSubgroupAllEqualKHR(endOffset);
            break;
        }
        case SpvOpGroupNonUniformRotateKHR:
        {
            ParseOperandsSpvOpGroupNonUniformRotateKHR(endOffset);
            break;
        }
        case SpvOpSubgroupReadInvocationKHR:
        {
            ParseOperandsSpvOpSubgroupReadInvocationKHR(endOffset);
            break;
        }
        case SpvOpExtInstWithForwardRefsKHR:
        {
            ParseOperandsSpvOpExtInstWithForwardRefsKHR(endOffset);
            break;
        }
        case SpvOpTraceRayKHR:
        {
            ParseOperandsSpvOpTraceRayKHR(endOffset);
            break;
        }
        case SpvOpExecuteCallableKHR:
        {
            ParseOperandsSpvOpExecuteCallableKHR(endOffset);
            break;
        }
        case SpvOpConvertUToAccelerationStructureKHR:
        {
            ParseOperandsSpvOpConvertUToAccelerationStructureKHR(endOffset);
            break;
        }
        case SpvOpIgnoreIntersectionKHR:
        {
            ParseOperandsSpvOpIgnoreIntersectionKHR(endOffset);
            break;
        }
        case SpvOpTerminateRayKHR:
        {
            ParseOperandsSpvOpTerminateRayKHR(endOffset);
            break;
        }
        case SpvOpSDot:
        {
            ParseOperandsSpvOpSDot(endOffset);
            break;
        }
        case SpvOpSDotKHR:
        {
            ParseOperandsSpvOpSDotKHR(endOffset);
            break;
        }
        case SpvOpUDot:
        {
            ParseOperandsSpvOpUDot(endOffset);
            break;
        }
        case SpvOpUDotKHR:
        {
            ParseOperandsSpvOpUDotKHR(endOffset);
            break;
        }
        case SpvOpSUDot:
        {
            ParseOperandsSpvOpSUDot(endOffset);
            break;
        }
        case SpvOpSUDotKHR:
        {
            ParseOperandsSpvOpSUDotKHR(endOffset);
            break;
        }
        case SpvOpSDotAccSat:
        {
            ParseOperandsSpvOpSDotAccSat(endOffset);
            break;
        }
        case SpvOpSDotAccSatKHR:
        {
            ParseOperandsSpvOpSDotAccSatKHR(endOffset);
            break;
        }
        case SpvOpUDotAccSat:
        {
            ParseOperandsSpvOpUDotAccSat(endOffset);
            break;
        }
        case SpvOpUDotAccSatKHR:
        {
            ParseOperandsSpvOpUDotAccSatKHR(endOffset);
            break;
        }
        case SpvOpSUDotAccSat:
        {
            ParseOperandsSpvOpSUDotAccSat(endOffset);
            break;
        }
        case SpvOpSUDotAccSatKHR:
        {
            ParseOperandsSpvOpSUDotAccSatKHR(endOffset);
            break;
        }
        case SpvOpTypeCooperativeMatrixKHR:
        {
            ParseOperandsSpvOpTypeCooperativeMatrixKHR(endOffset);
            break;
        }
        case SpvOpCooperativeMatrixLoadKHR:
        {
            ParseOperandsSpvOpCooperativeMatrixLoadKHR(endOffset);
            break;
        }
        case SpvOpCooperativeMatrixStoreKHR:
        {
            ParseOperandsSpvOpCooperativeMatrixStoreKHR(endOffset);
            break;
        }
        case SpvOpCooperativeMatrixMulAddKHR:
        {
            ParseOperandsSpvOpCooperativeMatrixMulAddKHR(endOffset);
            break;
        }
        case SpvOpCooperativeMatrixLengthKHR:
        {
            ParseOperandsSpvOpCooperativeMatrixLengthKHR(endOffset);
            break;
        }
        case SpvOpConstantCompositeReplicateEXT:
        {
            ParseOperandsSpvOpConstantCompositeReplicateEXT(endOffset);
            break;
        }
        case SpvOpSpecConstantCompositeReplicateEXT:
        {
            ParseOperandsSpvOpSpecConstantCompositeReplicateEXT(endOffset);
            break;
        }
        case SpvOpCompositeConstructReplicateEXT:
        {
            ParseOperandsSpvOpCompositeConstructReplicateEXT(endOffset);
            break;
        }
        case SpvOpTypeRayQueryKHR:
        {
            ParseOperandsSpvOpTypeRayQueryKHR(endOffset);
            break;
        }
        case SpvOpRayQueryInitializeKHR:
        {
            ParseOperandsSpvOpRayQueryInitializeKHR(endOffset);
            break;
        }
        case SpvOpRayQueryTerminateKHR:
        {
            ParseOperandsSpvOpRayQueryTerminateKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGenerateIntersectionKHR:
        {
            ParseOperandsSpvOpRayQueryGenerateIntersectionKHR(endOffset);
            break;
        }
        case SpvOpRayQueryConfirmIntersectionKHR:
        {
            ParseOperandsSpvOpRayQueryConfirmIntersectionKHR(endOffset);
            break;
        }
        case SpvOpRayQueryProceedKHR:
        {
            ParseOperandsSpvOpRayQueryProceedKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionTypeKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionTypeKHR(endOffset);
            break;
        }
        case SpvOpImageSampleWeightedQCOM:
        {
            ParseOperandsSpvOpImageSampleWeightedQCOM(endOffset);
            break;
        }
        case SpvOpImageBoxFilterQCOM:
        {
            ParseOperandsSpvOpImageBoxFilterQCOM(endOffset);
            break;
        }
        case SpvOpImageBlockMatchSSDQCOM:
        {
            ParseOperandsSpvOpImageBlockMatchSSDQCOM(endOffset);
            break;
        }
        case SpvOpImageBlockMatchSADQCOM:
        {
            ParseOperandsSpvOpImageBlockMatchSADQCOM(endOffset);
            break;
        }
        case SpvOpImageBlockMatchWindowSSDQCOM:
        {
            ParseOperandsSpvOpImageBlockMatchWindowSSDQCOM(endOffset);
            break;
        }
        case SpvOpImageBlockMatchWindowSADQCOM:
        {
            ParseOperandsSpvOpImageBlockMatchWindowSADQCOM(endOffset);
            break;
        }
        case SpvOpImageBlockMatchGatherSSDQCOM:
        {
            ParseOperandsSpvOpImageBlockMatchGatherSSDQCOM(endOffset);
            break;
        }
        case SpvOpImageBlockMatchGatherSADQCOM:
        {
            ParseOperandsSpvOpImageBlockMatchGatherSADQCOM(endOffset);
            break;
        }
        case SpvOpGroupIAddNonUniformAMD:
        {
            ParseOperandsSpvOpGroupIAddNonUniformAMD(endOffset);
            break;
        }
        case SpvOpGroupFAddNonUniformAMD:
        {
            ParseOperandsSpvOpGroupFAddNonUniformAMD(endOffset);
            break;
        }
        case SpvOpGroupFMinNonUniformAMD:
        {
            ParseOperandsSpvOpGroupFMinNonUniformAMD(endOffset);
            break;
        }
        case SpvOpGroupUMinNonUniformAMD:
        {
            ParseOperandsSpvOpGroupUMinNonUniformAMD(endOffset);
            break;
        }
        case SpvOpGroupSMinNonUniformAMD:
        {
            ParseOperandsSpvOpGroupSMinNonUniformAMD(endOffset);
            break;
        }
        case SpvOpGroupFMaxNonUniformAMD:
        {
            ParseOperandsSpvOpGroupFMaxNonUniformAMD(endOffset);
            break;
        }
        case SpvOpGroupUMaxNonUniformAMD:
        {
            ParseOperandsSpvOpGroupUMaxNonUniformAMD(endOffset);
            break;
        }
        case SpvOpGroupSMaxNonUniformAMD:
        {
            ParseOperandsSpvOpGroupSMaxNonUniformAMD(endOffset);
            break;
        }
        case SpvOpFragmentMaskFetchAMD:
        {
            ParseOperandsSpvOpFragmentMaskFetchAMD(endOffset);
            break;
        }
        case SpvOpFragmentFetchAMD:
        {
            ParseOperandsSpvOpFragmentFetchAMD(endOffset);
            break;
        }
        case SpvOpReadClockKHR:
        {
            ParseOperandsSpvOpReadClockKHR(endOffset);
            break;
        }
        case SpvOpFinalizeNodePayloadsAMDX:
        {
            ParseOperandsSpvOpFinalizeNodePayloadsAMDX(endOffset);
            break;
        }
        case SpvOpFinishWritingNodePayloadAMDX:
        {
            ParseOperandsSpvOpFinishWritingNodePayloadAMDX(endOffset);
            break;
        }
        case SpvOpInitializeNodePayloadsAMDX:
        {
            ParseOperandsSpvOpInitializeNodePayloadsAMDX(endOffset);
            break;
        }
        case SpvOpGroupNonUniformQuadAllKHR:
        {
            ParseOperandsSpvOpGroupNonUniformQuadAllKHR(endOffset);
            break;
        }
        case SpvOpGroupNonUniformQuadAnyKHR:
        {
            ParseOperandsSpvOpGroupNonUniformQuadAnyKHR(endOffset);
            break;
        }
        case SpvOpHitObjectRecordHitMotionNV:
        {
            ParseOperandsSpvOpHitObjectRecordHitMotionNV(endOffset);
            break;
        }
        case SpvOpHitObjectRecordHitWithIndexMotionNV:
        {
            ParseOperandsSpvOpHitObjectRecordHitWithIndexMotionNV(endOffset);
            break;
        }
        case SpvOpHitObjectRecordMissMotionNV:
        {
            ParseOperandsSpvOpHitObjectRecordMissMotionNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetWorldToObjectNV:
        {
            ParseOperandsSpvOpHitObjectGetWorldToObjectNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetObjectToWorldNV:
        {
            ParseOperandsSpvOpHitObjectGetObjectToWorldNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetObjectRayDirectionNV:
        {
            ParseOperandsSpvOpHitObjectGetObjectRayDirectionNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetObjectRayOriginNV:
        {
            ParseOperandsSpvOpHitObjectGetObjectRayOriginNV(endOffset);
            break;
        }
        case SpvOpHitObjectTraceRayMotionNV:
        {
            ParseOperandsSpvOpHitObjectTraceRayMotionNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetShaderRecordBufferHandleNV:
        {
            ParseOperandsSpvOpHitObjectGetShaderRecordBufferHandleNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetShaderBindingTableRecordIndexNV:
        {
            ParseOperandsSpvOpHitObjectGetShaderBindingTableRecordIndexNV(endOffset);
            break;
        }
        case SpvOpHitObjectRecordEmptyNV:
        {
            ParseOperandsSpvOpHitObjectRecordEmptyNV(endOffset);
            break;
        }
        case SpvOpHitObjectTraceRayNV:
        {
            ParseOperandsSpvOpHitObjectTraceRayNV(endOffset);
            break;
        }
        case SpvOpHitObjectRecordHitNV:
        {
            ParseOperandsSpvOpHitObjectRecordHitNV(endOffset);
            break;
        }
        case SpvOpHitObjectRecordHitWithIndexNV:
        {
            ParseOperandsSpvOpHitObjectRecordHitWithIndexNV(endOffset);
            break;
        }
        case SpvOpHitObjectRecordMissNV:
        {
            ParseOperandsSpvOpHitObjectRecordMissNV(endOffset);
            break;
        }
        case SpvOpHitObjectExecuteShaderNV:
        {
            ParseOperandsSpvOpHitObjectExecuteShaderNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetCurrentTimeNV:
        {
            ParseOperandsSpvOpHitObjectGetCurrentTimeNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetAttributesNV:
        {
            ParseOperandsSpvOpHitObjectGetAttributesNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetHitKindNV:
        {
            ParseOperandsSpvOpHitObjectGetHitKindNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetPrimitiveIndexNV:
        {
            ParseOperandsSpvOpHitObjectGetPrimitiveIndexNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetGeometryIndexNV:
        {
            ParseOperandsSpvOpHitObjectGetGeometryIndexNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetInstanceIdNV:
        {
            ParseOperandsSpvOpHitObjectGetInstanceIdNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetInstanceCustomIndexNV:
        {
            ParseOperandsSpvOpHitObjectGetInstanceCustomIndexNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetWorldRayDirectionNV:
        {
            ParseOperandsSpvOpHitObjectGetWorldRayDirectionNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetWorldRayOriginNV:
        {
            ParseOperandsSpvOpHitObjectGetWorldRayOriginNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetRayTMaxNV:
        {
            ParseOperandsSpvOpHitObjectGetRayTMaxNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetRayTMinNV:
        {
            ParseOperandsSpvOpHitObjectGetRayTMinNV(endOffset);
            break;
        }
        case SpvOpHitObjectIsEmptyNV:
        {
            ParseOperandsSpvOpHitObjectIsEmptyNV(endOffset);
            break;
        }
        case SpvOpHitObjectIsHitNV:
        {
            ParseOperandsSpvOpHitObjectIsHitNV(endOffset);
            break;
        }
        case SpvOpHitObjectIsMissNV:
        {
            ParseOperandsSpvOpHitObjectIsMissNV(endOffset);
            break;
        }
        case SpvOpReorderThreadWithHitObjectNV:
        {
            ParseOperandsSpvOpReorderThreadWithHitObjectNV(endOffset);
            break;
        }
        case SpvOpReorderThreadWithHintNV:
        {
            ParseOperandsSpvOpReorderThreadWithHintNV(endOffset);
            break;
        }
        case SpvOpTypeHitObjectNV:
        {
            ParseOperandsSpvOpTypeHitObjectNV(endOffset);
            break;
        }
        case SpvOpImageSampleFootprintNV:
        {
            ParseOperandsSpvOpImageSampleFootprintNV(endOffset);
            break;
        }
        case SpvOpEmitMeshTasksEXT:
        {
            ParseOperandsSpvOpEmitMeshTasksEXT(endOffset);
            break;
        }
        case SpvOpSetMeshOutputsEXT:
        {
            ParseOperandsSpvOpSetMeshOutputsEXT(endOffset);
            break;
        }
        case SpvOpGroupNonUniformPartitionNV:
        {
            ParseOperandsSpvOpGroupNonUniformPartitionNV(endOffset);
            break;
        }
        case SpvOpWritePackedPrimitiveIndices4x8NV:
        {
            ParseOperandsSpvOpWritePackedPrimitiveIndices4x8NV(endOffset);
            break;
        }
        case SpvOpFetchMicroTriangleVertexPositionNV:
        {
            ParseOperandsSpvOpFetchMicroTriangleVertexPositionNV(endOffset);
            break;
        }
        case SpvOpFetchMicroTriangleVertexBarycentricNV:
        {
            ParseOperandsSpvOpFetchMicroTriangleVertexBarycentricNV(endOffset);
            break;
        }
        case SpvOpReportIntersectionKHR:
        {
            ParseOperandsSpvOpReportIntersectionKHR(endOffset);
            break;
        }
        case SpvOpReportIntersectionNV:
        {
            ParseOperandsSpvOpReportIntersectionNV(endOffset);
            break;
        }
        case SpvOpIgnoreIntersectionNV:
        {
            ParseOperandsSpvOpIgnoreIntersectionNV(endOffset);
            break;
        }
        case SpvOpTerminateRayNV:
        {
            ParseOperandsSpvOpTerminateRayNV(endOffset);
            break;
        }
        case SpvOpTraceNV:
        {
            ParseOperandsSpvOpTraceNV(endOffset);
            break;
        }
        case SpvOpTraceMotionNV:
        {
            ParseOperandsSpvOpTraceMotionNV(endOffset);
            break;
        }
        case SpvOpTraceRayMotionNV:
        {
            ParseOperandsSpvOpTraceRayMotionNV(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionTriangleVertexPositionsKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionTriangleVertexPositionsKHR(endOffset);
            break;
        }
        case SpvOpTypeAccelerationStructureKHR:
        {
            ParseOperandsSpvOpTypeAccelerationStructureKHR(endOffset);
            break;
        }
        case SpvOpTypeAccelerationStructureNV:
        {
            ParseOperandsSpvOpTypeAccelerationStructureNV(endOffset);
            break;
        }
        case SpvOpExecuteCallableNV:
        {
            ParseOperandsSpvOpExecuteCallableNV(endOffset);
            break;
        }
        case SpvOpTypeCooperativeMatrixNV:
        {
            ParseOperandsSpvOpTypeCooperativeMatrixNV(endOffset);
            break;
        }
        case SpvOpCooperativeMatrixLoadNV:
        {
            ParseOperandsSpvOpCooperativeMatrixLoadNV(endOffset);
            break;
        }
        case SpvOpCooperativeMatrixStoreNV:
        {
            ParseOperandsSpvOpCooperativeMatrixStoreNV(endOffset);
            break;
        }
        case SpvOpCooperativeMatrixMulAddNV:
        {
            ParseOperandsSpvOpCooperativeMatrixMulAddNV(endOffset);
            break;
        }
        case SpvOpCooperativeMatrixLengthNV:
        {
            ParseOperandsSpvOpCooperativeMatrixLengthNV(endOffset);
            break;
        }
        case SpvOpBeginInvocationInterlockEXT:
        {
            ParseOperandsSpvOpBeginInvocationInterlockEXT(endOffset);
            break;
        }
        case SpvOpEndInvocationInterlockEXT:
        {
            ParseOperandsSpvOpEndInvocationInterlockEXT(endOffset);
            break;
        }
        case SpvOpDemoteToHelperInvocation:
        {
            ParseOperandsSpvOpDemoteToHelperInvocation(endOffset);
            break;
        }
        case SpvOpDemoteToHelperInvocationEXT:
        {
            ParseOperandsSpvOpDemoteToHelperInvocationEXT(endOffset);
            break;
        }
        case SpvOpIsHelperInvocationEXT:
        {
            ParseOperandsSpvOpIsHelperInvocationEXT(endOffset);
            break;
        }
        case SpvOpConvertUToImageNV:
        {
            ParseOperandsSpvOpConvertUToImageNV(endOffset);
            break;
        }
        case SpvOpConvertUToSamplerNV:
        {
            ParseOperandsSpvOpConvertUToSamplerNV(endOffset);
            break;
        }
        case SpvOpConvertImageToUNV:
        {
            ParseOperandsSpvOpConvertImageToUNV(endOffset);
            break;
        }
        case SpvOpConvertSamplerToUNV:
        {
            ParseOperandsSpvOpConvertSamplerToUNV(endOffset);
            break;
        }
        case SpvOpConvertUToSampledImageNV:
        {
            ParseOperandsSpvOpConvertUToSampledImageNV(endOffset);
            break;
        }
        case SpvOpConvertSampledImageToUNV:
        {
            ParseOperandsSpvOpConvertSampledImageToUNV(endOffset);
            break;
        }
        case SpvOpSamplerImageAddressingModeNV:
        {
            ParseOperandsSpvOpSamplerImageAddressingModeNV(endOffset);
            break;
        }
        case SpvOpRawAccessChainNV:
        {
            ParseOperandsSpvOpRawAccessChainNV(endOffset);
            break;
        }
        case SpvOpSubgroupShuffleINTEL:
        {
            ParseOperandsSpvOpSubgroupShuffleINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupShuffleDownINTEL:
        {
            ParseOperandsSpvOpSubgroupShuffleDownINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupShuffleUpINTEL:
        {
            ParseOperandsSpvOpSubgroupShuffleUpINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupShuffleXorINTEL:
        {
            ParseOperandsSpvOpSubgroupShuffleXorINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupBlockReadINTEL:
        {
            ParseOperandsSpvOpSubgroupBlockReadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupBlockWriteINTEL:
        {
            ParseOperandsSpvOpSubgroupBlockWriteINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupImageBlockReadINTEL:
        {
            ParseOperandsSpvOpSubgroupImageBlockReadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupImageBlockWriteINTEL:
        {
            ParseOperandsSpvOpSubgroupImageBlockWriteINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupImageMediaBlockReadINTEL:
        {
            ParseOperandsSpvOpSubgroupImageMediaBlockReadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupImageMediaBlockWriteINTEL:
        {
            ParseOperandsSpvOpSubgroupImageMediaBlockWriteINTEL(endOffset);
            break;
        }
        case SpvOpUCountLeadingZerosINTEL:
        {
            ParseOperandsSpvOpUCountLeadingZerosINTEL(endOffset);
            break;
        }
        case SpvOpUCountTrailingZerosINTEL:
        {
            ParseOperandsSpvOpUCountTrailingZerosINTEL(endOffset);
            break;
        }
        case SpvOpAbsISubINTEL:
        {
            ParseOperandsSpvOpAbsISubINTEL(endOffset);
            break;
        }
        case SpvOpAbsUSubINTEL:
        {
            ParseOperandsSpvOpAbsUSubINTEL(endOffset);
            break;
        }
        case SpvOpIAddSatINTEL:
        {
            ParseOperandsSpvOpIAddSatINTEL(endOffset);
            break;
        }
        case SpvOpUAddSatINTEL:
        {
            ParseOperandsSpvOpUAddSatINTEL(endOffset);
            break;
        }
        case SpvOpIAverageINTEL:
        {
            ParseOperandsSpvOpIAverageINTEL(endOffset);
            break;
        }
        case SpvOpUAverageINTEL:
        {
            ParseOperandsSpvOpUAverageINTEL(endOffset);
            break;
        }
        case SpvOpIAverageRoundedINTEL:
        {
            ParseOperandsSpvOpIAverageRoundedINTEL(endOffset);
            break;
        }
        case SpvOpUAverageRoundedINTEL:
        {
            ParseOperandsSpvOpUAverageRoundedINTEL(endOffset);
            break;
        }
        case SpvOpISubSatINTEL:
        {
            ParseOperandsSpvOpISubSatINTEL(endOffset);
            break;
        }
        case SpvOpUSubSatINTEL:
        {
            ParseOperandsSpvOpUSubSatINTEL(endOffset);
            break;
        }
        case SpvOpIMul32x16INTEL:
        {
            ParseOperandsSpvOpIMul32x16INTEL(endOffset);
            break;
        }
        case SpvOpUMul32x16INTEL:
        {
            ParseOperandsSpvOpUMul32x16INTEL(endOffset);
            break;
        }
        case SpvOpConstantFunctionPointerINTEL:
        {
            ParseOperandsSpvOpConstantFunctionPointerINTEL(endOffset);
            break;
        }
        case SpvOpFunctionPointerCallINTEL:
        {
            ParseOperandsSpvOpFunctionPointerCallINTEL(endOffset);
            break;
        }
        case SpvOpAsmTargetINTEL:
        {
            ParseOperandsSpvOpAsmTargetINTEL(endOffset);
            break;
        }
        case SpvOpAsmINTEL:
        {
            ParseOperandsSpvOpAsmINTEL(endOffset);
            break;
        }
        case SpvOpAsmCallINTEL:
        {
            ParseOperandsSpvOpAsmCallINTEL(endOffset);
            break;
        }
        case SpvOpAtomicFMinEXT:
        {
            ParseOperandsSpvOpAtomicFMinEXT(endOffset);
            break;
        }
        case SpvOpAtomicFMaxEXT:
        {
            ParseOperandsSpvOpAtomicFMaxEXT(endOffset);
            break;
        }
        case SpvOpAssumeTrueKHR:
        {
            ParseOperandsSpvOpAssumeTrueKHR(endOffset);
            break;
        }
        case SpvOpExpectKHR:
        {
            ParseOperandsSpvOpExpectKHR(endOffset);
            break;
        }
        case SpvOpDecorateString:
        {
            ParseOperandsSpvOpDecorateString(endOffset);
            break;
        }
        case SpvOpDecorateStringGOOGLE:
        {
            ParseOperandsSpvOpDecorateStringGOOGLE(endOffset);
            break;
        }
        case SpvOpMemberDecorateString:
        {
            ParseOperandsSpvOpMemberDecorateString(endOffset);
            break;
        }
        case SpvOpMemberDecorateStringGOOGLE:
        {
            ParseOperandsSpvOpMemberDecorateStringGOOGLE(endOffset);
            break;
        }
        case SpvOpVmeImageINTEL:
        {
            ParseOperandsSpvOpVmeImageINTEL(endOffset);
            break;
        }
        case SpvOpTypeVmeImageINTEL:
        {
            ParseOperandsSpvOpTypeVmeImageINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcImePayloadINTEL:
        {
            ParseOperandsSpvOpTypeAvcImePayloadINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcRefPayloadINTEL:
        {
            ParseOperandsSpvOpTypeAvcRefPayloadINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcSicPayloadINTEL:
        {
            ParseOperandsSpvOpTypeAvcSicPayloadINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcMcePayloadINTEL:
        {
            ParseOperandsSpvOpTypeAvcMcePayloadINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcMceResultINTEL:
        {
            ParseOperandsSpvOpTypeAvcMceResultINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcImeResultINTEL:
        {
            ParseOperandsSpvOpTypeAvcImeResultINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL:
        {
            ParseOperandsSpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcImeResultDualReferenceStreamoutINTEL:
        {
            ParseOperandsSpvOpTypeAvcImeResultDualReferenceStreamoutINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcImeSingleReferenceStreaminINTEL:
        {
            ParseOperandsSpvOpTypeAvcImeSingleReferenceStreaminINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcImeDualReferenceStreaminINTEL:
        {
            ParseOperandsSpvOpTypeAvcImeDualReferenceStreaminINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcRefResultINTEL:
        {
            ParseOperandsSpvOpTypeAvcRefResultINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcSicResultINTEL:
        {
            ParseOperandsSpvOpTypeAvcSicResultINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceSetInterShapePenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceSetInterShapePenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceSetAcOnlyHaarINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceSetAcOnlyHaarINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceConvertToImePayloadINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceConvertToImePayloadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceConvertToImeResultINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceConvertToImeResultINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceConvertToRefPayloadINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceConvertToRefPayloadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceConvertToRefResultINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceConvertToRefResultINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceConvertToSicPayloadINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceConvertToSicPayloadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceConvertToSicResultINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceConvertToSicResultINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetMotionVectorsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetMotionVectorsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetInterDistortionsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetInterDistortionsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetBestInterDistortionsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetBestInterDistortionsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetInterMajorShapeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetInterMajorShapeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetInterMinorShapeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetInterMinorShapeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetInterDirectionsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetInterDirectionsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetInterReferenceIdsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetInterReferenceIdsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeInitializeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeInitializeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeSetSingleReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeSetSingleReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeSetDualReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeSetDualReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeRefWindowSizeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeRefWindowSizeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeAdjustRefOffsetINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeAdjustRefOffsetINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeConvertToMcePayloadINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeConvertToMcePayloadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeSetWeightedSadINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeSetWeightedSadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeConvertToMceResultINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeConvertToMceResultINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetBorderReachedINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetBorderReachedINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcFmeInitializeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcFmeInitializeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcBmeInitializeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcBmeInitializeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcRefConvertToMcePayloadINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcRefConvertToMcePayloadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcRefConvertToMceResultINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcRefConvertToMceResultINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicInitializeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicInitializeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicConfigureSkcINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicConfigureSkcINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicConfigureIpeLumaINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicConfigureIpeLumaINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicGetMotionVectorMaskINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicGetMotionVectorMaskINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicConvertToMcePayloadINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicConvertToMcePayloadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicEvaluateIpeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicEvaluateIpeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicConvertToMceResultINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicConvertToMceResultINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicGetIpeLumaShapeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicGetIpeLumaShapeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicGetIpeChromaModeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicGetIpeChromaModeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicGetInterRawSadsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicGetInterRawSadsINTEL(endOffset);
            break;
        }
        case SpvOpVariableLengthArrayINTEL:
        {
            ParseOperandsSpvOpVariableLengthArrayINTEL(endOffset);
            break;
        }
        case SpvOpSaveMemoryINTEL:
        {
            ParseOperandsSpvOpSaveMemoryINTEL(endOffset);
            break;
        }
        case SpvOpRestoreMemoryINTEL:
        {
            ParseOperandsSpvOpRestoreMemoryINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatSinCosPiINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatSinCosPiINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatCastINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatCastINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatCastFromIntINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatCastFromIntINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatCastToIntINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatCastToIntINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatAddINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatAddINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatSubINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatSubINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatMulINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatMulINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatDivINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatDivINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatGTINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatGTINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatGEINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatGEINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatLTINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatLTINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatLEINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatLEINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatEQINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatEQINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatRecipINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatRecipINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatRSqrtINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatRSqrtINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatCbrtINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatCbrtINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatHypotINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatHypotINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatSqrtINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatSqrtINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatLogINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatLogINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatLog2INTEL:
        {
            ParseOperandsSpvOpArbitraryFloatLog2INTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatLog10INTEL:
        {
            ParseOperandsSpvOpArbitraryFloatLog10INTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatLog1pINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatLog1pINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatExpINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatExpINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatExp2INTEL:
        {
            ParseOperandsSpvOpArbitraryFloatExp2INTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatExp10INTEL:
        {
            ParseOperandsSpvOpArbitraryFloatExp10INTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatExpm1INTEL:
        {
            ParseOperandsSpvOpArbitraryFloatExpm1INTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatSinINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatSinINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatCosINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatCosINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatSinCosINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatSinCosINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatSinPiINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatSinPiINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatCosPiINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatCosPiINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatASinINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatASinINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatASinPiINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatASinPiINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatACosINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatACosINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatACosPiINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatACosPiINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatATanINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatATanINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatATanPiINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatATanPiINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatATan2INTEL:
        {
            ParseOperandsSpvOpArbitraryFloatATan2INTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatPowINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatPowINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatPowRINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatPowRINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatPowNINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatPowNINTEL(endOffset);
            break;
        }
        case SpvOpLoopControlINTEL:
        {
            ParseOperandsSpvOpLoopControlINTEL(endOffset);
            break;
        }
        case SpvOpAliasDomainDeclINTEL:
        {
            ParseOperandsSpvOpAliasDomainDeclINTEL(endOffset);
            break;
        }
        case SpvOpAliasScopeDeclINTEL:
        {
            ParseOperandsSpvOpAliasScopeDeclINTEL(endOffset);
            break;
        }
        case SpvOpAliasScopeListDeclINTEL:
        {
            ParseOperandsSpvOpAliasScopeListDeclINTEL(endOffset);
            break;
        }
        case SpvOpFixedSqrtINTEL:
        {
            ParseOperandsSpvOpFixedSqrtINTEL(endOffset);
            break;
        }
        case SpvOpFixedRecipINTEL:
        {
            ParseOperandsSpvOpFixedRecipINTEL(endOffset);
            break;
        }
        case SpvOpFixedRsqrtINTEL:
        {
            ParseOperandsSpvOpFixedRsqrtINTEL(endOffset);
            break;
        }
        case SpvOpFixedSinINTEL:
        {
            ParseOperandsSpvOpFixedSinINTEL(endOffset);
            break;
        }
        case SpvOpFixedCosINTEL:
        {
            ParseOperandsSpvOpFixedCosINTEL(endOffset);
            break;
        }
        case SpvOpFixedSinCosINTEL:
        {
            ParseOperandsSpvOpFixedSinCosINTEL(endOffset);
            break;
        }
        case SpvOpFixedSinPiINTEL:
        {
            ParseOperandsSpvOpFixedSinPiINTEL(endOffset);
            break;
        }
        case SpvOpFixedCosPiINTEL:
        {
            ParseOperandsSpvOpFixedCosPiINTEL(endOffset);
            break;
        }
        case SpvOpFixedSinCosPiINTEL:
        {
            ParseOperandsSpvOpFixedSinCosPiINTEL(endOffset);
            break;
        }
        case SpvOpFixedLogINTEL:
        {
            ParseOperandsSpvOpFixedLogINTEL(endOffset);
            break;
        }
        case SpvOpFixedExpINTEL:
        {
            ParseOperandsSpvOpFixedExpINTEL(endOffset);
            break;
        }
        case SpvOpPtrCastToCrossWorkgroupINTEL:
        {
            ParseOperandsSpvOpPtrCastToCrossWorkgroupINTEL(endOffset);
            break;
        }
        case SpvOpCrossWorkgroupCastToPtrINTEL:
        {
            ParseOperandsSpvOpCrossWorkgroupCastToPtrINTEL(endOffset);
            break;
        }
        case SpvOpReadPipeBlockingINTEL:
        {
            ParseOperandsSpvOpReadPipeBlockingINTEL(endOffset);
            break;
        }
        case SpvOpWritePipeBlockingINTEL:
        {
            ParseOperandsSpvOpWritePipeBlockingINTEL(endOffset);
            break;
        }
        case SpvOpFPGARegINTEL:
        {
            ParseOperandsSpvOpFPGARegINTEL(endOffset);
            break;
        }
        case SpvOpRayQueryGetRayTMinKHR:
        {
            ParseOperandsSpvOpRayQueryGetRayTMinKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetRayFlagsKHR:
        {
            ParseOperandsSpvOpRayQueryGetRayFlagsKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionTKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionTKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionInstanceCustomIndexKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionInstanceCustomIndexKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionInstanceIdKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionInstanceIdKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionGeometryIndexKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionGeometryIndexKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionPrimitiveIndexKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionPrimitiveIndexKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionBarycentricsKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionBarycentricsKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionFrontFaceKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionFrontFaceKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionCandidateAABBOpaqueKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionCandidateAABBOpaqueKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionObjectRayDirectionKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionObjectRayDirectionKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionObjectRayOriginKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionObjectRayOriginKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetWorldRayDirectionKHR:
        {
            ParseOperandsSpvOpRayQueryGetWorldRayDirectionKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetWorldRayOriginKHR:
        {
            ParseOperandsSpvOpRayQueryGetWorldRayOriginKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionObjectToWorldKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionObjectToWorldKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionWorldToObjectKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionWorldToObjectKHR(endOffset);
            break;
        }
        case SpvOpAtomicFAddEXT:
        {
            ParseOperandsSpvOpAtomicFAddEXT(endOffset);
            break;
        }
        case SpvOpTypeBufferSurfaceINTEL:
        {
            ParseOperandsSpvOpTypeBufferSurfaceINTEL(endOffset);
            break;
        }
        case SpvOpTypeStructContinuedINTEL:
        {
            ParseOperandsSpvOpTypeStructContinuedINTEL(endOffset);
            break;
        }
        case SpvOpConstantCompositeContinuedINTEL:
        {
            ParseOperandsSpvOpConstantCompositeContinuedINTEL(endOffset);
            break;
        }
        case SpvOpSpecConstantCompositeContinuedINTEL:
        {
            ParseOperandsSpvOpSpecConstantCompositeContinuedINTEL(endOffset);
            break;
        }
        case SpvOpCompositeConstructContinuedINTEL:
        {
            ParseOperandsSpvOpCompositeConstructContinuedINTEL(endOffset);
            break;
        }
        case SpvOpConvertFToBF16INTEL:
        {
            ParseOperandsSpvOpConvertFToBF16INTEL(endOffset);
            break;
        }
        case SpvOpConvertBF16ToFINTEL:
        {
            ParseOperandsSpvOpConvertBF16ToFINTEL(endOffset);
            break;
        }
        case SpvOpControlBarrierArriveINTEL:
        {
            ParseOperandsSpvOpControlBarrierArriveINTEL(endOffset);
            break;
        }
        case SpvOpControlBarrierWaitINTEL:
        {
            ParseOperandsSpvOpControlBarrierWaitINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupBlockPrefetchINTEL:
        {
            ParseOperandsSpvOpSubgroupBlockPrefetchINTEL(endOffset);
            break;
        }
        case SpvOpGroupIMulKHR:
        {
            ParseOperandsSpvOpGroupIMulKHR(endOffset);
            break;
        }
        case SpvOpGroupFMulKHR:
        {
            ParseOperandsSpvOpGroupFMulKHR(endOffset);
            break;
        }
        case SpvOpGroupBitwiseAndKHR:
        {
            ParseOperandsSpvOpGroupBitwiseAndKHR(endOffset);
            break;
        }
        case SpvOpGroupBitwiseOrKHR:
        {
            ParseOperandsSpvOpGroupBitwiseOrKHR(endOffset);
            break;
        }
        case SpvOpGroupBitwiseXorKHR:
        {
            ParseOperandsSpvOpGroupBitwiseXorKHR(endOffset);
            break;
        }
        case SpvOpGroupLogicalAndKHR:
        {
            ParseOperandsSpvOpGroupLogicalAndKHR(endOffset);
            break;
        }
        case SpvOpGroupLogicalOrKHR:
        {
            ParseOperandsSpvOpGroupLogicalOrKHR(endOffset);
            break;
        }
        case SpvOpGroupLogicalXorKHR:
        {
            ParseOperandsSpvOpGroupLogicalXorKHR(endOffset);
            break;
        }
        case SpvOpMaskedGatherINTEL:
        {
            ParseOperandsSpvOpMaskedGatherINTEL(endOffset);
            break;
        }
        case SpvOpMaskedScatterINTEL:
        {
            ParseOperandsSpvOpMaskedScatterINTEL(endOffset);
            break;
        }
        default:
        Assert(false, "Unknown opcode: " + opcode);
            break;
    }
}