//------------------------------------------------
//--- 010 Editor v15.0 Binary Template
//
//      File: spirv.bt
//   Authors: Jeffrey Zhuang
//   Version: 1.0
//   Purpose: SPIR-V Binary Template
//  Category: Shader
// File Mask: *.spv
//  ID Bytes: 
//   History: 
//------------------------------------------------

/* Begin replacement for spirv_core_grammar_inc.bt */
// This file is generated by generate_grammar_inc.py

/* Begin replacement for spirv_inc.bt */
/*
** Copyright (c) 2014-2024 The Khronos Group Inc.
** 
** Permission is hereby granted, free of charge, to any person obtaining a copy
** of this software and/or associated documentation files (the "Materials"),
** to deal in the Materials without restriction, including without limitation
** the rights to use, copy, modify, merge, publish, distribute, sublicense,
** and/or sell copies of the Materials, and to permit persons to whom the
** Materials are furnished to do so, subject to the following conditions:
** 
** The above copyright notice and this permission notice shall be included in
** all copies or substantial portions of the Materials.
** 
** MODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS KHRONOS
** STANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS SPECIFICATIONS AND
** HEADER INFORMATION ARE LOCATED AT https://www.khronos.org/registry/ 
** 
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
** THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
** FROM,OUT OF OR IN CONNECTION WITH THE MATERIALS OR THE USE OR OTHER DEALINGS
** IN THE MATERIALS.
*/

/*
** This header is automatically generated by the same tool that creates
** the Binary Section of the SPIR-V specification.
*/

/*
** Enumeration tokens for SPIR-V, in various styles:
**   C, C++, C++11, JSON, Lua, Python, C#, D, Beef, 010BT
** 
** - C will have tokens with a "Spv" prefix, e.g.: SpvSourceLanguageGLSL
** - C++ will have tokens in the "spv" name space, e.g.: spv::SourceLanguageGLSL
** - C++11 will use enum classes in the spv namespace, e.g.: spv::SourceLanguage::GLSL
** - Lua will use tables, e.g.: spv.SourceLanguage.GLSL
** - Python will use dictionaries, e.g.: spv['SourceLanguage']['GLSL']
** - C# will use enum classes in the Specification class located in the "Spv" namespace,
**     e.g.: Spv.Specification.SourceLanguage.GLSL
** - D will have tokens under the "spv" module, e.g: spv.SourceLanguage.GLSL
** - Beef will use enum classes in the Specification class located in the "Spv" namespace,
**     e.g.: Spv.Specification.SourceLanguage.GLSL
** 
** Some tokens act like mask values, which can be OR'd together,
** while others are mutually exclusive.  The mask-like ones have
** "Mask" in their name, and a parallel enum that has the shift
** amount (1 << x) for each corresponding enumerant.
*/

#ifndef spirv_H
#define spirv_H

typedef unsigned int SpvId;

#define SPV_VERSION 0x10600
#define SPV_REVISION 1

const unsigned int SpvMagicNumber = 0x07230203;
const unsigned int SpvVersion = 0x00010600;
const unsigned int SpvRevision = 1;
const unsigned int SpvOpCodeMask = 0xffff;
const unsigned int SpvWordCountShift = 16;

typedef enum SpvSourceLanguage_ {
    SpvSourceLanguageUnknown = 0,
    SpvSourceLanguageESSL = 1,
    SpvSourceLanguageGLSL = 2,
    SpvSourceLanguageOpenCL_C = 3,
    SpvSourceLanguageOpenCL_CPP = 4,
    SpvSourceLanguageHLSL = 5,
    SpvSourceLanguageCPP_for_OpenCL = 6,
    SpvSourceLanguageSYCL = 7,
    SpvSourceLanguageHERO_C = 8,
    SpvSourceLanguageNZSL = 9,
    SpvSourceLanguageWGSL = 10,
    SpvSourceLanguageSlang = 11,
    SpvSourceLanguageZig = 12,
    SpvSourceLanguageMax = 0x7fffffff,
} SpvSourceLanguage;

typedef enum SpvExecutionModel_ {
    SpvExecutionModelVertex = 0,
    SpvExecutionModelTessellationControl = 1,
    SpvExecutionModelTessellationEvaluation = 2,
    SpvExecutionModelGeometry = 3,
    SpvExecutionModelFragment = 4,
    SpvExecutionModelGLCompute = 5,
    SpvExecutionModelKernel = 6,
    SpvExecutionModelTaskNV = 5267,
    SpvExecutionModelMeshNV = 5268,
    SpvExecutionModelRayGenerationKHR = 5313,
    SpvExecutionModelRayGenerationNV = 5313,
    SpvExecutionModelIntersectionKHR = 5314,
    SpvExecutionModelIntersectionNV = 5314,
    SpvExecutionModelAnyHitKHR = 5315,
    SpvExecutionModelAnyHitNV = 5315,
    SpvExecutionModelClosestHitKHR = 5316,
    SpvExecutionModelClosestHitNV = 5316,
    SpvExecutionModelMissKHR = 5317,
    SpvExecutionModelMissNV = 5317,
    SpvExecutionModelCallableKHR = 5318,
    SpvExecutionModelCallableNV = 5318,
    SpvExecutionModelTaskEXT = 5364,
    SpvExecutionModelMeshEXT = 5365,
    SpvExecutionModelMax = 0x7fffffff,
} SpvExecutionModel;

typedef enum SpvAddressingModel_ {
    SpvAddressingModelLogical = 0,
    SpvAddressingModelPhysical32 = 1,
    SpvAddressingModelPhysical64 = 2,
    SpvAddressingModelPhysicalStorageBuffer64 = 5348,
    SpvAddressingModelPhysicalStorageBuffer64EXT = 5348,
    SpvAddressingModelMax = 0x7fffffff,
} SpvAddressingModel;

typedef enum SpvMemoryModel_ {
    SpvMemoryModelSimple = 0,
    SpvMemoryModelGLSL450 = 1,
    SpvMemoryModelOpenCL = 2,
    SpvMemoryModelVulkan = 3,
    SpvMemoryModelVulkanKHR = 3,
    SpvMemoryModelMax = 0x7fffffff,
} SpvMemoryModel;

typedef enum SpvExecutionMode_ {
    SpvExecutionModeInvocations = 0,
    SpvExecutionModeSpacingEqual = 1,
    SpvExecutionModeSpacingFractionalEven = 2,
    SpvExecutionModeSpacingFractionalOdd = 3,
    SpvExecutionModeVertexOrderCw = 4,
    SpvExecutionModeVertexOrderCcw = 5,
    SpvExecutionModePixelCenterInteger = 6,
    SpvExecutionModeOriginUpperLeft = 7,
    SpvExecutionModeOriginLowerLeft = 8,
    SpvExecutionModeEarlyFragmentTests = 9,
    SpvExecutionModePointMode = 10,
    SpvExecutionModeXfb = 11,
    SpvExecutionModeDepthReplacing = 12,
    SpvExecutionModeDepthGreater = 14,
    SpvExecutionModeDepthLess = 15,
    SpvExecutionModeDepthUnchanged = 16,
    SpvExecutionModeLocalSize = 17,
    SpvExecutionModeLocalSizeHint = 18,
    SpvExecutionModeInputPoints = 19,
    SpvExecutionModeInputLines = 20,
    SpvExecutionModeInputLinesAdjacency = 21,
    SpvExecutionModeTriangles = 22,
    SpvExecutionModeInputTrianglesAdjacency = 23,
    SpvExecutionModeQuads = 24,
    SpvExecutionModeIsolines = 25,
    SpvExecutionModeOutputVertices = 26,
    SpvExecutionModeOutputPoints = 27,
    SpvExecutionModeOutputLineStrip = 28,
    SpvExecutionModeOutputTriangleStrip = 29,
    SpvExecutionModeVecTypeHint = 30,
    SpvExecutionModeContractionOff = 31,
    SpvExecutionModeInitializer = 33,
    SpvExecutionModeFinalizer = 34,
    SpvExecutionModeSubgroupSize = 35,
    SpvExecutionModeSubgroupsPerWorkgroup = 36,
    SpvExecutionModeSubgroupsPerWorkgroupId = 37,
    SpvExecutionModeLocalSizeId = 38,
    SpvExecutionModeLocalSizeHintId = 39,
    SpvExecutionModeNonCoherentColorAttachmentReadEXT = 4169,
    SpvExecutionModeNonCoherentDepthAttachmentReadEXT = 4170,
    SpvExecutionModeNonCoherentStencilAttachmentReadEXT = 4171,
    SpvExecutionModeSubgroupUniformControlFlowKHR = 4421,
    SpvExecutionModePostDepthCoverage = 4446,
    SpvExecutionModeDenormPreserve = 4459,
    SpvExecutionModeDenormFlushToZero = 4460,
    SpvExecutionModeSignedZeroInfNanPreserve = 4461,
    SpvExecutionModeRoundingModeRTE = 4462,
    SpvExecutionModeRoundingModeRTZ = 4463,
    SpvExecutionModeEarlyAndLateFragmentTestsAMD = 5017,
    SpvExecutionModeStencilRefReplacingEXT = 5027,
    SpvExecutionModeCoalescingAMDX = 5069,
    SpvExecutionModeMaxNodeRecursionAMDX = 5071,
    SpvExecutionModeStaticNumWorkgroupsAMDX = 5072,
    SpvExecutionModeShaderIndexAMDX = 5073,
    SpvExecutionModeMaxNumWorkgroupsAMDX = 5077,
    SpvExecutionModeStencilRefUnchangedFrontAMD = 5079,
    SpvExecutionModeStencilRefGreaterFrontAMD = 5080,
    SpvExecutionModeStencilRefLessFrontAMD = 5081,
    SpvExecutionModeStencilRefUnchangedBackAMD = 5082,
    SpvExecutionModeStencilRefGreaterBackAMD = 5083,
    SpvExecutionModeStencilRefLessBackAMD = 5084,
    SpvExecutionModeQuadDerivativesKHR = 5088,
    SpvExecutionModeRequireFullQuadsKHR = 5089,
    SpvExecutionModeOutputLinesEXT = 5269,
    SpvExecutionModeOutputLinesNV = 5269,
    SpvExecutionModeOutputPrimitivesEXT = 5270,
    SpvExecutionModeOutputPrimitivesNV = 5270,
    SpvExecutionModeDerivativeGroupQuadsKHR = 5289,
    SpvExecutionModeDerivativeGroupQuadsNV = 5289,
    SpvExecutionModeDerivativeGroupLinearKHR = 5290,
    SpvExecutionModeDerivativeGroupLinearNV = 5290,
    SpvExecutionModeOutputTrianglesEXT = 5298,
    SpvExecutionModeOutputTrianglesNV = 5298,
    SpvExecutionModePixelInterlockOrderedEXT = 5366,
    SpvExecutionModePixelInterlockUnorderedEXT = 5367,
    SpvExecutionModeSampleInterlockOrderedEXT = 5368,
    SpvExecutionModeSampleInterlockUnorderedEXT = 5369,
    SpvExecutionModeShadingRateInterlockOrderedEXT = 5370,
    SpvExecutionModeShadingRateInterlockUnorderedEXT = 5371,
    SpvExecutionModeSharedLocalMemorySizeINTEL = 5618,
    SpvExecutionModeRoundingModeRTPINTEL = 5620,
    SpvExecutionModeRoundingModeRTNINTEL = 5621,
    SpvExecutionModeFloatingPointModeALTINTEL = 5622,
    SpvExecutionModeFloatingPointModeIEEEINTEL = 5623,
    SpvExecutionModeMaxWorkgroupSizeINTEL = 5893,
    SpvExecutionModeMaxWorkDimINTEL = 5894,
    SpvExecutionModeNoGlobalOffsetINTEL = 5895,
    SpvExecutionModeNumSIMDWorkitemsINTEL = 5896,
    SpvExecutionModeSchedulerTargetFmaxMhzINTEL = 5903,
    SpvExecutionModeMaximallyReconvergesKHR = 6023,
    SpvExecutionModeFPFastMathDefault = 6028,
    SpvExecutionModeStreamingInterfaceINTEL = 6154,
    SpvExecutionModeRegisterMapInterfaceINTEL = 6160,
    SpvExecutionModeNamedBarrierCountINTEL = 6417,
    SpvExecutionModeMaximumRegistersINTEL = 6461,
    SpvExecutionModeMaximumRegistersIdINTEL = 6462,
    SpvExecutionModeNamedMaximumRegistersINTEL = 6463,
    SpvExecutionModeMax = 0x7fffffff,
} SpvExecutionMode;

typedef enum SpvStorageClass_ {
    SpvStorageClassUniformConstant = 0,
    SpvStorageClassInput = 1,
    SpvStorageClassUniform = 2,
    SpvStorageClassOutput = 3,
    SpvStorageClassWorkgroup = 4,
    SpvStorageClassCrossWorkgroup = 5,
    SpvStorageClassPrivate = 6,
    SpvStorageClassFunction = 7,
    SpvStorageClassGeneric = 8,
    SpvStorageClassPushConstant = 9,
    SpvStorageClassAtomicCounter = 10,
    SpvStorageClassImage = 11,
    SpvStorageClassStorageBuffer = 12,
    SpvStorageClassTileImageEXT = 4172,
    SpvStorageClassNodePayloadAMDX = 5068,
    SpvStorageClassNodeOutputPayloadAMDX = 5076,
    SpvStorageClassCallableDataKHR = 5328,
    SpvStorageClassCallableDataNV = 5328,
    SpvStorageClassIncomingCallableDataKHR = 5329,
    SpvStorageClassIncomingCallableDataNV = 5329,
    SpvStorageClassRayPayloadKHR = 5338,
    SpvStorageClassRayPayloadNV = 5338,
    SpvStorageClassHitAttributeKHR = 5339,
    SpvStorageClassHitAttributeNV = 5339,
    SpvStorageClassIncomingRayPayloadKHR = 5342,
    SpvStorageClassIncomingRayPayloadNV = 5342,
    SpvStorageClassShaderRecordBufferKHR = 5343,
    SpvStorageClassShaderRecordBufferNV = 5343,
    SpvStorageClassPhysicalStorageBuffer = 5349,
    SpvStorageClassPhysicalStorageBufferEXT = 5349,
    SpvStorageClassHitObjectAttributeNV = 5385,
    SpvStorageClassTaskPayloadWorkgroupEXT = 5402,
    SpvStorageClassCodeSectionINTEL = 5605,
    SpvStorageClassDeviceOnlyINTEL = 5936,
    SpvStorageClassHostOnlyINTEL = 5937,
    SpvStorageClassMax = 0x7fffffff,
} SpvStorageClass;

typedef enum SpvDim_ {
    SpvDim1D = 0,
    SpvDim2D = 1,
    SpvDim3D = 2,
    SpvDimCube = 3,
    SpvDimRect = 4,
    SpvDimBuffer = 5,
    SpvDimSubpassData = 6,
    SpvDimTileImageDataEXT = 4173,
    SpvDimMax = 0x7fffffff,
} SpvDim;

typedef enum SpvSamplerAddressingMode_ {
    SpvSamplerAddressingModeNone = 0,
    SpvSamplerAddressingModeClampToEdge = 1,
    SpvSamplerAddressingModeClamp = 2,
    SpvSamplerAddressingModeRepeat = 3,
    SpvSamplerAddressingModeRepeatMirrored = 4,
    SpvSamplerAddressingModeMax = 0x7fffffff,
} SpvSamplerAddressingMode;

typedef enum SpvSamplerFilterMode_ {
    SpvSamplerFilterModeNearest = 0,
    SpvSamplerFilterModeLinear = 1,
    SpvSamplerFilterModeMax = 0x7fffffff,
} SpvSamplerFilterMode;

typedef enum SpvImageFormat_ {
    SpvImageFormatUnknown = 0,
    SpvImageFormatRgba32f = 1,
    SpvImageFormatRgba16f = 2,
    SpvImageFormatR32f = 3,
    SpvImageFormatRgba8 = 4,
    SpvImageFormatRgba8Snorm = 5,
    SpvImageFormatRg32f = 6,
    SpvImageFormatRg16f = 7,
    SpvImageFormatR11fG11fB10f = 8,
    SpvImageFormatR16f = 9,
    SpvImageFormatRgba16 = 10,
    SpvImageFormatRgb10A2 = 11,
    SpvImageFormatRg16 = 12,
    SpvImageFormatRg8 = 13,
    SpvImageFormatR16 = 14,
    SpvImageFormatR8 = 15,
    SpvImageFormatRgba16Snorm = 16,
    SpvImageFormatRg16Snorm = 17,
    SpvImageFormatRg8Snorm = 18,
    SpvImageFormatR16Snorm = 19,
    SpvImageFormatR8Snorm = 20,
    SpvImageFormatRgba32i = 21,
    SpvImageFormatRgba16i = 22,
    SpvImageFormatRgba8i = 23,
    SpvImageFormatR32i = 24,
    SpvImageFormatRg32i = 25,
    SpvImageFormatRg16i = 26,
    SpvImageFormatRg8i = 27,
    SpvImageFormatR16i = 28,
    SpvImageFormatR8i = 29,
    SpvImageFormatRgba32ui = 30,
    SpvImageFormatRgba16ui = 31,
    SpvImageFormatRgba8ui = 32,
    SpvImageFormatR32ui = 33,
    SpvImageFormatRgb10a2ui = 34,
    SpvImageFormatRg32ui = 35,
    SpvImageFormatRg16ui = 36,
    SpvImageFormatRg8ui = 37,
    SpvImageFormatR16ui = 38,
    SpvImageFormatR8ui = 39,
    SpvImageFormatR64ui = 40,
    SpvImageFormatR64i = 41,
    SpvImageFormatMax = 0x7fffffff,
} SpvImageFormat;

typedef enum SpvImageChannelOrder_ {
    SpvImageChannelOrderR = 0,
    SpvImageChannelOrderA = 1,
    SpvImageChannelOrderRG = 2,
    SpvImageChannelOrderRA = 3,
    SpvImageChannelOrderRGB = 4,
    SpvImageChannelOrderRGBA = 5,
    SpvImageChannelOrderBGRA = 6,
    SpvImageChannelOrderARGB = 7,
    SpvImageChannelOrderIntensity = 8,
    SpvImageChannelOrderLuminance = 9,
    SpvImageChannelOrderRx = 10,
    SpvImageChannelOrderRGx = 11,
    SpvImageChannelOrderRGBx = 12,
    SpvImageChannelOrderDepth = 13,
    SpvImageChannelOrderDepthStencil = 14,
    SpvImageChannelOrdersRGB = 15,
    SpvImageChannelOrdersRGBx = 16,
    SpvImageChannelOrdersRGBA = 17,
    SpvImageChannelOrdersBGRA = 18,
    SpvImageChannelOrderABGR = 19,
    SpvImageChannelOrderMax = 0x7fffffff,
} SpvImageChannelOrder;

typedef enum SpvImageChannelDataType_ {
    SpvImageChannelDataTypeSnormInt8 = 0,
    SpvImageChannelDataTypeSnormInt16 = 1,
    SpvImageChannelDataTypeUnormInt8 = 2,
    SpvImageChannelDataTypeUnormInt16 = 3,
    SpvImageChannelDataTypeUnormShort565 = 4,
    SpvImageChannelDataTypeUnormShort555 = 5,
    SpvImageChannelDataTypeUnormInt101010 = 6,
    SpvImageChannelDataTypeSignedInt8 = 7,
    SpvImageChannelDataTypeSignedInt16 = 8,
    SpvImageChannelDataTypeSignedInt32 = 9,
    SpvImageChannelDataTypeUnsignedInt8 = 10,
    SpvImageChannelDataTypeUnsignedInt16 = 11,
    SpvImageChannelDataTypeUnsignedInt32 = 12,
    SpvImageChannelDataTypeHalfFloat = 13,
    SpvImageChannelDataTypeFloat = 14,
    SpvImageChannelDataTypeUnormInt24 = 15,
    SpvImageChannelDataTypeUnormInt101010_2 = 16,
    SpvImageChannelDataTypeUnsignedIntRaw10EXT = 19,
    SpvImageChannelDataTypeUnsignedIntRaw12EXT = 20,
    SpvImageChannelDataTypeUnormInt2_101010EXT = 21,
    SpvImageChannelDataTypeMax = 0x7fffffff,
} SpvImageChannelDataType;

typedef enum SpvImageOperandsShift_ {
    SpvImageOperandsBiasShift = 0,
    SpvImageOperandsLodShift = 1,
    SpvImageOperandsGradShift = 2,
    SpvImageOperandsConstOffsetShift = 3,
    SpvImageOperandsOffsetShift = 4,
    SpvImageOperandsConstOffsetsShift = 5,
    SpvImageOperandsSampleShift = 6,
    SpvImageOperandsMinLodShift = 7,
    SpvImageOperandsMakeTexelAvailableShift = 8,
    SpvImageOperandsMakeTexelAvailableKHRShift = 8,
    SpvImageOperandsMakeTexelVisibleShift = 9,
    SpvImageOperandsMakeTexelVisibleKHRShift = 9,
    SpvImageOperandsNonPrivateTexelShift = 10,
    SpvImageOperandsNonPrivateTexelKHRShift = 10,
    SpvImageOperandsVolatileTexelShift = 11,
    SpvImageOperandsVolatileTexelKHRShift = 11,
    SpvImageOperandsSignExtendShift = 12,
    SpvImageOperandsZeroExtendShift = 13,
    SpvImageOperandsNontemporalShift = 14,
    SpvImageOperandsOffsetsShift = 16,
    SpvImageOperandsMax = 0x7fffffff,
} SpvImageOperandsShift;

typedef enum SpvImageOperandsMask_ {
    SpvImageOperandsMaskNone = 0,
    SpvImageOperandsBiasMask = 0x00000001,
    SpvImageOperandsLodMask = 0x00000002,
    SpvImageOperandsGradMask = 0x00000004,
    SpvImageOperandsConstOffsetMask = 0x00000008,
    SpvImageOperandsOffsetMask = 0x00000010,
    SpvImageOperandsConstOffsetsMask = 0x00000020,
    SpvImageOperandsSampleMask = 0x00000040,
    SpvImageOperandsMinLodMask = 0x00000080,
    SpvImageOperandsMakeTexelAvailableMask = 0x00000100,
    SpvImageOperandsMakeTexelAvailableKHRMask = 0x00000100,
    SpvImageOperandsMakeTexelVisibleMask = 0x00000200,
    SpvImageOperandsMakeTexelVisibleKHRMask = 0x00000200,
    SpvImageOperandsNonPrivateTexelMask = 0x00000400,
    SpvImageOperandsNonPrivateTexelKHRMask = 0x00000400,
    SpvImageOperandsVolatileTexelMask = 0x00000800,
    SpvImageOperandsVolatileTexelKHRMask = 0x00000800,
    SpvImageOperandsSignExtendMask = 0x00001000,
    SpvImageOperandsZeroExtendMask = 0x00002000,
    SpvImageOperandsNontemporalMask = 0x00004000,
    SpvImageOperandsOffsetsMask = 0x00010000,
} SpvImageOperandsMask;

typedef enum SpvFPFastMathModeShift_ {
    SpvFPFastMathModeNotNaNShift = 0,
    SpvFPFastMathModeNotInfShift = 1,
    SpvFPFastMathModeNSZShift = 2,
    SpvFPFastMathModeAllowRecipShift = 3,
    SpvFPFastMathModeFastShift = 4,
    SpvFPFastMathModeAllowContractShift = 16,
    SpvFPFastMathModeAllowContractFastINTELShift = 16,
    SpvFPFastMathModeAllowReassocShift = 17,
    SpvFPFastMathModeAllowReassocINTELShift = 17,
    SpvFPFastMathModeAllowTransformShift = 18,
    SpvFPFastMathModeMax = 0x7fffffff,
} SpvFPFastMathModeShift;

typedef enum SpvFPFastMathModeMask_ {
    SpvFPFastMathModeMaskNone = 0,
    SpvFPFastMathModeNotNaNMask = 0x00000001,
    SpvFPFastMathModeNotInfMask = 0x00000002,
    SpvFPFastMathModeNSZMask = 0x00000004,
    SpvFPFastMathModeAllowRecipMask = 0x00000008,
    SpvFPFastMathModeFastMask = 0x00000010,
    SpvFPFastMathModeAllowContractMask = 0x00010000,
    SpvFPFastMathModeAllowContractFastINTELMask = 0x00010000,
    SpvFPFastMathModeAllowReassocMask = 0x00020000,
    SpvFPFastMathModeAllowReassocINTELMask = 0x00020000,
    SpvFPFastMathModeAllowTransformMask = 0x00040000,
} SpvFPFastMathModeMask;

typedef enum SpvFPRoundingMode_ {
    SpvFPRoundingModeRTE = 0,
    SpvFPRoundingModeRTZ = 1,
    SpvFPRoundingModeRTP = 2,
    SpvFPRoundingModeRTN = 3,
    SpvFPRoundingModeMax = 0x7fffffff,
} SpvFPRoundingMode;

typedef enum SpvLinkageType_ {
    SpvLinkageTypeExport = 0,
    SpvLinkageTypeImport = 1,
    SpvLinkageTypeLinkOnceODR = 2,
    SpvLinkageTypeMax = 0x7fffffff,
} SpvLinkageType;

typedef enum SpvAccessQualifier_ {
    SpvAccessQualifierReadOnly = 0,
    SpvAccessQualifierWriteOnly = 1,
    SpvAccessQualifierReadWrite = 2,
    SpvAccessQualifierMax = 0x7fffffff,
} SpvAccessQualifier;

typedef enum SpvFunctionParameterAttribute_ {
    SpvFunctionParameterAttributeZext = 0,
    SpvFunctionParameterAttributeSext = 1,
    SpvFunctionParameterAttributeByVal = 2,
    SpvFunctionParameterAttributeSret = 3,
    SpvFunctionParameterAttributeNoAlias = 4,
    SpvFunctionParameterAttributeNoCapture = 5,
    SpvFunctionParameterAttributeNoWrite = 6,
    SpvFunctionParameterAttributeNoReadWrite = 7,
    SpvFunctionParameterAttributeRuntimeAlignedINTEL = 5940,
    SpvFunctionParameterAttributeMax = 0x7fffffff,
} SpvFunctionParameterAttribute;

typedef enum SpvDecoration_ {
    SpvDecorationRelaxedPrecision = 0,
    SpvDecorationSpecId = 1,
    SpvDecorationBlock = 2,
    SpvDecorationBufferBlock = 3,
    SpvDecorationRowMajor = 4,
    SpvDecorationColMajor = 5,
    SpvDecorationArrayStride = 6,
    SpvDecorationMatrixStride = 7,
    SpvDecorationGLSLShared = 8,
    SpvDecorationGLSLPacked = 9,
    SpvDecorationCPacked = 10,
    SpvDecorationBuiltIn = 11,
    SpvDecorationNoPerspective = 13,
    SpvDecorationFlat = 14,
    SpvDecorationPatch = 15,
    SpvDecorationCentroid = 16,
    SpvDecorationSample = 17,
    SpvDecorationInvariant = 18,
    SpvDecorationRestrict = 19,
    SpvDecorationAliased = 20,
    SpvDecorationVolatile = 21,
    SpvDecorationConstant = 22,
    SpvDecorationCoherent = 23,
    SpvDecorationNonWritable = 24,
    SpvDecorationNonReadable = 25,
    SpvDecorationUniform = 26,
    SpvDecorationUniformId = 27,
    SpvDecorationSaturatedConversion = 28,
    SpvDecorationStream = 29,
    SpvDecorationLocation = 30,
    SpvDecorationComponent = 31,
    SpvDecorationIndex = 32,
    SpvDecorationBinding = 33,
    SpvDecorationDescriptorSet = 34,
    SpvDecorationOffset = 35,
    SpvDecorationXfbBuffer = 36,
    SpvDecorationXfbStride = 37,
    SpvDecorationFuncParamAttr = 38,
    SpvDecorationFPRoundingMode = 39,
    SpvDecorationFPFastMathMode = 40,
    SpvDecorationLinkageAttributes = 41,
    SpvDecorationNoContraction = 42,
    SpvDecorationInputAttachmentIndex = 43,
    SpvDecorationAlignment = 44,
    SpvDecorationMaxByteOffset = 45,
    SpvDecorationAlignmentId = 46,
    SpvDecorationMaxByteOffsetId = 47,
    SpvDecorationNoSignedWrap = 4469,
    SpvDecorationNoUnsignedWrap = 4470,
    SpvDecorationWeightTextureQCOM = 4487,
    SpvDecorationBlockMatchTextureQCOM = 4488,
    SpvDecorationBlockMatchSamplerQCOM = 4499,
    SpvDecorationExplicitInterpAMD = 4999,
    SpvDecorationNodeSharesPayloadLimitsWithAMDX = 5019,
    SpvDecorationNodeMaxPayloadsAMDX = 5020,
    SpvDecorationTrackFinishWritingAMDX = 5078,
    SpvDecorationPayloadNodeNameAMDX = 5091,
    SpvDecorationOverrideCoverageNV = 5248,
    SpvDecorationPassthroughNV = 5250,
    SpvDecorationViewportRelativeNV = 5252,
    SpvDecorationSecondaryViewportRelativeNV = 5256,
    SpvDecorationPerPrimitiveEXT = 5271,
    SpvDecorationPerPrimitiveNV = 5271,
    SpvDecorationPerViewNV = 5272,
    SpvDecorationPerTaskNV = 5273,
    SpvDecorationPerVertexKHR = 5285,
    SpvDecorationPerVertexNV = 5285,
    SpvDecorationNonUniform = 5300,
    SpvDecorationNonUniformEXT = 5300,
    SpvDecorationRestrictPointer = 5355,
    SpvDecorationRestrictPointerEXT = 5355,
    SpvDecorationAliasedPointer = 5356,
    SpvDecorationAliasedPointerEXT = 5356,
    SpvDecorationHitObjectShaderRecordBufferNV = 5386,
    SpvDecorationBindlessSamplerNV = 5398,
    SpvDecorationBindlessImageNV = 5399,
    SpvDecorationBoundSamplerNV = 5400,
    SpvDecorationBoundImageNV = 5401,
    SpvDecorationSIMTCallINTEL = 5599,
    SpvDecorationReferencedIndirectlyINTEL = 5602,
    SpvDecorationClobberINTEL = 5607,
    SpvDecorationSideEffectsINTEL = 5608,
    SpvDecorationVectorComputeVariableINTEL = 5624,
    SpvDecorationFuncParamIOKindINTEL = 5625,
    SpvDecorationVectorComputeFunctionINTEL = 5626,
    SpvDecorationStackCallINTEL = 5627,
    SpvDecorationGlobalVariableOffsetINTEL = 5628,
    SpvDecorationCounterBuffer = 5634,
    SpvDecorationHlslCounterBufferGOOGLE = 5634,
    SpvDecorationHlslSemanticGOOGLE = 5635,
    SpvDecorationUserSemantic = 5635,
    SpvDecorationUserTypeGOOGLE = 5636,
    SpvDecorationFunctionRoundingModeINTEL = 5822,
    SpvDecorationFunctionDenormModeINTEL = 5823,
    SpvDecorationRegisterINTEL = 5825,
    SpvDecorationMemoryINTEL = 5826,
    SpvDecorationNumbanksINTEL = 5827,
    SpvDecorationBankwidthINTEL = 5828,
    SpvDecorationMaxPrivateCopiesINTEL = 5829,
    SpvDecorationSinglepumpINTEL = 5830,
    SpvDecorationDoublepumpINTEL = 5831,
    SpvDecorationMaxReplicatesINTEL = 5832,
    SpvDecorationSimpleDualPortINTEL = 5833,
    SpvDecorationMergeINTEL = 5834,
    SpvDecorationBankBitsINTEL = 5835,
    SpvDecorationForcePow2DepthINTEL = 5836,
    SpvDecorationStridesizeINTEL = 5883,
    SpvDecorationWordsizeINTEL = 5884,
    SpvDecorationTrueDualPortINTEL = 5885,
    SpvDecorationBurstCoalesceINTEL = 5899,
    SpvDecorationCacheSizeINTEL = 5900,
    SpvDecorationDontStaticallyCoalesceINTEL = 5901,
    SpvDecorationPrefetchINTEL = 5902,
    SpvDecorationStallEnableINTEL = 5905,
    SpvDecorationFuseLoopsInFunctionINTEL = 5907,
    SpvDecorationMathOpDSPModeINTEL = 5909,
    SpvDecorationAliasScopeINTEL = 5914,
    SpvDecorationNoAliasINTEL = 5915,
    SpvDecorationInitiationIntervalINTEL = 5917,
    SpvDecorationMaxConcurrencyINTEL = 5918,
    SpvDecorationPipelineEnableINTEL = 5919,
    SpvDecorationBufferLocationINTEL = 5921,
    SpvDecorationIOPipeStorageINTEL = 5944,
    SpvDecorationFunctionFloatingPointModeINTEL = 6080,
    SpvDecorationSingleElementVectorINTEL = 6085,
    SpvDecorationVectorComputeCallableFunctionINTEL = 6087,
    SpvDecorationMediaBlockIOINTEL = 6140,
    SpvDecorationStallFreeINTEL = 6151,
    SpvDecorationFPMaxErrorDecorationINTEL = 6170,
    SpvDecorationLatencyControlLabelINTEL = 6172,
    SpvDecorationLatencyControlConstraintINTEL = 6173,
    SpvDecorationConduitKernelArgumentINTEL = 6175,
    SpvDecorationRegisterMapKernelArgumentINTEL = 6176,
    SpvDecorationMMHostInterfaceAddressWidthINTEL = 6177,
    SpvDecorationMMHostInterfaceDataWidthINTEL = 6178,
    SpvDecorationMMHostInterfaceLatencyINTEL = 6179,
    SpvDecorationMMHostInterfaceReadWriteModeINTEL = 6180,
    SpvDecorationMMHostInterfaceMaxBurstINTEL = 6181,
    SpvDecorationMMHostInterfaceWaitRequestINTEL = 6182,
    SpvDecorationStableKernelArgumentINTEL = 6183,
    SpvDecorationHostAccessINTEL = 6188,
    SpvDecorationInitModeINTEL = 6190,
    SpvDecorationImplementInRegisterMapINTEL = 6191,
    SpvDecorationCacheControlLoadINTEL = 6442,
    SpvDecorationCacheControlStoreINTEL = 6443,
    SpvDecorationMax = 0x7fffffff,
} SpvDecoration;

typedef enum SpvBuiltIn_ {
    SpvBuiltInPosition = 0,
    SpvBuiltInPointSize = 1,
    SpvBuiltInClipDistance = 3,
    SpvBuiltInCullDistance = 4,
    SpvBuiltInVertexId = 5,
    SpvBuiltInInstanceId = 6,
    SpvBuiltInPrimitiveId = 7,
    SpvBuiltInInvocationId = 8,
    SpvBuiltInLayer = 9,
    SpvBuiltInViewportIndex = 10,
    SpvBuiltInTessLevelOuter = 11,
    SpvBuiltInTessLevelInner = 12,
    SpvBuiltInTessCoord = 13,
    SpvBuiltInPatchVertices = 14,
    SpvBuiltInFragCoord = 15,
    SpvBuiltInPointCoord = 16,
    SpvBuiltInFrontFacing = 17,
    SpvBuiltInSampleId = 18,
    SpvBuiltInSamplePosition = 19,
    SpvBuiltInSampleMask = 20,
    SpvBuiltInFragDepth = 22,
    SpvBuiltInHelperInvocation = 23,
    SpvBuiltInNumWorkgroups = 24,
    SpvBuiltInWorkgroupSize = 25,
    SpvBuiltInWorkgroupId = 26,
    SpvBuiltInLocalInvocationId = 27,
    SpvBuiltInGlobalInvocationId = 28,
    SpvBuiltInLocalInvocationIndex = 29,
    SpvBuiltInWorkDim = 30,
    SpvBuiltInGlobalSize = 31,
    SpvBuiltInEnqueuedWorkgroupSize = 32,
    SpvBuiltInGlobalOffset = 33,
    SpvBuiltInGlobalLinearId = 34,
    SpvBuiltInSubgroupSize = 36,
    SpvBuiltInSubgroupMaxSize = 37,
    SpvBuiltInNumSubgroups = 38,
    SpvBuiltInNumEnqueuedSubgroups = 39,
    SpvBuiltInSubgroupId = 40,
    SpvBuiltInSubgroupLocalInvocationId = 41,
    SpvBuiltInVertexIndex = 42,
    SpvBuiltInInstanceIndex = 43,
    SpvBuiltInCoreIDARM = 4160,
    SpvBuiltInCoreCountARM = 4161,
    SpvBuiltInCoreMaxIDARM = 4162,
    SpvBuiltInWarpIDARM = 4163,
    SpvBuiltInWarpMaxIDARM = 4164,
    SpvBuiltInSubgroupEqMask = 4416,
    SpvBuiltInSubgroupEqMaskKHR = 4416,
    SpvBuiltInSubgroupGeMask = 4417,
    SpvBuiltInSubgroupGeMaskKHR = 4417,
    SpvBuiltInSubgroupGtMask = 4418,
    SpvBuiltInSubgroupGtMaskKHR = 4418,
    SpvBuiltInSubgroupLeMask = 4419,
    SpvBuiltInSubgroupLeMaskKHR = 4419,
    SpvBuiltInSubgroupLtMask = 4420,
    SpvBuiltInSubgroupLtMaskKHR = 4420,
    SpvBuiltInBaseVertex = 4424,
    SpvBuiltInBaseInstance = 4425,
    SpvBuiltInDrawIndex = 4426,
    SpvBuiltInPrimitiveShadingRateKHR = 4432,
    SpvBuiltInDeviceIndex = 4438,
    SpvBuiltInViewIndex = 4440,
    SpvBuiltInShadingRateKHR = 4444,
    SpvBuiltInBaryCoordNoPerspAMD = 4992,
    SpvBuiltInBaryCoordNoPerspCentroidAMD = 4993,
    SpvBuiltInBaryCoordNoPerspSampleAMD = 4994,
    SpvBuiltInBaryCoordSmoothAMD = 4995,
    SpvBuiltInBaryCoordSmoothCentroidAMD = 4996,
    SpvBuiltInBaryCoordSmoothSampleAMD = 4997,
    SpvBuiltInBaryCoordPullModelAMD = 4998,
    SpvBuiltInFragStencilRefEXT = 5014,
    SpvBuiltInCoalescedInputCountAMDX = 5021,
    SpvBuiltInShaderIndexAMDX = 5073,
    SpvBuiltInViewportMaskNV = 5253,
    SpvBuiltInSecondaryPositionNV = 5257,
    SpvBuiltInSecondaryViewportMaskNV = 5258,
    SpvBuiltInPositionPerViewNV = 5261,
    SpvBuiltInViewportMaskPerViewNV = 5262,
    SpvBuiltInFullyCoveredEXT = 5264,
    SpvBuiltInTaskCountNV = 5274,
    SpvBuiltInPrimitiveCountNV = 5275,
    SpvBuiltInPrimitiveIndicesNV = 5276,
    SpvBuiltInClipDistancePerViewNV = 5277,
    SpvBuiltInCullDistancePerViewNV = 5278,
    SpvBuiltInLayerPerViewNV = 5279,
    SpvBuiltInMeshViewCountNV = 5280,
    SpvBuiltInMeshViewIndicesNV = 5281,
    SpvBuiltInBaryCoordKHR = 5286,
    SpvBuiltInBaryCoordNV = 5286,
    SpvBuiltInBaryCoordNoPerspKHR = 5287,
    SpvBuiltInBaryCoordNoPerspNV = 5287,
    SpvBuiltInFragSizeEXT = 5292,
    SpvBuiltInFragmentSizeNV = 5292,
    SpvBuiltInFragInvocationCountEXT = 5293,
    SpvBuiltInInvocationsPerPixelNV = 5293,
    SpvBuiltInPrimitivePointIndicesEXT = 5294,
    SpvBuiltInPrimitiveLineIndicesEXT = 5295,
    SpvBuiltInPrimitiveTriangleIndicesEXT = 5296,
    SpvBuiltInCullPrimitiveEXT = 5299,
    SpvBuiltInLaunchIdKHR = 5319,
    SpvBuiltInLaunchIdNV = 5319,
    SpvBuiltInLaunchSizeKHR = 5320,
    SpvBuiltInLaunchSizeNV = 5320,
    SpvBuiltInWorldRayOriginKHR = 5321,
    SpvBuiltInWorldRayOriginNV = 5321,
    SpvBuiltInWorldRayDirectionKHR = 5322,
    SpvBuiltInWorldRayDirectionNV = 5322,
    SpvBuiltInObjectRayOriginKHR = 5323,
    SpvBuiltInObjectRayOriginNV = 5323,
    SpvBuiltInObjectRayDirectionKHR = 5324,
    SpvBuiltInObjectRayDirectionNV = 5324,
    SpvBuiltInRayTminKHR = 5325,
    SpvBuiltInRayTminNV = 5325,
    SpvBuiltInRayTmaxKHR = 5326,
    SpvBuiltInRayTmaxNV = 5326,
    SpvBuiltInInstanceCustomIndexKHR = 5327,
    SpvBuiltInInstanceCustomIndexNV = 5327,
    SpvBuiltInObjectToWorldKHR = 5330,
    SpvBuiltInObjectToWorldNV = 5330,
    SpvBuiltInWorldToObjectKHR = 5331,
    SpvBuiltInWorldToObjectNV = 5331,
    SpvBuiltInHitTNV = 5332,
    SpvBuiltInHitKindKHR = 5333,
    SpvBuiltInHitKindNV = 5333,
    SpvBuiltInCurrentRayTimeNV = 5334,
    SpvBuiltInHitTriangleVertexPositionsKHR = 5335,
    SpvBuiltInHitMicroTriangleVertexPositionsNV = 5337,
    SpvBuiltInHitMicroTriangleVertexBarycentricsNV = 5344,
    SpvBuiltInIncomingRayFlagsKHR = 5351,
    SpvBuiltInIncomingRayFlagsNV = 5351,
    SpvBuiltInRayGeometryIndexKHR = 5352,
    SpvBuiltInWarpsPerSMNV = 5374,
    SpvBuiltInSMCountNV = 5375,
    SpvBuiltInWarpIDNV = 5376,
    SpvBuiltInSMIDNV = 5377,
    SpvBuiltInHitKindFrontFacingMicroTriangleNV = 5405,
    SpvBuiltInHitKindBackFacingMicroTriangleNV = 5406,
    SpvBuiltInCullMaskKHR = 6021,
    SpvBuiltInMax = 0x7fffffff,
} SpvBuiltIn;

typedef enum SpvSelectionControlShift_ {
    SpvSelectionControlFlattenShift = 0,
    SpvSelectionControlDontFlattenShift = 1,
    SpvSelectionControlMax = 0x7fffffff,
} SpvSelectionControlShift;

typedef enum SpvSelectionControlMask_ {
    SpvSelectionControlMaskNone = 0,
    SpvSelectionControlFlattenMask = 0x00000001,
    SpvSelectionControlDontFlattenMask = 0x00000002,
} SpvSelectionControlMask;

typedef enum SpvLoopControlShift_ {
    SpvLoopControlUnrollShift = 0,
    SpvLoopControlDontUnrollShift = 1,
    SpvLoopControlDependencyInfiniteShift = 2,
    SpvLoopControlDependencyLengthShift = 3,
    SpvLoopControlMinIterationsShift = 4,
    SpvLoopControlMaxIterationsShift = 5,
    SpvLoopControlIterationMultipleShift = 6,
    SpvLoopControlPeelCountShift = 7,
    SpvLoopControlPartialCountShift = 8,
    SpvLoopControlInitiationIntervalINTELShift = 16,
    SpvLoopControlMaxConcurrencyINTELShift = 17,
    SpvLoopControlDependencyArrayINTELShift = 18,
    SpvLoopControlPipelineEnableINTELShift = 19,
    SpvLoopControlLoopCoalesceINTELShift = 20,
    SpvLoopControlMaxInterleavingINTELShift = 21,
    SpvLoopControlSpeculatedIterationsINTELShift = 22,
    SpvLoopControlNoFusionINTELShift = 23,
    SpvLoopControlLoopCountINTELShift = 24,
    SpvLoopControlMaxReinvocationDelayINTELShift = 25,
    SpvLoopControlMax = 0x7fffffff,
} SpvLoopControlShift;

typedef enum SpvLoopControlMask_ {
    SpvLoopControlMaskNone = 0,
    SpvLoopControlUnrollMask = 0x00000001,
    SpvLoopControlDontUnrollMask = 0x00000002,
    SpvLoopControlDependencyInfiniteMask = 0x00000004,
    SpvLoopControlDependencyLengthMask = 0x00000008,
    SpvLoopControlMinIterationsMask = 0x00000010,
    SpvLoopControlMaxIterationsMask = 0x00000020,
    SpvLoopControlIterationMultipleMask = 0x00000040,
    SpvLoopControlPeelCountMask = 0x00000080,
    SpvLoopControlPartialCountMask = 0x00000100,
    SpvLoopControlInitiationIntervalINTELMask = 0x00010000,
    SpvLoopControlMaxConcurrencyINTELMask = 0x00020000,
    SpvLoopControlDependencyArrayINTELMask = 0x00040000,
    SpvLoopControlPipelineEnableINTELMask = 0x00080000,
    SpvLoopControlLoopCoalesceINTELMask = 0x00100000,
    SpvLoopControlMaxInterleavingINTELMask = 0x00200000,
    SpvLoopControlSpeculatedIterationsINTELMask = 0x00400000,
    SpvLoopControlNoFusionINTELMask = 0x00800000,
    SpvLoopControlLoopCountINTELMask = 0x01000000,
    SpvLoopControlMaxReinvocationDelayINTELMask = 0x02000000,
} SpvLoopControlMask;

typedef enum SpvFunctionControlShift_ {
    SpvFunctionControlInlineShift = 0,
    SpvFunctionControlDontInlineShift = 1,
    SpvFunctionControlPureShift = 2,
    SpvFunctionControlConstShift = 3,
    SpvFunctionControlOptNoneINTELShift = 16,
    SpvFunctionControlMax = 0x7fffffff,
} SpvFunctionControlShift;

typedef enum SpvFunctionControlMask_ {
    SpvFunctionControlMaskNone = 0,
    SpvFunctionControlInlineMask = 0x00000001,
    SpvFunctionControlDontInlineMask = 0x00000002,
    SpvFunctionControlPureMask = 0x00000004,
    SpvFunctionControlConstMask = 0x00000008,
    SpvFunctionControlOptNoneINTELMask = 0x00010000,
} SpvFunctionControlMask;

typedef enum SpvMemorySemanticsShift_ {
    SpvMemorySemanticsAcquireShift = 1,
    SpvMemorySemanticsReleaseShift = 2,
    SpvMemorySemanticsAcquireReleaseShift = 3,
    SpvMemorySemanticsSequentiallyConsistentShift = 4,
    SpvMemorySemanticsUniformMemoryShift = 6,
    SpvMemorySemanticsSubgroupMemoryShift = 7,
    SpvMemorySemanticsWorkgroupMemoryShift = 8,
    SpvMemorySemanticsCrossWorkgroupMemoryShift = 9,
    SpvMemorySemanticsAtomicCounterMemoryShift = 10,
    SpvMemorySemanticsImageMemoryShift = 11,
    SpvMemorySemanticsOutputMemoryShift = 12,
    SpvMemorySemanticsOutputMemoryKHRShift = 12,
    SpvMemorySemanticsMakeAvailableShift = 13,
    SpvMemorySemanticsMakeAvailableKHRShift = 13,
    SpvMemorySemanticsMakeVisibleShift = 14,
    SpvMemorySemanticsMakeVisibleKHRShift = 14,
    SpvMemorySemanticsVolatileShift = 15,
    SpvMemorySemanticsMax = 0x7fffffff,
} SpvMemorySemanticsShift;

typedef enum SpvMemorySemanticsMask_ {
    SpvMemorySemanticsMaskNone = 0,
    SpvMemorySemanticsAcquireMask = 0x00000002,
    SpvMemorySemanticsReleaseMask = 0x00000004,
    SpvMemorySemanticsAcquireReleaseMask = 0x00000008,
    SpvMemorySemanticsSequentiallyConsistentMask = 0x00000010,
    SpvMemorySemanticsUniformMemoryMask = 0x00000040,
    SpvMemorySemanticsSubgroupMemoryMask = 0x00000080,
    SpvMemorySemanticsWorkgroupMemoryMask = 0x00000100,
    SpvMemorySemanticsCrossWorkgroupMemoryMask = 0x00000200,
    SpvMemorySemanticsAtomicCounterMemoryMask = 0x00000400,
    SpvMemorySemanticsImageMemoryMask = 0x00000800,
    SpvMemorySemanticsOutputMemoryMask = 0x00001000,
    SpvMemorySemanticsOutputMemoryKHRMask = 0x00001000,
    SpvMemorySemanticsMakeAvailableMask = 0x00002000,
    SpvMemorySemanticsMakeAvailableKHRMask = 0x00002000,
    SpvMemorySemanticsMakeVisibleMask = 0x00004000,
    SpvMemorySemanticsMakeVisibleKHRMask = 0x00004000,
    SpvMemorySemanticsVolatileMask = 0x00008000,
} SpvMemorySemanticsMask;

typedef enum SpvMemoryAccessShift_ {
    SpvMemoryAccessVolatileShift = 0,
    SpvMemoryAccessAlignedShift = 1,
    SpvMemoryAccessNontemporalShift = 2,
    SpvMemoryAccessMakePointerAvailableShift = 3,
    SpvMemoryAccessMakePointerAvailableKHRShift = 3,
    SpvMemoryAccessMakePointerVisibleShift = 4,
    SpvMemoryAccessMakePointerVisibleKHRShift = 4,
    SpvMemoryAccessNonPrivatePointerShift = 5,
    SpvMemoryAccessNonPrivatePointerKHRShift = 5,
    SpvMemoryAccessAliasScopeINTELMaskShift = 16,
    SpvMemoryAccessNoAliasINTELMaskShift = 17,
    SpvMemoryAccessMax = 0x7fffffff,
} SpvMemoryAccessShift;

typedef enum SpvMemoryAccessMask_ {
    SpvMemoryAccessMaskNone = 0,
    SpvMemoryAccessVolatileMask = 0x00000001,
    SpvMemoryAccessAlignedMask = 0x00000002,
    SpvMemoryAccessNontemporalMask = 0x00000004,
    SpvMemoryAccessMakePointerAvailableMask = 0x00000008,
    SpvMemoryAccessMakePointerAvailableKHRMask = 0x00000008,
    SpvMemoryAccessMakePointerVisibleMask = 0x00000010,
    SpvMemoryAccessMakePointerVisibleKHRMask = 0x00000010,
    SpvMemoryAccessNonPrivatePointerMask = 0x00000020,
    SpvMemoryAccessNonPrivatePointerKHRMask = 0x00000020,
    SpvMemoryAccessAliasScopeINTELMaskMask = 0x00010000,
    SpvMemoryAccessNoAliasINTELMaskMask = 0x00020000,
} SpvMemoryAccessMask;

typedef enum SpvScope_ {
    SpvScopeCrossDevice = 0,
    SpvScopeDevice = 1,
    SpvScopeWorkgroup = 2,
    SpvScopeSubgroup = 3,
    SpvScopeInvocation = 4,
    SpvScopeQueueFamily = 5,
    SpvScopeQueueFamilyKHR = 5,
    SpvScopeShaderCallKHR = 6,
    SpvScopeMax = 0x7fffffff,
} SpvScope;

typedef enum SpvGroupOperation_ {
    SpvGroupOperationReduce = 0,
    SpvGroupOperationInclusiveScan = 1,
    SpvGroupOperationExclusiveScan = 2,
    SpvGroupOperationClusteredReduce = 3,
    SpvGroupOperationPartitionedReduceNV = 6,
    SpvGroupOperationPartitionedInclusiveScanNV = 7,
    SpvGroupOperationPartitionedExclusiveScanNV = 8,
    SpvGroupOperationMax = 0x7fffffff,
} SpvGroupOperation;

typedef enum SpvKernelEnqueueFlags_ {
    SpvKernelEnqueueFlagsNoWait = 0,
    SpvKernelEnqueueFlagsWaitKernel = 1,
    SpvKernelEnqueueFlagsWaitWorkGroup = 2,
    SpvKernelEnqueueFlagsMax = 0x7fffffff,
} SpvKernelEnqueueFlags;

typedef enum SpvKernelProfilingInfoShift_ {
    SpvKernelProfilingInfoCmdExecTimeShift = 0,
    SpvKernelProfilingInfoMax = 0x7fffffff,
} SpvKernelProfilingInfoShift;

typedef enum SpvKernelProfilingInfoMask_ {
    SpvKernelProfilingInfoMaskNone = 0,
    SpvKernelProfilingInfoCmdExecTimeMask = 0x00000001,
} SpvKernelProfilingInfoMask;

typedef enum SpvCapability_ {
    SpvCapabilityMatrix = 0,
    SpvCapabilityShader = 1,
    SpvCapabilityGeometry = 2,
    SpvCapabilityTessellation = 3,
    SpvCapabilityAddresses = 4,
    SpvCapabilityLinkage = 5,
    SpvCapabilityKernel = 6,
    SpvCapabilityVector16 = 7,
    SpvCapabilityFloat16Buffer = 8,
    SpvCapabilityFloat16 = 9,
    SpvCapabilityFloat64 = 10,
    SpvCapabilityInt64 = 11,
    SpvCapabilityInt64Atomics = 12,
    SpvCapabilityImageBasic = 13,
    SpvCapabilityImageReadWrite = 14,
    SpvCapabilityImageMipmap = 15,
    SpvCapabilityPipes = 17,
    SpvCapabilityGroups = 18,
    SpvCapabilityDeviceEnqueue = 19,
    SpvCapabilityLiteralSampler = 20,
    SpvCapabilityAtomicStorage = 21,
    SpvCapabilityInt16 = 22,
    SpvCapabilityTessellationPointSize = 23,
    SpvCapabilityGeometryPointSize = 24,
    SpvCapabilityImageGatherExtended = 25,
    SpvCapabilityStorageImageMultisample = 27,
    SpvCapabilityUniformBufferArrayDynamicIndexing = 28,
    SpvCapabilitySampledImageArrayDynamicIndexing = 29,
    SpvCapabilityStorageBufferArrayDynamicIndexing = 30,
    SpvCapabilityStorageImageArrayDynamicIndexing = 31,
    SpvCapabilityClipDistance = 32,
    SpvCapabilityCullDistance = 33,
    SpvCapabilityImageCubeArray = 34,
    SpvCapabilitySampleRateShading = 35,
    SpvCapabilityImageRect = 36,
    SpvCapabilitySampledRect = 37,
    SpvCapabilityGenericPointer = 38,
    SpvCapabilityInt8 = 39,
    SpvCapabilityInputAttachment = 40,
    SpvCapabilitySparseResidency = 41,
    SpvCapabilityMinLod = 42,
    SpvCapabilitySampled1D = 43,
    SpvCapabilityImage1D = 44,
    SpvCapabilitySampledCubeArray = 45,
    SpvCapabilitySampledBuffer = 46,
    SpvCapabilityImageBuffer = 47,
    SpvCapabilityImageMSArray = 48,
    SpvCapabilityStorageImageExtendedFormats = 49,
    SpvCapabilityImageQuery = 50,
    SpvCapabilityDerivativeControl = 51,
    SpvCapabilityInterpolationFunction = 52,
    SpvCapabilityTransformFeedback = 53,
    SpvCapabilityGeometryStreams = 54,
    SpvCapabilityStorageImageReadWithoutFormat = 55,
    SpvCapabilityStorageImageWriteWithoutFormat = 56,
    SpvCapabilityMultiViewport = 57,
    SpvCapabilitySubgroupDispatch = 58,
    SpvCapabilityNamedBarrier = 59,
    SpvCapabilityPipeStorage = 60,
    SpvCapabilityGroupNonUniform = 61,
    SpvCapabilityGroupNonUniformVote = 62,
    SpvCapabilityGroupNonUniformArithmetic = 63,
    SpvCapabilityGroupNonUniformBallot = 64,
    SpvCapabilityGroupNonUniformShuffle = 65,
    SpvCapabilityGroupNonUniformShuffleRelative = 66,
    SpvCapabilityGroupNonUniformClustered = 67,
    SpvCapabilityGroupNonUniformQuad = 68,
    SpvCapabilityShaderLayer = 69,
    SpvCapabilityShaderViewportIndex = 70,
    SpvCapabilityUniformDecoration = 71,
    SpvCapabilityCoreBuiltinsARM = 4165,
    SpvCapabilityTileImageColorReadAccessEXT = 4166,
    SpvCapabilityTileImageDepthReadAccessEXT = 4167,
    SpvCapabilityTileImageStencilReadAccessEXT = 4168,
    SpvCapabilityCooperativeMatrixLayoutsARM = 4201,
    SpvCapabilityFragmentShadingRateKHR = 4422,
    SpvCapabilitySubgroupBallotKHR = 4423,
    SpvCapabilityDrawParameters = 4427,
    SpvCapabilityWorkgroupMemoryExplicitLayoutKHR = 4428,
    SpvCapabilityWorkgroupMemoryExplicitLayout8BitAccessKHR = 4429,
    SpvCapabilityWorkgroupMemoryExplicitLayout16BitAccessKHR = 4430,
    SpvCapabilitySubgroupVoteKHR = 4431,
    SpvCapabilityStorageBuffer16BitAccess = 4433,
    SpvCapabilityStorageUniformBufferBlock16 = 4433,
    SpvCapabilityStorageUniform16 = 4434,
    SpvCapabilityUniformAndStorageBuffer16BitAccess = 4434,
    SpvCapabilityStoragePushConstant16 = 4435,
    SpvCapabilityStorageInputOutput16 = 4436,
    SpvCapabilityDeviceGroup = 4437,
    SpvCapabilityMultiView = 4439,
    SpvCapabilityVariablePointersStorageBuffer = 4441,
    SpvCapabilityVariablePointers = 4442,
    SpvCapabilityAtomicStorageOps = 4445,
    SpvCapabilitySampleMaskPostDepthCoverage = 4447,
    SpvCapabilityStorageBuffer8BitAccess = 4448,
    SpvCapabilityUniformAndStorageBuffer8BitAccess = 4449,
    SpvCapabilityStoragePushConstant8 = 4450,
    SpvCapabilityDenormPreserve = 4464,
    SpvCapabilityDenormFlushToZero = 4465,
    SpvCapabilitySignedZeroInfNanPreserve = 4466,
    SpvCapabilityRoundingModeRTE = 4467,
    SpvCapabilityRoundingModeRTZ = 4468,
    SpvCapabilityRayQueryProvisionalKHR = 4471,
    SpvCapabilityRayQueryKHR = 4472,
    SpvCapabilityUntypedPointersKHR = 4473,
    SpvCapabilityRayTraversalPrimitiveCullingKHR = 4478,
    SpvCapabilityRayTracingKHR = 4479,
    SpvCapabilityTextureSampleWeightedQCOM = 4484,
    SpvCapabilityTextureBoxFilterQCOM = 4485,
    SpvCapabilityTextureBlockMatchQCOM = 4486,
    SpvCapabilityTextureBlockMatch2QCOM = 4498,
    SpvCapabilityFloat16ImageAMD = 5008,
    SpvCapabilityImageGatherBiasLodAMD = 5009,
    SpvCapabilityFragmentMaskAMD = 5010,
    SpvCapabilityStencilExportEXT = 5013,
    SpvCapabilityImageReadWriteLodAMD = 5015,
    SpvCapabilityInt64ImageEXT = 5016,
    SpvCapabilityShaderClockKHR = 5055,
    SpvCapabilityShaderEnqueueAMDX = 5067,
    SpvCapabilityQuadControlKHR = 5087,
    SpvCapabilitySampleMaskOverrideCoverageNV = 5249,
    SpvCapabilityGeometryShaderPassthroughNV = 5251,
    SpvCapabilityShaderViewportIndexLayerEXT = 5254,
    SpvCapabilityShaderViewportIndexLayerNV = 5254,
    SpvCapabilityShaderViewportMaskNV = 5255,
    SpvCapabilityShaderStereoViewNV = 5259,
    SpvCapabilityPerViewAttributesNV = 5260,
    SpvCapabilityFragmentFullyCoveredEXT = 5265,
    SpvCapabilityMeshShadingNV = 5266,
    SpvCapabilityImageFootprintNV = 5282,
    SpvCapabilityMeshShadingEXT = 5283,
    SpvCapabilityFragmentBarycentricKHR = 5284,
    SpvCapabilityFragmentBarycentricNV = 5284,
    SpvCapabilityComputeDerivativeGroupQuadsKHR = 5288,
    SpvCapabilityComputeDerivativeGroupQuadsNV = 5288,
    SpvCapabilityFragmentDensityEXT = 5291,
    SpvCapabilityShadingRateNV = 5291,
    SpvCapabilityGroupNonUniformPartitionedNV = 5297,
    SpvCapabilityShaderNonUniform = 5301,
    SpvCapabilityShaderNonUniformEXT = 5301,
    SpvCapabilityRuntimeDescriptorArray = 5302,
    SpvCapabilityRuntimeDescriptorArrayEXT = 5302,
    SpvCapabilityInputAttachmentArrayDynamicIndexing = 5303,
    SpvCapabilityInputAttachmentArrayDynamicIndexingEXT = 5303,
    SpvCapabilityUniformTexelBufferArrayDynamicIndexing = 5304,
    SpvCapabilityUniformTexelBufferArrayDynamicIndexingEXT = 5304,
    SpvCapabilityStorageTexelBufferArrayDynamicIndexing = 5305,
    SpvCapabilityStorageTexelBufferArrayDynamicIndexingEXT = 5305,
    SpvCapabilityUniformBufferArrayNonUniformIndexing = 5306,
    SpvCapabilityUniformBufferArrayNonUniformIndexingEXT = 5306,
    SpvCapabilitySampledImageArrayNonUniformIndexing = 5307,
    SpvCapabilitySampledImageArrayNonUniformIndexingEXT = 5307,
    SpvCapabilityStorageBufferArrayNonUniformIndexing = 5308,
    SpvCapabilityStorageBufferArrayNonUniformIndexingEXT = 5308,
    SpvCapabilityStorageImageArrayNonUniformIndexing = 5309,
    SpvCapabilityStorageImageArrayNonUniformIndexingEXT = 5309,
    SpvCapabilityInputAttachmentArrayNonUniformIndexing = 5310,
    SpvCapabilityInputAttachmentArrayNonUniformIndexingEXT = 5310,
    SpvCapabilityUniformTexelBufferArrayNonUniformIndexing = 5311,
    SpvCapabilityUniformTexelBufferArrayNonUniformIndexingEXT = 5311,
    SpvCapabilityStorageTexelBufferArrayNonUniformIndexing = 5312,
    SpvCapabilityStorageTexelBufferArrayNonUniformIndexingEXT = 5312,
    SpvCapabilityRayTracingPositionFetchKHR = 5336,
    SpvCapabilityRayTracingNV = 5340,
    SpvCapabilityRayTracingMotionBlurNV = 5341,
    SpvCapabilityVulkanMemoryModel = 5345,
    SpvCapabilityVulkanMemoryModelKHR = 5345,
    SpvCapabilityVulkanMemoryModelDeviceScope = 5346,
    SpvCapabilityVulkanMemoryModelDeviceScopeKHR = 5346,
    SpvCapabilityPhysicalStorageBufferAddresses = 5347,
    SpvCapabilityPhysicalStorageBufferAddressesEXT = 5347,
    SpvCapabilityComputeDerivativeGroupLinearKHR = 5350,
    SpvCapabilityComputeDerivativeGroupLinearNV = 5350,
    SpvCapabilityRayTracingProvisionalKHR = 5353,
    SpvCapabilityCooperativeMatrixNV = 5357,
    SpvCapabilityFragmentShaderSampleInterlockEXT = 5363,
    SpvCapabilityFragmentShaderShadingRateInterlockEXT = 5372,
    SpvCapabilityShaderSMBuiltinsNV = 5373,
    SpvCapabilityFragmentShaderPixelInterlockEXT = 5378,
    SpvCapabilityDemoteToHelperInvocation = 5379,
    SpvCapabilityDemoteToHelperInvocationEXT = 5379,
    SpvCapabilityDisplacementMicromapNV = 5380,
    SpvCapabilityRayTracingOpacityMicromapEXT = 5381,
    SpvCapabilityShaderInvocationReorderNV = 5383,
    SpvCapabilityBindlessTextureNV = 5390,
    SpvCapabilityRayQueryPositionFetchKHR = 5391,
    SpvCapabilityAtomicFloat16VectorNV = 5404,
    SpvCapabilityRayTracingDisplacementMicromapNV = 5409,
    SpvCapabilityRawAccessChainsNV = 5414,
    SpvCapabilitySubgroupShuffleINTEL = 5568,
    SpvCapabilitySubgroupBufferBlockIOINTEL = 5569,
    SpvCapabilitySubgroupImageBlockIOINTEL = 5570,
    SpvCapabilitySubgroupImageMediaBlockIOINTEL = 5579,
    SpvCapabilityRoundToInfinityINTEL = 5582,
    SpvCapabilityFloatingPointModeINTEL = 5583,
    SpvCapabilityIntegerFunctions2INTEL = 5584,
    SpvCapabilityFunctionPointersINTEL = 5603,
    SpvCapabilityIndirectReferencesINTEL = 5604,
    SpvCapabilityAsmINTEL = 5606,
    SpvCapabilityAtomicFloat32MinMaxEXT = 5612,
    SpvCapabilityAtomicFloat64MinMaxEXT = 5613,
    SpvCapabilityAtomicFloat16MinMaxEXT = 5616,
    SpvCapabilityVectorComputeINTEL = 5617,
    SpvCapabilityVectorAnyINTEL = 5619,
    SpvCapabilityExpectAssumeKHR = 5629,
    SpvCapabilitySubgroupAvcMotionEstimationINTEL = 5696,
    SpvCapabilitySubgroupAvcMotionEstimationIntraINTEL = 5697,
    SpvCapabilitySubgroupAvcMotionEstimationChromaINTEL = 5698,
    SpvCapabilityVariableLengthArrayINTEL = 5817,
    SpvCapabilityFunctionFloatControlINTEL = 5821,
    SpvCapabilityFPGAMemoryAttributesINTEL = 5824,
    SpvCapabilityFPFastMathModeINTEL = 5837,
    SpvCapabilityArbitraryPrecisionIntegersINTEL = 5844,
    SpvCapabilityArbitraryPrecisionFloatingPointINTEL = 5845,
    SpvCapabilityUnstructuredLoopControlsINTEL = 5886,
    SpvCapabilityFPGALoopControlsINTEL = 5888,
    SpvCapabilityKernelAttributesINTEL = 5892,
    SpvCapabilityFPGAKernelAttributesINTEL = 5897,
    SpvCapabilityFPGAMemoryAccessesINTEL = 5898,
    SpvCapabilityFPGAClusterAttributesINTEL = 5904,
    SpvCapabilityLoopFuseINTEL = 5906,
    SpvCapabilityFPGADSPControlINTEL = 5908,
    SpvCapabilityMemoryAccessAliasingINTEL = 5910,
    SpvCapabilityFPGAInvocationPipeliningAttributesINTEL = 5916,
    SpvCapabilityFPGABufferLocationINTEL = 5920,
    SpvCapabilityArbitraryPrecisionFixedPointINTEL = 5922,
    SpvCapabilityUSMStorageClassesINTEL = 5935,
    SpvCapabilityRuntimeAlignedAttributeINTEL = 5939,
    SpvCapabilityIOPipesINTEL = 5943,
    SpvCapabilityBlockingPipesINTEL = 5945,
    SpvCapabilityFPGARegINTEL = 5948,
    SpvCapabilityDotProductInputAll = 6016,
    SpvCapabilityDotProductInputAllKHR = 6016,
    SpvCapabilityDotProductInput4x8Bit = 6017,
    SpvCapabilityDotProductInput4x8BitKHR = 6017,
    SpvCapabilityDotProductInput4x8BitPacked = 6018,
    SpvCapabilityDotProductInput4x8BitPackedKHR = 6018,
    SpvCapabilityDotProduct = 6019,
    SpvCapabilityDotProductKHR = 6019,
    SpvCapabilityRayCullMaskKHR = 6020,
    SpvCapabilityCooperativeMatrixKHR = 6022,
    SpvCapabilityReplicatedCompositesEXT = 6024,
    SpvCapabilityBitInstructions = 6025,
    SpvCapabilityGroupNonUniformRotateKHR = 6026,
    SpvCapabilityFloatControls2 = 6029,
    SpvCapabilityAtomicFloat32AddEXT = 6033,
    SpvCapabilityAtomicFloat64AddEXT = 6034,
    SpvCapabilityLongCompositesINTEL = 6089,
    SpvCapabilityOptNoneINTEL = 6094,
    SpvCapabilityAtomicFloat16AddEXT = 6095,
    SpvCapabilityDebugInfoModuleINTEL = 6114,
    SpvCapabilityBFloat16ConversionINTEL = 6115,
    SpvCapabilitySplitBarrierINTEL = 6141,
    SpvCapabilityFPGAClusterAttributesV2INTEL = 6150,
    SpvCapabilityFPGAKernelAttributesv2INTEL = 6161,
    SpvCapabilityFPMaxErrorINTEL = 6169,
    SpvCapabilityFPGALatencyControlINTEL = 6171,
    SpvCapabilityFPGAArgumentInterfacesINTEL = 6174,
    SpvCapabilityGlobalVariableHostAccessINTEL = 6187,
    SpvCapabilityGlobalVariableFPGADecorationsINTEL = 6189,
    SpvCapabilitySubgroupBufferPrefetchINTEL = 6220,
    SpvCapabilityGroupUniformArithmeticKHR = 6400,
    SpvCapabilityMaskedGatherScatterINTEL = 6427,
    SpvCapabilityCacheControlsINTEL = 6441,
    SpvCapabilityRegisterLimitsINTEL = 6460,
    SpvCapabilityMax = 0x7fffffff,
} SpvCapability;

typedef enum SpvRayFlagsShift_ {
    SpvRayFlagsOpaqueKHRShift = 0,
    SpvRayFlagsNoOpaqueKHRShift = 1,
    SpvRayFlagsTerminateOnFirstHitKHRShift = 2,
    SpvRayFlagsSkipClosestHitShaderKHRShift = 3,
    SpvRayFlagsCullBackFacingTrianglesKHRShift = 4,
    SpvRayFlagsCullFrontFacingTrianglesKHRShift = 5,
    SpvRayFlagsCullOpaqueKHRShift = 6,
    SpvRayFlagsCullNoOpaqueKHRShift = 7,
    SpvRayFlagsSkipTrianglesKHRShift = 8,
    SpvRayFlagsSkipAABBsKHRShift = 9,
    SpvRayFlagsForceOpacityMicromap2StateEXTShift = 10,
    SpvRayFlagsMax = 0x7fffffff,
} SpvRayFlagsShift;

typedef enum SpvRayFlagsMask_ {
    SpvRayFlagsMaskNone = 0,
    SpvRayFlagsOpaqueKHRMask = 0x00000001,
    SpvRayFlagsNoOpaqueKHRMask = 0x00000002,
    SpvRayFlagsTerminateOnFirstHitKHRMask = 0x00000004,
    SpvRayFlagsSkipClosestHitShaderKHRMask = 0x00000008,
    SpvRayFlagsCullBackFacingTrianglesKHRMask = 0x00000010,
    SpvRayFlagsCullFrontFacingTrianglesKHRMask = 0x00000020,
    SpvRayFlagsCullOpaqueKHRMask = 0x00000040,
    SpvRayFlagsCullNoOpaqueKHRMask = 0x00000080,
    SpvRayFlagsSkipTrianglesKHRMask = 0x00000100,
    SpvRayFlagsSkipAABBsKHRMask = 0x00000200,
    SpvRayFlagsForceOpacityMicromap2StateEXTMask = 0x00000400,
} SpvRayFlagsMask;

typedef enum SpvRayQueryIntersection_ {
    SpvRayQueryIntersectionRayQueryCandidateIntersectionKHR = 0,
    SpvRayQueryIntersectionRayQueryCommittedIntersectionKHR = 1,
    SpvRayQueryIntersectionMax = 0x7fffffff,
} SpvRayQueryIntersection;

typedef enum SpvRayQueryCommittedIntersectionType_ {
    SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionNoneKHR = 0,
    SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionTriangleKHR = 1,
    SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionGeneratedKHR = 2,
    SpvRayQueryCommittedIntersectionTypeMax = 0x7fffffff,
} SpvRayQueryCommittedIntersectionType;

typedef enum SpvRayQueryCandidateIntersectionType_ {
    SpvRayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionTriangleKHR = 0,
    SpvRayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionAABBKHR = 1,
    SpvRayQueryCandidateIntersectionTypeMax = 0x7fffffff,
} SpvRayQueryCandidateIntersectionType;

typedef enum SpvFragmentShadingRateShift_ {
    SpvFragmentShadingRateVertical2PixelsShift = 0,
    SpvFragmentShadingRateVertical4PixelsShift = 1,
    SpvFragmentShadingRateHorizontal2PixelsShift = 2,
    SpvFragmentShadingRateHorizontal4PixelsShift = 3,
    SpvFragmentShadingRateMax = 0x7fffffff,
} SpvFragmentShadingRateShift;

typedef enum SpvFragmentShadingRateMask_ {
    SpvFragmentShadingRateMaskNone = 0,
    SpvFragmentShadingRateVertical2PixelsMask = 0x00000001,
    SpvFragmentShadingRateVertical4PixelsMask = 0x00000002,
    SpvFragmentShadingRateHorizontal2PixelsMask = 0x00000004,
    SpvFragmentShadingRateHorizontal4PixelsMask = 0x00000008,
} SpvFragmentShadingRateMask;

typedef enum SpvFPDenormMode_ {
    SpvFPDenormModePreserve = 0,
    SpvFPDenormModeFlushToZero = 1,
    SpvFPDenormModeMax = 0x7fffffff,
} SpvFPDenormMode;

typedef enum SpvFPOperationMode_ {
    SpvFPOperationModeIEEE = 0,
    SpvFPOperationModeALT = 1,
    SpvFPOperationModeMax = 0x7fffffff,
} SpvFPOperationMode;

typedef enum SpvQuantizationModes_ {
    SpvQuantizationModesTRN = 0,
    SpvQuantizationModesTRN_ZERO = 1,
    SpvQuantizationModesRND = 2,
    SpvQuantizationModesRND_ZERO = 3,
    SpvQuantizationModesRND_INF = 4,
    SpvQuantizationModesRND_MIN_INF = 5,
    SpvQuantizationModesRND_CONV = 6,
    SpvQuantizationModesRND_CONV_ODD = 7,
    SpvQuantizationModesMax = 0x7fffffff,
} SpvQuantizationModes;

typedef enum SpvOverflowModes_ {
    SpvOverflowModesWRAP = 0,
    SpvOverflowModesSAT = 1,
    SpvOverflowModesSAT_ZERO = 2,
    SpvOverflowModesSAT_SYM = 3,
    SpvOverflowModesMax = 0x7fffffff,
} SpvOverflowModes;

typedef enum SpvPackedVectorFormat_ {
    SpvPackedVectorFormatPackedVectorFormat4x8Bit = 0,
    SpvPackedVectorFormatPackedVectorFormat4x8BitKHR = 0,
    SpvPackedVectorFormatMax = 0x7fffffff,
} SpvPackedVectorFormat;

typedef enum SpvCooperativeMatrixOperandsShift_ {
    SpvCooperativeMatrixOperandsMatrixASignedComponentsKHRShift = 0,
    SpvCooperativeMatrixOperandsMatrixBSignedComponentsKHRShift = 1,
    SpvCooperativeMatrixOperandsMatrixCSignedComponentsKHRShift = 2,
    SpvCooperativeMatrixOperandsMatrixResultSignedComponentsKHRShift = 3,
    SpvCooperativeMatrixOperandsSaturatingAccumulationKHRShift = 4,
    SpvCooperativeMatrixOperandsMax = 0x7fffffff,
} SpvCooperativeMatrixOperandsShift;

typedef enum SpvCooperativeMatrixOperandsMask_ {
    SpvCooperativeMatrixOperandsMaskNone = 0,
    SpvCooperativeMatrixOperandsMatrixASignedComponentsKHRMask = 0x00000001,
    SpvCooperativeMatrixOperandsMatrixBSignedComponentsKHRMask = 0x00000002,
    SpvCooperativeMatrixOperandsMatrixCSignedComponentsKHRMask = 0x00000004,
    SpvCooperativeMatrixOperandsMatrixResultSignedComponentsKHRMask = 0x00000008,
    SpvCooperativeMatrixOperandsSaturatingAccumulationKHRMask = 0x00000010,
} SpvCooperativeMatrixOperandsMask;

typedef enum SpvCooperativeMatrixLayout_ {
    SpvCooperativeMatrixLayoutRowMajorKHR = 0,
    SpvCooperativeMatrixLayoutColumnMajorKHR = 1,
    SpvCooperativeMatrixLayoutRowBlockedInterleavedARM = 4202,
    SpvCooperativeMatrixLayoutColumnBlockedInterleavedARM = 4203,
    SpvCooperativeMatrixLayoutMax = 0x7fffffff,
} SpvCooperativeMatrixLayout;

typedef enum SpvCooperativeMatrixUse_ {
    SpvCooperativeMatrixUseMatrixAKHR = 0,
    SpvCooperativeMatrixUseMatrixBKHR = 1,
    SpvCooperativeMatrixUseMatrixAccumulatorKHR = 2,
    SpvCooperativeMatrixUseMax = 0x7fffffff,
} SpvCooperativeMatrixUse;

typedef enum SpvInitializationModeQualifier_ {
    SpvInitializationModeQualifierInitOnDeviceReprogramINTEL = 0,
    SpvInitializationModeQualifierInitOnDeviceResetINTEL = 1,
    SpvInitializationModeQualifierMax = 0x7fffffff,
} SpvInitializationModeQualifier;

typedef enum SpvHostAccessQualifier_ {
    SpvHostAccessQualifierNoneINTEL = 0,
    SpvHostAccessQualifierReadINTEL = 1,
    SpvHostAccessQualifierWriteINTEL = 2,
    SpvHostAccessQualifierReadWriteINTEL = 3,
    SpvHostAccessQualifierMax = 0x7fffffff,
} SpvHostAccessQualifier;

typedef enum SpvLoadCacheControl_ {
    SpvLoadCacheControlUncachedINTEL = 0,
    SpvLoadCacheControlCachedINTEL = 1,
    SpvLoadCacheControlStreamingINTEL = 2,
    SpvLoadCacheControlInvalidateAfterReadINTEL = 3,
    SpvLoadCacheControlConstCachedINTEL = 4,
    SpvLoadCacheControlMax = 0x7fffffff,
} SpvLoadCacheControl;

typedef enum SpvStoreCacheControl_ {
    SpvStoreCacheControlUncachedINTEL = 0,
    SpvStoreCacheControlWriteThroughINTEL = 1,
    SpvStoreCacheControlWriteBackINTEL = 2,
    SpvStoreCacheControlStreamingINTEL = 3,
    SpvStoreCacheControlMax = 0x7fffffff,
} SpvStoreCacheControl;

typedef enum SpvNamedMaximumNumberOfRegisters_ {
    SpvNamedMaximumNumberOfRegistersAutoINTEL = 0,
    SpvNamedMaximumNumberOfRegistersMax = 0x7fffffff,
} SpvNamedMaximumNumberOfRegisters;

typedef enum SpvRawAccessChainOperandsShift_ {
    SpvRawAccessChainOperandsRobustnessPerComponentNVShift = 0,
    SpvRawAccessChainOperandsRobustnessPerElementNVShift = 1,
    SpvRawAccessChainOperandsMax = 0x7fffffff,
} SpvRawAccessChainOperandsShift;

typedef enum SpvRawAccessChainOperandsMask_ {
    SpvRawAccessChainOperandsMaskNone = 0,
    SpvRawAccessChainOperandsRobustnessPerComponentNVMask = 0x00000001,
    SpvRawAccessChainOperandsRobustnessPerElementNVMask = 0x00000002,
} SpvRawAccessChainOperandsMask;

typedef enum SpvFPEncoding_ {
    SpvFPEncodingMax = 0x7fffffff,
} SpvFPEncoding;

typedef enum SpvOp_ {
    SpvOpNop = 0,
    SpvOpUndef = 1,
    SpvOpSourceContinued = 2,
    SpvOpSource = 3,
    SpvOpSourceExtension = 4,
    SpvOpName = 5,
    SpvOpMemberName = 6,
    SpvOpString = 7,
    SpvOpLine = 8,
    SpvOpExtension = 10,
    SpvOpExtInstImport = 11,
    SpvOpExtInst = 12,
    SpvOpMemoryModel = 14,
    SpvOpEntryPoint = 15,
    SpvOpExecutionMode = 16,
    SpvOpCapability = 17,
    SpvOpTypeVoid = 19,
    SpvOpTypeBool = 20,
    SpvOpTypeInt = 21,
    SpvOpTypeFloat = 22,
    SpvOpTypeVector = 23,
    SpvOpTypeMatrix = 24,
    SpvOpTypeImage = 25,
    SpvOpTypeSampler = 26,
    SpvOpTypeSampledImage = 27,
    SpvOpTypeArray = 28,
    SpvOpTypeRuntimeArray = 29,
    SpvOpTypeStruct = 30,
    SpvOpTypeOpaque = 31,
    SpvOpTypePointer = 32,
    SpvOpTypeFunction = 33,
    SpvOpTypeEvent = 34,
    SpvOpTypeDeviceEvent = 35,
    SpvOpTypeReserveId = 36,
    SpvOpTypeQueue = 37,
    SpvOpTypePipe = 38,
    SpvOpTypeForwardPointer = 39,
    SpvOpConstantTrue = 41,
    SpvOpConstantFalse = 42,
    SpvOpConstant = 43,
    SpvOpConstantComposite = 44,
    SpvOpConstantSampler = 45,
    SpvOpConstantNull = 46,
    SpvOpSpecConstantTrue = 48,
    SpvOpSpecConstantFalse = 49,
    SpvOpSpecConstant = 50,
    SpvOpSpecConstantComposite = 51,
    SpvOpSpecConstantOp = 52,
    SpvOpFunction = 54,
    SpvOpFunctionParameter = 55,
    SpvOpFunctionEnd = 56,
    SpvOpFunctionCall = 57,
    SpvOpVariable = 59,
    SpvOpImageTexelPointer = 60,
    SpvOpLoad = 61,
    SpvOpStore = 62,
    SpvOpCopyMemory = 63,
    SpvOpCopyMemorySized = 64,
    SpvOpAccessChain = 65,
    SpvOpInBoundsAccessChain = 66,
    SpvOpPtrAccessChain = 67,
    SpvOpArrayLength = 68,
    SpvOpGenericPtrMemSemantics = 69,
    SpvOpInBoundsPtrAccessChain = 70,
    SpvOpDecorate = 71,
    SpvOpMemberDecorate = 72,
    SpvOpDecorationGroup = 73,
    SpvOpGroupDecorate = 74,
    SpvOpGroupMemberDecorate = 75,
    SpvOpVectorExtractDynamic = 77,
    SpvOpVectorInsertDynamic = 78,
    SpvOpVectorShuffle = 79,
    SpvOpCompositeConstruct = 80,
    SpvOpCompositeExtract = 81,
    SpvOpCompositeInsert = 82,
    SpvOpCopyObject = 83,
    SpvOpTranspose = 84,
    SpvOpSampledImage = 86,
    SpvOpImageSampleImplicitLod = 87,
    SpvOpImageSampleExplicitLod = 88,
    SpvOpImageSampleDrefImplicitLod = 89,
    SpvOpImageSampleDrefExplicitLod = 90,
    SpvOpImageSampleProjImplicitLod = 91,
    SpvOpImageSampleProjExplicitLod = 92,
    SpvOpImageSampleProjDrefImplicitLod = 93,
    SpvOpImageSampleProjDrefExplicitLod = 94,
    SpvOpImageFetch = 95,
    SpvOpImageGather = 96,
    SpvOpImageDrefGather = 97,
    SpvOpImageRead = 98,
    SpvOpImageWrite = 99,
    SpvOpImage = 100,
    SpvOpImageQueryFormat = 101,
    SpvOpImageQueryOrder = 102,
    SpvOpImageQuerySizeLod = 103,
    SpvOpImageQuerySize = 104,
    SpvOpImageQueryLod = 105,
    SpvOpImageQueryLevels = 106,
    SpvOpImageQuerySamples = 107,
    SpvOpConvertFToU = 109,
    SpvOpConvertFToS = 110,
    SpvOpConvertSToF = 111,
    SpvOpConvertUToF = 112,
    SpvOpUConvert = 113,
    SpvOpSConvert = 114,
    SpvOpFConvert = 115,
    SpvOpQuantizeToF16 = 116,
    SpvOpConvertPtrToU = 117,
    SpvOpSatConvertSToU = 118,
    SpvOpSatConvertUToS = 119,
    SpvOpConvertUToPtr = 120,
    SpvOpPtrCastToGeneric = 121,
    SpvOpGenericCastToPtr = 122,
    SpvOpGenericCastToPtrExplicit = 123,
    SpvOpBitcast = 124,
    SpvOpSNegate = 126,
    SpvOpFNegate = 127,
    SpvOpIAdd = 128,
    SpvOpFAdd = 129,
    SpvOpISub = 130,
    SpvOpFSub = 131,
    SpvOpIMul = 132,
    SpvOpFMul = 133,
    SpvOpUDiv = 134,
    SpvOpSDiv = 135,
    SpvOpFDiv = 136,
    SpvOpUMod = 137,
    SpvOpSRem = 138,
    SpvOpSMod = 139,
    SpvOpFRem = 140,
    SpvOpFMod = 141,
    SpvOpVectorTimesScalar = 142,
    SpvOpMatrixTimesScalar = 143,
    SpvOpVectorTimesMatrix = 144,
    SpvOpMatrixTimesVector = 145,
    SpvOpMatrixTimesMatrix = 146,
    SpvOpOuterProduct = 147,
    SpvOpDot = 148,
    SpvOpIAddCarry = 149,
    SpvOpISubBorrow = 150,
    SpvOpUMulExtended = 151,
    SpvOpSMulExtended = 152,
    SpvOpAny = 154,
    SpvOpAll = 155,
    SpvOpIsNan = 156,
    SpvOpIsInf = 157,
    SpvOpIsFinite = 158,
    SpvOpIsNormal = 159,
    SpvOpSignBitSet = 160,
    SpvOpLessOrGreater = 161,
    SpvOpOrdered = 162,
    SpvOpUnordered = 163,
    SpvOpLogicalEqual = 164,
    SpvOpLogicalNotEqual = 165,
    SpvOpLogicalOr = 166,
    SpvOpLogicalAnd = 167,
    SpvOpLogicalNot = 168,
    SpvOpSelect = 169,
    SpvOpIEqual = 170,
    SpvOpINotEqual = 171,
    SpvOpUGreaterThan = 172,
    SpvOpSGreaterThan = 173,
    SpvOpUGreaterThanEqual = 174,
    SpvOpSGreaterThanEqual = 175,
    SpvOpULessThan = 176,
    SpvOpSLessThan = 177,
    SpvOpULessThanEqual = 178,
    SpvOpSLessThanEqual = 179,
    SpvOpFOrdEqual = 180,
    SpvOpFUnordEqual = 181,
    SpvOpFOrdNotEqual = 182,
    SpvOpFUnordNotEqual = 183,
    SpvOpFOrdLessThan = 184,
    SpvOpFUnordLessThan = 185,
    SpvOpFOrdGreaterThan = 186,
    SpvOpFUnordGreaterThan = 187,
    SpvOpFOrdLessThanEqual = 188,
    SpvOpFUnordLessThanEqual = 189,
    SpvOpFOrdGreaterThanEqual = 190,
    SpvOpFUnordGreaterThanEqual = 191,
    SpvOpShiftRightLogical = 194,
    SpvOpShiftRightArithmetic = 195,
    SpvOpShiftLeftLogical = 196,
    SpvOpBitwiseOr = 197,
    SpvOpBitwiseXor = 198,
    SpvOpBitwiseAnd = 199,
    SpvOpNot = 200,
    SpvOpBitFieldInsert = 201,
    SpvOpBitFieldSExtract = 202,
    SpvOpBitFieldUExtract = 203,
    SpvOpBitReverse = 204,
    SpvOpBitCount = 205,
    SpvOpDPdx = 207,
    SpvOpDPdy = 208,
    SpvOpFwidth = 209,
    SpvOpDPdxFine = 210,
    SpvOpDPdyFine = 211,
    SpvOpFwidthFine = 212,
    SpvOpDPdxCoarse = 213,
    SpvOpDPdyCoarse = 214,
    SpvOpFwidthCoarse = 215,
    SpvOpEmitVertex = 218,
    SpvOpEndPrimitive = 219,
    SpvOpEmitStreamVertex = 220,
    SpvOpEndStreamPrimitive = 221,
    SpvOpControlBarrier = 224,
    SpvOpMemoryBarrier = 225,
    SpvOpAtomicLoad = 227,
    SpvOpAtomicStore = 228,
    SpvOpAtomicExchange = 229,
    SpvOpAtomicCompareExchange = 230,
    SpvOpAtomicCompareExchangeWeak = 231,
    SpvOpAtomicIIncrement = 232,
    SpvOpAtomicIDecrement = 233,
    SpvOpAtomicIAdd = 234,
    SpvOpAtomicISub = 235,
    SpvOpAtomicSMin = 236,
    SpvOpAtomicUMin = 237,
    SpvOpAtomicSMax = 238,
    SpvOpAtomicUMax = 239,
    SpvOpAtomicAnd = 240,
    SpvOpAtomicOr = 241,
    SpvOpAtomicXor = 242,
    SpvOpPhi = 245,
    SpvOpLoopMerge = 246,
    SpvOpSelectionMerge = 247,
    SpvOpLabel = 248,
    SpvOpBranch = 249,
    SpvOpBranchConditional = 250,
    SpvOpSwitch = 251,
    SpvOpKill = 252,
    SpvOpReturn = 253,
    SpvOpReturnValue = 254,
    SpvOpUnreachable = 255,
    SpvOpLifetimeStart = 256,
    SpvOpLifetimeStop = 257,
    SpvOpGroupAsyncCopy = 259,
    SpvOpGroupWaitEvents = 260,
    SpvOpGroupAll = 261,
    SpvOpGroupAny = 262,
    SpvOpGroupBroadcast = 263,
    SpvOpGroupIAdd = 264,
    SpvOpGroupFAdd = 265,
    SpvOpGroupFMin = 266,
    SpvOpGroupUMin = 267,
    SpvOpGroupSMin = 268,
    SpvOpGroupFMax = 269,
    SpvOpGroupUMax = 270,
    SpvOpGroupSMax = 271,
    SpvOpReadPipe = 274,
    SpvOpWritePipe = 275,
    SpvOpReservedReadPipe = 276,
    SpvOpReservedWritePipe = 277,
    SpvOpReserveReadPipePackets = 278,
    SpvOpReserveWritePipePackets = 279,
    SpvOpCommitReadPipe = 280,
    SpvOpCommitWritePipe = 281,
    SpvOpIsValidReserveId = 282,
    SpvOpGetNumPipePackets = 283,
    SpvOpGetMaxPipePackets = 284,
    SpvOpGroupReserveReadPipePackets = 285,
    SpvOpGroupReserveWritePipePackets = 286,
    SpvOpGroupCommitReadPipe = 287,
    SpvOpGroupCommitWritePipe = 288,
    SpvOpEnqueueMarker = 291,
    SpvOpEnqueueKernel = 292,
    SpvOpGetKernelNDrangeSubGroupCount = 293,
    SpvOpGetKernelNDrangeMaxSubGroupSize = 294,
    SpvOpGetKernelWorkGroupSize = 295,
    SpvOpGetKernelPreferredWorkGroupSizeMultiple = 296,
    SpvOpRetainEvent = 297,
    SpvOpReleaseEvent = 298,
    SpvOpCreateUserEvent = 299,
    SpvOpIsValidEvent = 300,
    SpvOpSetUserEventStatus = 301,
    SpvOpCaptureEventProfilingInfo = 302,
    SpvOpGetDefaultQueue = 303,
    SpvOpBuildNDRange = 304,
    SpvOpImageSparseSampleImplicitLod = 305,
    SpvOpImageSparseSampleExplicitLod = 306,
    SpvOpImageSparseSampleDrefImplicitLod = 307,
    SpvOpImageSparseSampleDrefExplicitLod = 308,
    SpvOpImageSparseSampleProjImplicitLod = 309,
    SpvOpImageSparseSampleProjExplicitLod = 310,
    SpvOpImageSparseSampleProjDrefImplicitLod = 311,
    SpvOpImageSparseSampleProjDrefExplicitLod = 312,
    SpvOpImageSparseFetch = 313,
    SpvOpImageSparseGather = 314,
    SpvOpImageSparseDrefGather = 315,
    SpvOpImageSparseTexelsResident = 316,
    SpvOpNoLine = 317,
    SpvOpAtomicFlagTestAndSet = 318,
    SpvOpAtomicFlagClear = 319,
    SpvOpImageSparseRead = 320,
    SpvOpSizeOf = 321,
    SpvOpTypePipeStorage = 322,
    SpvOpConstantPipeStorage = 323,
    SpvOpCreatePipeFromPipeStorage = 324,
    SpvOpGetKernelLocalSizeForSubgroupCount = 325,
    SpvOpGetKernelMaxNumSubgroups = 326,
    SpvOpTypeNamedBarrier = 327,
    SpvOpNamedBarrierInitialize = 328,
    SpvOpMemoryNamedBarrier = 329,
    SpvOpModuleProcessed = 330,
    SpvOpExecutionModeId = 331,
    SpvOpDecorateId = 332,
    SpvOpGroupNonUniformElect = 333,
    SpvOpGroupNonUniformAll = 334,
    SpvOpGroupNonUniformAny = 335,
    SpvOpGroupNonUniformAllEqual = 336,
    SpvOpGroupNonUniformBroadcast = 337,
    SpvOpGroupNonUniformBroadcastFirst = 338,
    SpvOpGroupNonUniformBallot = 339,
    SpvOpGroupNonUniformInverseBallot = 340,
    SpvOpGroupNonUniformBallotBitExtract = 341,
    SpvOpGroupNonUniformBallotBitCount = 342,
    SpvOpGroupNonUniformBallotFindLSB = 343,
    SpvOpGroupNonUniformBallotFindMSB = 344,
    SpvOpGroupNonUniformShuffle = 345,
    SpvOpGroupNonUniformShuffleXor = 346,
    SpvOpGroupNonUniformShuffleUp = 347,
    SpvOpGroupNonUniformShuffleDown = 348,
    SpvOpGroupNonUniformIAdd = 349,
    SpvOpGroupNonUniformFAdd = 350,
    SpvOpGroupNonUniformIMul = 351,
    SpvOpGroupNonUniformFMul = 352,
    SpvOpGroupNonUniformSMin = 353,
    SpvOpGroupNonUniformUMin = 354,
    SpvOpGroupNonUniformFMin = 355,
    SpvOpGroupNonUniformSMax = 356,
    SpvOpGroupNonUniformUMax = 357,
    SpvOpGroupNonUniformFMax = 358,
    SpvOpGroupNonUniformBitwiseAnd = 359,
    SpvOpGroupNonUniformBitwiseOr = 360,
    SpvOpGroupNonUniformBitwiseXor = 361,
    SpvOpGroupNonUniformLogicalAnd = 362,
    SpvOpGroupNonUniformLogicalOr = 363,
    SpvOpGroupNonUniformLogicalXor = 364,
    SpvOpGroupNonUniformQuadBroadcast = 365,
    SpvOpGroupNonUniformQuadSwap = 366,
    SpvOpCopyLogical = 400,
    SpvOpPtrEqual = 401,
    SpvOpPtrNotEqual = 402,
    SpvOpPtrDiff = 403,
    SpvOpColorAttachmentReadEXT = 4160,
    SpvOpDepthAttachmentReadEXT = 4161,
    SpvOpStencilAttachmentReadEXT = 4162,
    SpvOpTerminateInvocation = 4416,
    SpvOpTypeUntypedPointerKHR = 4417,
    SpvOpUntypedVariableKHR = 4418,
    SpvOpUntypedAccessChainKHR = 4419,
    SpvOpUntypedInBoundsAccessChainKHR = 4420,
    SpvOpSubgroupBallotKHR = 4421,
    SpvOpSubgroupFirstInvocationKHR = 4422,
    SpvOpUntypedPtrAccessChainKHR = 4423,
    SpvOpUntypedInBoundsPtrAccessChainKHR = 4424,
    SpvOpUntypedArrayLengthKHR = 4425,
    SpvOpUntypedPrefetchKHR = 4426,
    SpvOpSubgroupAllKHR = 4428,
    SpvOpSubgroupAnyKHR = 4429,
    SpvOpSubgroupAllEqualKHR = 4430,
    SpvOpGroupNonUniformRotateKHR = 4431,
    SpvOpSubgroupReadInvocationKHR = 4432,
    SpvOpExtInstWithForwardRefsKHR = 4433,
    SpvOpTraceRayKHR = 4445,
    SpvOpExecuteCallableKHR = 4446,
    SpvOpConvertUToAccelerationStructureKHR = 4447,
    SpvOpIgnoreIntersectionKHR = 4448,
    SpvOpTerminateRayKHR = 4449,
    SpvOpSDot = 4450,
    SpvOpSDotKHR = 4450,
    SpvOpUDot = 4451,
    SpvOpUDotKHR = 4451,
    SpvOpSUDot = 4452,
    SpvOpSUDotKHR = 4452,
    SpvOpSDotAccSat = 4453,
    SpvOpSDotAccSatKHR = 4453,
    SpvOpUDotAccSat = 4454,
    SpvOpUDotAccSatKHR = 4454,
    SpvOpSUDotAccSat = 4455,
    SpvOpSUDotAccSatKHR = 4455,
    SpvOpTypeCooperativeMatrixKHR = 4456,
    SpvOpCooperativeMatrixLoadKHR = 4457,
    SpvOpCooperativeMatrixStoreKHR = 4458,
    SpvOpCooperativeMatrixMulAddKHR = 4459,
    SpvOpCooperativeMatrixLengthKHR = 4460,
    SpvOpConstantCompositeReplicateEXT = 4461,
    SpvOpSpecConstantCompositeReplicateEXT = 4462,
    SpvOpCompositeConstructReplicateEXT = 4463,
    SpvOpTypeRayQueryKHR = 4472,
    SpvOpRayQueryInitializeKHR = 4473,
    SpvOpRayQueryTerminateKHR = 4474,
    SpvOpRayQueryGenerateIntersectionKHR = 4475,
    SpvOpRayQueryConfirmIntersectionKHR = 4476,
    SpvOpRayQueryProceedKHR = 4477,
    SpvOpRayQueryGetIntersectionTypeKHR = 4479,
    SpvOpImageSampleWeightedQCOM = 4480,
    SpvOpImageBoxFilterQCOM = 4481,
    SpvOpImageBlockMatchSSDQCOM = 4482,
    SpvOpImageBlockMatchSADQCOM = 4483,
    SpvOpImageBlockMatchWindowSSDQCOM = 4500,
    SpvOpImageBlockMatchWindowSADQCOM = 4501,
    SpvOpImageBlockMatchGatherSSDQCOM = 4502,
    SpvOpImageBlockMatchGatherSADQCOM = 4503,
    SpvOpGroupIAddNonUniformAMD = 5000,
    SpvOpGroupFAddNonUniformAMD = 5001,
    SpvOpGroupFMinNonUniformAMD = 5002,
    SpvOpGroupUMinNonUniformAMD = 5003,
    SpvOpGroupSMinNonUniformAMD = 5004,
    SpvOpGroupFMaxNonUniformAMD = 5005,
    SpvOpGroupUMaxNonUniformAMD = 5006,
    SpvOpGroupSMaxNonUniformAMD = 5007,
    SpvOpFragmentMaskFetchAMD = 5011,
    SpvOpFragmentFetchAMD = 5012,
    SpvOpReadClockKHR = 5056,
    SpvOpFinalizeNodePayloadsAMDX = 5075,
    SpvOpFinishWritingNodePayloadAMDX = 5078,
    SpvOpInitializeNodePayloadsAMDX = 5090,
    SpvOpGroupNonUniformQuadAllKHR = 5110,
    SpvOpGroupNonUniformQuadAnyKHR = 5111,
    SpvOpHitObjectRecordHitMotionNV = 5249,
    SpvOpHitObjectRecordHitWithIndexMotionNV = 5250,
    SpvOpHitObjectRecordMissMotionNV = 5251,
    SpvOpHitObjectGetWorldToObjectNV = 5252,
    SpvOpHitObjectGetObjectToWorldNV = 5253,
    SpvOpHitObjectGetObjectRayDirectionNV = 5254,
    SpvOpHitObjectGetObjectRayOriginNV = 5255,
    SpvOpHitObjectTraceRayMotionNV = 5256,
    SpvOpHitObjectGetShaderRecordBufferHandleNV = 5257,
    SpvOpHitObjectGetShaderBindingTableRecordIndexNV = 5258,
    SpvOpHitObjectRecordEmptyNV = 5259,
    SpvOpHitObjectTraceRayNV = 5260,
    SpvOpHitObjectRecordHitNV = 5261,
    SpvOpHitObjectRecordHitWithIndexNV = 5262,
    SpvOpHitObjectRecordMissNV = 5263,
    SpvOpHitObjectExecuteShaderNV = 5264,
    SpvOpHitObjectGetCurrentTimeNV = 5265,
    SpvOpHitObjectGetAttributesNV = 5266,
    SpvOpHitObjectGetHitKindNV = 5267,
    SpvOpHitObjectGetPrimitiveIndexNV = 5268,
    SpvOpHitObjectGetGeometryIndexNV = 5269,
    SpvOpHitObjectGetInstanceIdNV = 5270,
    SpvOpHitObjectGetInstanceCustomIndexNV = 5271,
    SpvOpHitObjectGetWorldRayDirectionNV = 5272,
    SpvOpHitObjectGetWorldRayOriginNV = 5273,
    SpvOpHitObjectGetRayTMaxNV = 5274,
    SpvOpHitObjectGetRayTMinNV = 5275,
    SpvOpHitObjectIsEmptyNV = 5276,
    SpvOpHitObjectIsHitNV = 5277,
    SpvOpHitObjectIsMissNV = 5278,
    SpvOpReorderThreadWithHitObjectNV = 5279,
    SpvOpReorderThreadWithHintNV = 5280,
    SpvOpTypeHitObjectNV = 5281,
    SpvOpImageSampleFootprintNV = 5283,
    SpvOpEmitMeshTasksEXT = 5294,
    SpvOpSetMeshOutputsEXT = 5295,
    SpvOpGroupNonUniformPartitionNV = 5296,
    SpvOpWritePackedPrimitiveIndices4x8NV = 5299,
    SpvOpFetchMicroTriangleVertexPositionNV = 5300,
    SpvOpFetchMicroTriangleVertexBarycentricNV = 5301,
    SpvOpReportIntersectionKHR = 5334,
    SpvOpReportIntersectionNV = 5334,
    SpvOpIgnoreIntersectionNV = 5335,
    SpvOpTerminateRayNV = 5336,
    SpvOpTraceNV = 5337,
    SpvOpTraceMotionNV = 5338,
    SpvOpTraceRayMotionNV = 5339,
    SpvOpRayQueryGetIntersectionTriangleVertexPositionsKHR = 5340,
    SpvOpTypeAccelerationStructureKHR = 5341,
    SpvOpTypeAccelerationStructureNV = 5341,
    SpvOpExecuteCallableNV = 5344,
    SpvOpTypeCooperativeMatrixNV = 5358,
    SpvOpCooperativeMatrixLoadNV = 5359,
    SpvOpCooperativeMatrixStoreNV = 5360,
    SpvOpCooperativeMatrixMulAddNV = 5361,
    SpvOpCooperativeMatrixLengthNV = 5362,
    SpvOpBeginInvocationInterlockEXT = 5364,
    SpvOpEndInvocationInterlockEXT = 5365,
    SpvOpDemoteToHelperInvocation = 5380,
    SpvOpDemoteToHelperInvocationEXT = 5380,
    SpvOpIsHelperInvocationEXT = 5381,
    SpvOpConvertUToImageNV = 5391,
    SpvOpConvertUToSamplerNV = 5392,
    SpvOpConvertImageToUNV = 5393,
    SpvOpConvertSamplerToUNV = 5394,
    SpvOpConvertUToSampledImageNV = 5395,
    SpvOpConvertSampledImageToUNV = 5396,
    SpvOpSamplerImageAddressingModeNV = 5397,
    SpvOpRawAccessChainNV = 5398,
    SpvOpSubgroupShuffleINTEL = 5571,
    SpvOpSubgroupShuffleDownINTEL = 5572,
    SpvOpSubgroupShuffleUpINTEL = 5573,
    SpvOpSubgroupShuffleXorINTEL = 5574,
    SpvOpSubgroupBlockReadINTEL = 5575,
    SpvOpSubgroupBlockWriteINTEL = 5576,
    SpvOpSubgroupImageBlockReadINTEL = 5577,
    SpvOpSubgroupImageBlockWriteINTEL = 5578,
    SpvOpSubgroupImageMediaBlockReadINTEL = 5580,
    SpvOpSubgroupImageMediaBlockWriteINTEL = 5581,
    SpvOpUCountLeadingZerosINTEL = 5585,
    SpvOpUCountTrailingZerosINTEL = 5586,
    SpvOpAbsISubINTEL = 5587,
    SpvOpAbsUSubINTEL = 5588,
    SpvOpIAddSatINTEL = 5589,
    SpvOpUAddSatINTEL = 5590,
    SpvOpIAverageINTEL = 5591,
    SpvOpUAverageINTEL = 5592,
    SpvOpIAverageRoundedINTEL = 5593,
    SpvOpUAverageRoundedINTEL = 5594,
    SpvOpISubSatINTEL = 5595,
    SpvOpUSubSatINTEL = 5596,
    SpvOpIMul32x16INTEL = 5597,
    SpvOpUMul32x16INTEL = 5598,
    SpvOpConstantFunctionPointerINTEL = 5600,
    SpvOpFunctionPointerCallINTEL = 5601,
    SpvOpAsmTargetINTEL = 5609,
    SpvOpAsmINTEL = 5610,
    SpvOpAsmCallINTEL = 5611,
    SpvOpAtomicFMinEXT = 5614,
    SpvOpAtomicFMaxEXT = 5615,
    SpvOpAssumeTrueKHR = 5630,
    SpvOpExpectKHR = 5631,
    SpvOpDecorateString = 5632,
    SpvOpDecorateStringGOOGLE = 5632,
    SpvOpMemberDecorateString = 5633,
    SpvOpMemberDecorateStringGOOGLE = 5633,
    SpvOpVmeImageINTEL = 5699,
    SpvOpTypeVmeImageINTEL = 5700,
    SpvOpTypeAvcImePayloadINTEL = 5701,
    SpvOpTypeAvcRefPayloadINTEL = 5702,
    SpvOpTypeAvcSicPayloadINTEL = 5703,
    SpvOpTypeAvcMcePayloadINTEL = 5704,
    SpvOpTypeAvcMceResultINTEL = 5705,
    SpvOpTypeAvcImeResultINTEL = 5706,
    SpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL = 5707,
    SpvOpTypeAvcImeResultDualReferenceStreamoutINTEL = 5708,
    SpvOpTypeAvcImeSingleReferenceStreaminINTEL = 5709,
    SpvOpTypeAvcImeDualReferenceStreaminINTEL = 5710,
    SpvOpTypeAvcRefResultINTEL = 5711,
    SpvOpTypeAvcSicResultINTEL = 5712,
    SpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL = 5713,
    SpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL = 5714,
    SpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL = 5715,
    SpvOpSubgroupAvcMceSetInterShapePenaltyINTEL = 5716,
    SpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL = 5717,
    SpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL = 5718,
    SpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL = 5719,
    SpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL = 5720,
    SpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL = 5721,
    SpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL = 5722,
    SpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL = 5723,
    SpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL = 5724,
    SpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL = 5725,
    SpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL = 5726,
    SpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL = 5727,
    SpvOpSubgroupAvcMceSetAcOnlyHaarINTEL = 5728,
    SpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL = 5729,
    SpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL = 5730,
    SpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL = 5731,
    SpvOpSubgroupAvcMceConvertToImePayloadINTEL = 5732,
    SpvOpSubgroupAvcMceConvertToImeResultINTEL = 5733,
    SpvOpSubgroupAvcMceConvertToRefPayloadINTEL = 5734,
    SpvOpSubgroupAvcMceConvertToRefResultINTEL = 5735,
    SpvOpSubgroupAvcMceConvertToSicPayloadINTEL = 5736,
    SpvOpSubgroupAvcMceConvertToSicResultINTEL = 5737,
    SpvOpSubgroupAvcMceGetMotionVectorsINTEL = 5738,
    SpvOpSubgroupAvcMceGetInterDistortionsINTEL = 5739,
    SpvOpSubgroupAvcMceGetBestInterDistortionsINTEL = 5740,
    SpvOpSubgroupAvcMceGetInterMajorShapeINTEL = 5741,
    SpvOpSubgroupAvcMceGetInterMinorShapeINTEL = 5742,
    SpvOpSubgroupAvcMceGetInterDirectionsINTEL = 5743,
    SpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL = 5744,
    SpvOpSubgroupAvcMceGetInterReferenceIdsINTEL = 5745,
    SpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL = 5746,
    SpvOpSubgroupAvcImeInitializeINTEL = 5747,
    SpvOpSubgroupAvcImeSetSingleReferenceINTEL = 5748,
    SpvOpSubgroupAvcImeSetDualReferenceINTEL = 5749,
    SpvOpSubgroupAvcImeRefWindowSizeINTEL = 5750,
    SpvOpSubgroupAvcImeAdjustRefOffsetINTEL = 5751,
    SpvOpSubgroupAvcImeConvertToMcePayloadINTEL = 5752,
    SpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL = 5753,
    SpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL = 5754,
    SpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL = 5755,
    SpvOpSubgroupAvcImeSetWeightedSadINTEL = 5756,
    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL = 5757,
    SpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL = 5758,
    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL = 5759,
    SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL = 5760,
    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL = 5761,
    SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL = 5762,
    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL = 5763,
    SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL = 5764,
    SpvOpSubgroupAvcImeConvertToMceResultINTEL = 5765,
    SpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL = 5766,
    SpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL = 5767,
    SpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL = 5768,
    SpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL = 5769,
    SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL = 5770,
    SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL = 5771,
    SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL = 5772,
    SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL = 5773,
    SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL = 5774,
    SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL = 5775,
    SpvOpSubgroupAvcImeGetBorderReachedINTEL = 5776,
    SpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL = 5777,
    SpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL = 5778,
    SpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL = 5779,
    SpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL = 5780,
    SpvOpSubgroupAvcFmeInitializeINTEL = 5781,
    SpvOpSubgroupAvcBmeInitializeINTEL = 5782,
    SpvOpSubgroupAvcRefConvertToMcePayloadINTEL = 5783,
    SpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL = 5784,
    SpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL = 5785,
    SpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL = 5786,
    SpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL = 5787,
    SpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL = 5788,
    SpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL = 5789,
    SpvOpSubgroupAvcRefConvertToMceResultINTEL = 5790,
    SpvOpSubgroupAvcSicInitializeINTEL = 5791,
    SpvOpSubgroupAvcSicConfigureSkcINTEL = 5792,
    SpvOpSubgroupAvcSicConfigureIpeLumaINTEL = 5793,
    SpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL = 5794,
    SpvOpSubgroupAvcSicGetMotionVectorMaskINTEL = 5795,
    SpvOpSubgroupAvcSicConvertToMcePayloadINTEL = 5796,
    SpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL = 5797,
    SpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL = 5798,
    SpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL = 5799,
    SpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL = 5800,
    SpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL = 5801,
    SpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL = 5802,
    SpvOpSubgroupAvcSicEvaluateIpeINTEL = 5803,
    SpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL = 5804,
    SpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL = 5805,
    SpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL = 5806,
    SpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL = 5807,
    SpvOpSubgroupAvcSicConvertToMceResultINTEL = 5808,
    SpvOpSubgroupAvcSicGetIpeLumaShapeINTEL = 5809,
    SpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL = 5810,
    SpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL = 5811,
    SpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL = 5812,
    SpvOpSubgroupAvcSicGetIpeChromaModeINTEL = 5813,
    SpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL = 5814,
    SpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL = 5815,
    SpvOpSubgroupAvcSicGetInterRawSadsINTEL = 5816,
    SpvOpVariableLengthArrayINTEL = 5818,
    SpvOpSaveMemoryINTEL = 5819,
    SpvOpRestoreMemoryINTEL = 5820,
    SpvOpArbitraryFloatSinCosPiINTEL = 5840,
    SpvOpArbitraryFloatCastINTEL = 5841,
    SpvOpArbitraryFloatCastFromIntINTEL = 5842,
    SpvOpArbitraryFloatCastToIntINTEL = 5843,
    SpvOpArbitraryFloatAddINTEL = 5846,
    SpvOpArbitraryFloatSubINTEL = 5847,
    SpvOpArbitraryFloatMulINTEL = 5848,
    SpvOpArbitraryFloatDivINTEL = 5849,
    SpvOpArbitraryFloatGTINTEL = 5850,
    SpvOpArbitraryFloatGEINTEL = 5851,
    SpvOpArbitraryFloatLTINTEL = 5852,
    SpvOpArbitraryFloatLEINTEL = 5853,
    SpvOpArbitraryFloatEQINTEL = 5854,
    SpvOpArbitraryFloatRecipINTEL = 5855,
    SpvOpArbitraryFloatRSqrtINTEL = 5856,
    SpvOpArbitraryFloatCbrtINTEL = 5857,
    SpvOpArbitraryFloatHypotINTEL = 5858,
    SpvOpArbitraryFloatSqrtINTEL = 5859,
    SpvOpArbitraryFloatLogINTEL = 5860,
    SpvOpArbitraryFloatLog2INTEL = 5861,
    SpvOpArbitraryFloatLog10INTEL = 5862,
    SpvOpArbitraryFloatLog1pINTEL = 5863,
    SpvOpArbitraryFloatExpINTEL = 5864,
    SpvOpArbitraryFloatExp2INTEL = 5865,
    SpvOpArbitraryFloatExp10INTEL = 5866,
    SpvOpArbitraryFloatExpm1INTEL = 5867,
    SpvOpArbitraryFloatSinINTEL = 5868,
    SpvOpArbitraryFloatCosINTEL = 5869,
    SpvOpArbitraryFloatSinCosINTEL = 5870,
    SpvOpArbitraryFloatSinPiINTEL = 5871,
    SpvOpArbitraryFloatCosPiINTEL = 5872,
    SpvOpArbitraryFloatASinINTEL = 5873,
    SpvOpArbitraryFloatASinPiINTEL = 5874,
    SpvOpArbitraryFloatACosINTEL = 5875,
    SpvOpArbitraryFloatACosPiINTEL = 5876,
    SpvOpArbitraryFloatATanINTEL = 5877,
    SpvOpArbitraryFloatATanPiINTEL = 5878,
    SpvOpArbitraryFloatATan2INTEL = 5879,
    SpvOpArbitraryFloatPowINTEL = 5880,
    SpvOpArbitraryFloatPowRINTEL = 5881,
    SpvOpArbitraryFloatPowNINTEL = 5882,
    SpvOpLoopControlINTEL = 5887,
    SpvOpAliasDomainDeclINTEL = 5911,
    SpvOpAliasScopeDeclINTEL = 5912,
    SpvOpAliasScopeListDeclINTEL = 5913,
    SpvOpFixedSqrtINTEL = 5923,
    SpvOpFixedRecipINTEL = 5924,
    SpvOpFixedRsqrtINTEL = 5925,
    SpvOpFixedSinINTEL = 5926,
    SpvOpFixedCosINTEL = 5927,
    SpvOpFixedSinCosINTEL = 5928,
    SpvOpFixedSinPiINTEL = 5929,
    SpvOpFixedCosPiINTEL = 5930,
    SpvOpFixedSinCosPiINTEL = 5931,
    SpvOpFixedLogINTEL = 5932,
    SpvOpFixedExpINTEL = 5933,
    SpvOpPtrCastToCrossWorkgroupINTEL = 5934,
    SpvOpCrossWorkgroupCastToPtrINTEL = 5938,
    SpvOpReadPipeBlockingINTEL = 5946,
    SpvOpWritePipeBlockingINTEL = 5947,
    SpvOpFPGARegINTEL = 5949,
    SpvOpRayQueryGetRayTMinKHR = 6016,
    SpvOpRayQueryGetRayFlagsKHR = 6017,
    SpvOpRayQueryGetIntersectionTKHR = 6018,
    SpvOpRayQueryGetIntersectionInstanceCustomIndexKHR = 6019,
    SpvOpRayQueryGetIntersectionInstanceIdKHR = 6020,
    SpvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR = 6021,
    SpvOpRayQueryGetIntersectionGeometryIndexKHR = 6022,
    SpvOpRayQueryGetIntersectionPrimitiveIndexKHR = 6023,
    SpvOpRayQueryGetIntersectionBarycentricsKHR = 6024,
    SpvOpRayQueryGetIntersectionFrontFaceKHR = 6025,
    SpvOpRayQueryGetIntersectionCandidateAABBOpaqueKHR = 6026,
    SpvOpRayQueryGetIntersectionObjectRayDirectionKHR = 6027,
    SpvOpRayQueryGetIntersectionObjectRayOriginKHR = 6028,
    SpvOpRayQueryGetWorldRayDirectionKHR = 6029,
    SpvOpRayQueryGetWorldRayOriginKHR = 6030,
    SpvOpRayQueryGetIntersectionObjectToWorldKHR = 6031,
    SpvOpRayQueryGetIntersectionWorldToObjectKHR = 6032,
    SpvOpAtomicFAddEXT = 6035,
    SpvOpTypeBufferSurfaceINTEL = 6086,
    SpvOpTypeStructContinuedINTEL = 6090,
    SpvOpConstantCompositeContinuedINTEL = 6091,
    SpvOpSpecConstantCompositeContinuedINTEL = 6092,
    SpvOpCompositeConstructContinuedINTEL = 6096,
    SpvOpConvertFToBF16INTEL = 6116,
    SpvOpConvertBF16ToFINTEL = 6117,
    SpvOpControlBarrierArriveINTEL = 6142,
    SpvOpControlBarrierWaitINTEL = 6143,
    SpvOpSubgroupBlockPrefetchINTEL = 6221,
    SpvOpGroupIMulKHR = 6401,
    SpvOpGroupFMulKHR = 6402,
    SpvOpGroupBitwiseAndKHR = 6403,
    SpvOpGroupBitwiseOrKHR = 6404,
    SpvOpGroupBitwiseXorKHR = 6405,
    SpvOpGroupLogicalAndKHR = 6406,
    SpvOpGroupLogicalOrKHR = 6407,
    SpvOpGroupLogicalXorKHR = 6408,
    SpvOpMaskedGatherINTEL = 6428,
    SpvOpMaskedScatterINTEL = 6429,
    SpvOpMax = 0x7fffffff,
} SpvOp;

#endif


/* End replacement for spirv_inc.bt */

typedef uint32 SpvWord_t;

typedef struct SpvOperandImageOperands_ (int64 endOffset) {
    SpvImageOperandsMask value;
} SpvOperandImageOperands_t;

typedef struct SpvOperandFPFastMathMode_ (int64 endOffset) {
    SpvFPFastMathModeMask value;
} SpvOperandFPFastMathMode_t;

typedef struct SpvOperandSelectionControl_ (int64 endOffset) {
    SpvSelectionControlMask value;
} SpvOperandSelectionControl_t;

typedef struct SpvOperandLoopControl_ (int64 endOffset) {
    SpvLoopControlMask value;
} SpvOperandLoopControl_t;

typedef struct SpvOperandFunctionControl_ (int64 endOffset) {
    SpvFunctionControlMask value;
} SpvOperandFunctionControl_t;

typedef struct SpvOperandMemorySemantics_ (int64 endOffset) {
    SpvMemorySemanticsMask value;
} SpvOperandMemorySemantics_t;

typedef struct SpvOperandMemoryAccess_ (int64 endOffset) {
    SpvMemoryAccessMask value;
} SpvOperandMemoryAccess_t;

typedef struct SpvOperandKernelProfilingInfo_ (int64 endOffset) {
    SpvKernelProfilingInfoMask value;
} SpvOperandKernelProfilingInfo_t;

typedef struct SpvOperandRayFlags_ (int64 endOffset) {
    SpvRayFlagsMask value;
} SpvOperandRayFlags_t;

typedef struct SpvOperandFragmentShadingRate_ (int64 endOffset) {
    SpvFragmentShadingRateMask value;
} SpvOperandFragmentShadingRate_t;

typedef struct SpvOperandRawAccessChainOperands_ (int64 endOffset) {
    SpvRawAccessChainOperandsMask value;
} SpvOperandRawAccessChainOperands_t;

typedef struct SpvOperandSourceLanguage_ (int64 endOffset) {
    SpvSourceLanguage value;
} SpvOperandSourceLanguage_t;

typedef struct SpvOperandExecutionModel_ (int64 endOffset) {
    SpvExecutionModel value;
} SpvOperandExecutionModel_t;

typedef struct SpvOperandAddressingModel_ (int64 endOffset) {
    SpvAddressingModel value;
} SpvOperandAddressingModel_t;

typedef struct SpvOperandMemoryModel_ (int64 endOffset) {
    SpvMemoryModel value;
} SpvOperandMemoryModel_t;

typedef struct SpvOperandExecutionMode_ (int64 endOffset) {
    SpvExecutionMode value;
} SpvOperandExecutionMode_t;

typedef struct SpvOperandStorageClass_ (int64 endOffset) {
    SpvStorageClass value;
} SpvOperandStorageClass_t;

typedef struct SpvOperandDim_ (int64 endOffset) {
    SpvDim value;
} SpvOperandDim_t;

typedef struct SpvOperandSamplerAddressingMode_ (int64 endOffset) {
    SpvSamplerAddressingMode value;
} SpvOperandSamplerAddressingMode_t;

typedef struct SpvOperandSamplerFilterMode_ (int64 endOffset) {
    SpvSamplerFilterMode value;
} SpvOperandSamplerFilterMode_t;

typedef struct SpvOperandImageFormat_ (int64 endOffset) {
    SpvImageFormat value;
} SpvOperandImageFormat_t;

typedef struct SpvOperandImageChannelOrder_ (int64 endOffset) {
    SpvImageChannelOrder value;
} SpvOperandImageChannelOrder_t;

typedef struct SpvOperandImageChannelDataType_ (int64 endOffset) {
    SpvImageChannelDataType value;
} SpvOperandImageChannelDataType_t;

typedef struct SpvOperandFPRoundingMode_ (int64 endOffset) {
    SpvFPRoundingMode value;
} SpvOperandFPRoundingMode_t;

typedef struct SpvOperandFPDenormMode_ (int64 endOffset) {
    SpvFPDenormMode value;
} SpvOperandFPDenormMode_t;

typedef struct SpvOperandQuantizationModes_ (int64 endOffset) {
    SpvQuantizationModes value;
} SpvOperandQuantizationModes_t;

typedef struct SpvOperandFPOperationMode_ (int64 endOffset) {
    SpvFPOperationMode value;
} SpvOperandFPOperationMode_t;

typedef struct SpvOperandOverflowModes_ (int64 endOffset) {
    SpvOverflowModes value;
} SpvOperandOverflowModes_t;

typedef struct SpvOperandLinkageType_ (int64 endOffset) {
    SpvLinkageType value;
} SpvOperandLinkageType_t;

typedef struct SpvOperandAccessQualifier_ (int64 endOffset) {
    SpvAccessQualifier value;
} SpvOperandAccessQualifier_t;

typedef struct SpvOperandHostAccessQualifier_ (int64 endOffset) {
    SpvHostAccessQualifier value;
} SpvOperandHostAccessQualifier_t;

typedef struct SpvOperandFunctionParameterAttribute_ (int64 endOffset) {
    SpvFunctionParameterAttribute value;
} SpvOperandFunctionParameterAttribute_t;

typedef struct SpvOperandDecoration_ (int64 endOffset) {
    SpvDecoration value;
} SpvOperandDecoration_t;

typedef struct SpvOperandBuiltIn_ (int64 endOffset) {
    SpvBuiltIn value;
} SpvOperandBuiltIn_t;

typedef struct SpvOperandScope_ (int64 endOffset) {
    SpvScope value;
} SpvOperandScope_t;

typedef struct SpvOperandGroupOperation_ (int64 endOffset) {
    SpvGroupOperation value;
} SpvOperandGroupOperation_t;

typedef struct SpvOperandKernelEnqueueFlags_ (int64 endOffset) {
    SpvKernelEnqueueFlags value;
} SpvOperandKernelEnqueueFlags_t;

typedef struct SpvOperandCapability_ (int64 endOffset) {
    SpvCapability value;
} SpvOperandCapability_t;

typedef struct SpvOperandRayQueryIntersection_ (int64 endOffset) {
    SpvRayQueryIntersection value;
} SpvOperandRayQueryIntersection_t;

typedef struct SpvOperandRayQueryCommittedIntersectionType_ (int64 endOffset) {
    SpvRayQueryCommittedIntersectionType value;
} SpvOperandRayQueryCommittedIntersectionType_t;

typedef struct SpvOperandRayQueryCandidateIntersectionType_ (int64 endOffset) {
    SpvRayQueryCandidateIntersectionType value;
} SpvOperandRayQueryCandidateIntersectionType_t;

typedef struct SpvOperandPackedVectorFormat_ (int64 endOffset) {
    SpvPackedVectorFormat value;
} SpvOperandPackedVectorFormat_t;

typedef struct SpvOperandCooperativeMatrixOperands_ (int64 endOffset) {
    SpvCooperativeMatrixOperandsMask value;
} SpvOperandCooperativeMatrixOperands_t;

typedef struct SpvOperandCooperativeMatrixLayout_ (int64 endOffset) {
    SpvCooperativeMatrixLayout value;
} SpvOperandCooperativeMatrixLayout_t;

typedef struct SpvOperandCooperativeMatrixUse_ (int64 endOffset) {
    SpvCooperativeMatrixUse value;
} SpvOperandCooperativeMatrixUse_t;

typedef struct SpvOperandInitializationModeQualifier_ (int64 endOffset) {
    SpvInitializationModeQualifier value;
} SpvOperandInitializationModeQualifier_t;

typedef struct SpvOperandLoadCacheControl_ (int64 endOffset) {
    SpvLoadCacheControl value;
} SpvOperandLoadCacheControl_t;

typedef struct SpvOperandStoreCacheControl_ (int64 endOffset) {
    SpvStoreCacheControl value;
} SpvOperandStoreCacheControl_t;

typedef struct SpvOperandNamedMaximumNumberOfRegisters_ (int64 endOffset) {
    SpvNamedMaximumNumberOfRegisters value;
} SpvOperandNamedMaximumNumberOfRegisters_t;

typedef struct SpvOperandFPEncoding_ (int64 endOffset) {
    SpvFPEncoding value;
} SpvOperandFPEncoding_t;

typedef struct SpvOperandIdResultType_ (int64 endOffset) {
    SpvId value;
} SpvOperandIdResultType_t;

typedef struct SpvOperandIdResult_ (int64 endOffset) {
    SpvId value;
} SpvOperandIdResult_t;

typedef struct SpvOperandIdMemorySemantics_ (int64 endOffset) {
    SpvId value;
} SpvOperandIdMemorySemantics_t;

typedef struct SpvOperandIdScope_ (int64 endOffset) {
    SpvId value;
} SpvOperandIdScope_t;

typedef struct SpvOperandIdRef_ (int64 endOffset) {
    SpvId value;
} SpvOperandIdRef_t;

typedef struct SpvOperandLiteralInteger_ (int64 endOffset) {
    uint32 value;
} SpvOperandLiteralInteger_t;

typedef struct SpvOperandLiteralString_ (int64 endOffset) {
    string value;
    local int64 fpos = FTell();
    fpos = (fpos + sizeof(SpvWord_t) - 1) & ~(sizeof(SpvWord_t)-1);
    FSeek(fpos);
} SpvOperandLiteralString_t;

typedef struct SpvOperandLiteralFloat_ (int64 endOffset) {
    float value;
} SpvOperandLiteralFloat_t;

typedef struct SpvOperandLiteralContextDependentNumber_ (int64 endOffset) {
    local int64 fpos = FTell();
    local int64 len = endOffset - fpos;
    byte value[len];
} SpvOperandLiteralContextDependentNumber_t;

typedef struct SpvOperandLiteralExtInstInteger_ (int64 endOffset) {
    uint32 value;
} SpvOperandLiteralExtInstInteger_t;

typedef struct SpvOperandLiteralSpecConstantOpInteger_ (int64 endOffset) {
    uint32 value;
    local int64 fpos = FTell();
    local int64 len = endOffset - fpos;
    byte operands[len];
} SpvOperandLiteralSpecConstantOpInteger_t;

typedef struct SpvOperandPairLiteralIntegerIdRef_ (int64 endOffset) {
    SpvOperandLiteralInteger_t value0;
    SpvOperandIdRef_t value1;
} SpvOperandPairLiteralIntegerIdRef_t;

typedef struct SpvOperandPairIdRefLiteralInteger_ (int64 endOffset) {
    SpvOperandIdRef_t value0;
    SpvOperandLiteralInteger_t value1;
} SpvOperandPairIdRefLiteralInteger_t;

typedef struct SpvOperandPairIdRefIdRef_ (int64 endOffset) {
    SpvOperandIdRef_t value0;
    SpvOperandIdRef_t value1;
} SpvOperandPairIdRefIdRef_t;

void ParseOperandsSpvOpNop(int64 endOffset) {
}

void ParseOperandsSpvOpUndef(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpSourceContinued(int64 endOffset) {
    SpvOperandLiteralString_t operand0(endOffset);
}

void ParseOperandsSpvOpSource(int64 endOffset) {
    SpvOperandSourceLanguage_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand2(endOffset);
    }
    if (FTell() < endOffset) {
        SpvOperandLiteralString_t operand3(endOffset);
    }
}

void ParseOperandsSpvOpSourceExtension(int64 endOffset) {
    SpvOperandLiteralString_t operand0(endOffset);
}

void ParseOperandsSpvOpName(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandLiteralString_t operand1(endOffset);
}

void ParseOperandsSpvOpMemberName(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
    SpvOperandLiteralString_t operand2(endOffset);
}

void ParseOperandsSpvOpString(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandLiteralString_t operand1(endOffset);
}

void ParseOperandsSpvOpLine(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
    SpvOperandLiteralInteger_t operand2(endOffset);
}

void ParseOperandsSpvOpExtension(int64 endOffset) {
    SpvOperandLiteralString_t operand0(endOffset);
}

void ParseOperandsSpvOpExtInstImport(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandLiteralString_t operand1(endOffset);
}

void ParseOperandsSpvOpExtInst(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralExtInstInteger_t operand3(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic4(endOffset);
    }
}

void ParseOperandsSpvOpMemoryModel(int64 endOffset) {
    SpvOperandAddressingModel_t operand0(endOffset);
    SpvOperandMemoryModel_t operand1(endOffset);
}

void ParseOperandsSpvOpEntryPoint(int64 endOffset) {
    SpvOperandExecutionModel_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandLiteralString_t operand2(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic3(endOffset);
    }
}

void ParseOperandsSpvOpExecutionMode(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandExecutionMode_t operand1(endOffset);
}

void ParseOperandsSpvOpCapability(int64 endOffset) {
    SpvOperandCapability_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeVoid(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeBool(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeInt(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
    SpvOperandLiteralInteger_t operand2(endOffset);
}

void ParseOperandsSpvOpTypeFloat(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
    if (FTell() < endOffset) {
        SpvOperandFPEncoding_t operand2(endOffset);
    }
}

void ParseOperandsSpvOpTypeVector(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandLiteralInteger_t operand2(endOffset);
}

void ParseOperandsSpvOpTypeMatrix(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandLiteralInteger_t operand2(endOffset);
}

void ParseOperandsSpvOpTypeImage(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandDim_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandImageFormat_t operand7(endOffset);
    if (FTell() < endOffset) {
        SpvOperandAccessQualifier_t operand8(endOffset);
    }
}

void ParseOperandsSpvOpTypeSampler(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeSampledImage(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpTypeArray(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpTypeRuntimeArray(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpTypeStruct(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic1(endOffset);
    }
}

void ParseOperandsSpvOpTypeOpaque(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandLiteralString_t operand1(endOffset);
}

void ParseOperandsSpvOpTypePointer(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandStorageClass_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpTypeFunction(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic2(endOffset);
    }
}

void ParseOperandsSpvOpTypeEvent(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeDeviceEvent(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeReserveId(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeQueue(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypePipe(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandAccessQualifier_t operand1(endOffset);
}

void ParseOperandsSpvOpTypeForwardPointer(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandStorageClass_t operand1(endOffset);
}

void ParseOperandsSpvOpConstantTrue(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpConstantFalse(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpConstant(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandLiteralContextDependentNumber_t operand2(endOffset);
}

void ParseOperandsSpvOpConstantComposite(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic2(endOffset);
    }
}

void ParseOperandsSpvOpConstantSampler(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandSamplerAddressingMode_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandSamplerFilterMode_t operand4(endOffset);
}

void ParseOperandsSpvOpConstantNull(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpSpecConstantTrue(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpSpecConstantFalse(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpSpecConstant(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandLiteralContextDependentNumber_t operand2(endOffset);
}

void ParseOperandsSpvOpSpecConstantComposite(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic2(endOffset);
    }
}

void ParseOperandsSpvOpSpecConstantOp(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandLiteralSpecConstantOpInteger_t operand2(endOffset);
}

void ParseOperandsSpvOpFunction(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandFunctionControl_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFunctionParameter(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpFunctionEnd(int64 endOffset) {
}

void ParseOperandsSpvOpFunctionCall(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic3(endOffset);
    }
}

void ParseOperandsSpvOpVariable(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandStorageClass_t operand2(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand3(endOffset);
    }
}

void ParseOperandsSpvOpImageTexelPointer(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpLoad(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand3(endOffset);
    }
}

void ParseOperandsSpvOpStore(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand2(endOffset);
    }
}

void ParseOperandsSpvOpCopyMemory(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand2(endOffset);
    }
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand3(endOffset);
    }
}

void ParseOperandsSpvOpCopyMemorySized(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand3(endOffset);
    }
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpAccessChain(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic3(endOffset);
    }
}

void ParseOperandsSpvOpInBoundsAccessChain(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic3(endOffset);
    }
}

void ParseOperandsSpvOpPtrAccessChain(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic4(endOffset);
    }
}

void ParseOperandsSpvOpArrayLength(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
}

void ParseOperandsSpvOpGenericPtrMemSemantics(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpInBoundsPtrAccessChain(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic4(endOffset);
    }
}

void ParseOperandsSpvOpDecorate(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandDecoration_t operand1(endOffset);
}

void ParseOperandsSpvOpMemberDecorate(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
    SpvOperandDecoration_t operand2(endOffset);
}

void ParseOperandsSpvOpDecorationGroup(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpGroupDecorate(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic1(endOffset);
    }
}

void ParseOperandsSpvOpGroupMemberDecorate(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    while (FTell() < endOffset) {
        SpvOperandPairIdRefLiteralInteger_t operandVariadic1(endOffset);
    }
}

void ParseOperandsSpvOpVectorExtractDynamic(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpVectorInsertDynamic(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpVectorShuffle(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    while (FTell() < endOffset) {
        SpvOperandLiteralInteger_t operandVariadic4(endOffset);
    }
}

void ParseOperandsSpvOpCompositeConstruct(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic2(endOffset);
    }
}

void ParseOperandsSpvOpCompositeExtract(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    while (FTell() < endOffset) {
        SpvOperandLiteralInteger_t operandVariadic3(endOffset);
    }
}

void ParseOperandsSpvOpCompositeInsert(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    while (FTell() < endOffset) {
        SpvOperandLiteralInteger_t operandVariadic4(endOffset);
    }
}

void ParseOperandsSpvOpCopyObject(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpTranspose(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSampledImage(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpImageSampleImplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpImageSampleExplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandImageOperands_t operand4(endOffset);
}

void ParseOperandsSpvOpImageSampleDrefImplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpImageSampleDrefExplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandImageOperands_t operand5(endOffset);
}

void ParseOperandsSpvOpImageSampleProjImplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpImageSampleProjExplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandImageOperands_t operand4(endOffset);
}

void ParseOperandsSpvOpImageSampleProjDrefImplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpImageSampleProjDrefExplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandImageOperands_t operand5(endOffset);
}

void ParseOperandsSpvOpImageFetch(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpImageGather(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpImageDrefGather(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpImageRead(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpImageWrite(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand3(endOffset);
    }
}

void ParseOperandsSpvOpImage(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpImageQueryFormat(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpImageQueryOrder(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpImageQuerySizeLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpImageQuerySize(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpImageQueryLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpImageQueryLevels(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpImageQuerySamples(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertFToU(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertFToS(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertSToF(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertUToF(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpUConvert(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSConvert(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpFConvert(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpQuantizeToF16(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertPtrToU(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSatConvertSToU(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSatConvertUToS(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertUToPtr(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpPtrCastToGeneric(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpGenericCastToPtr(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpGenericCastToPtrExplicit(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandStorageClass_t operand3(endOffset);
}

void ParseOperandsSpvOpBitcast(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSNegate(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpFNegate(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpIAdd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFAdd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpISub(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFSub(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpIMul(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFMul(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUDiv(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSDiv(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFDiv(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUMod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSRem(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSMod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFRem(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFMod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpVectorTimesScalar(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpMatrixTimesScalar(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpVectorTimesMatrix(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpMatrixTimesVector(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpMatrixTimesMatrix(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpOuterProduct(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpDot(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpIAddCarry(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpISubBorrow(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUMulExtended(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSMulExtended(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpAny(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpAll(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpIsNan(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpIsInf(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpIsFinite(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpIsNormal(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSignBitSet(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpLessOrGreater(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpOrdered(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUnordered(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpLogicalEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpLogicalNotEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpLogicalOr(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpLogicalAnd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpLogicalNot(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSelect(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpIEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpINotEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUGreaterThan(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSGreaterThan(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUGreaterThanEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSGreaterThanEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpULessThan(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSLessThan(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpULessThanEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSLessThanEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFOrdEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFUnordEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFOrdNotEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFUnordNotEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFOrdLessThan(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFUnordLessThan(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFOrdGreaterThan(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFUnordGreaterThan(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFOrdLessThanEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFUnordLessThanEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFOrdGreaterThanEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFUnordGreaterThanEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpShiftRightLogical(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpShiftRightArithmetic(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpShiftLeftLogical(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpBitwiseOr(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpBitwiseXor(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpBitwiseAnd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpNot(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpBitFieldInsert(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpBitFieldSExtract(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpBitFieldUExtract(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpBitReverse(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpBitCount(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpDPdx(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpDPdy(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpFwidth(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpDPdxFine(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpDPdyFine(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpFwidthFine(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpDPdxCoarse(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpDPdyCoarse(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpFwidthCoarse(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpEmitVertex(int64 endOffset) {
}

void ParseOperandsSpvOpEndPrimitive(int64 endOffset) {
}

void ParseOperandsSpvOpEmitStreamVertex(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpEndStreamPrimitive(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpControlBarrier(int64 endOffset) {
    SpvOperandIdScope_t operand0(endOffset);
    SpvOperandIdScope_t operand1(endOffset);
    SpvOperandIdMemorySemantics_t operand2(endOffset);
}

void ParseOperandsSpvOpMemoryBarrier(int64 endOffset) {
    SpvOperandIdScope_t operand0(endOffset);
    SpvOperandIdMemorySemantics_t operand1(endOffset);
}

void ParseOperandsSpvOpAtomicLoad(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
}

void ParseOperandsSpvOpAtomicStore(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdScope_t operand1(endOffset);
    SpvOperandIdMemorySemantics_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpAtomicExchange(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicCompareExchange(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdMemorySemantics_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
}

void ParseOperandsSpvOpAtomicCompareExchangeWeak(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdMemorySemantics_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
}

void ParseOperandsSpvOpAtomicIIncrement(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
}

void ParseOperandsSpvOpAtomicIDecrement(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
}

void ParseOperandsSpvOpAtomicIAdd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicISub(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicSMin(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicUMin(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicSMax(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicUMax(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicAnd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicOr(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicXor(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpPhi(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    while (FTell() < endOffset) {
        SpvOperandPairIdRefIdRef_t operandVariadic2(endOffset);
    }
}

void ParseOperandsSpvOpLoopMerge(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandLoopControl_t operand2(endOffset);
}

void ParseOperandsSpvOpSelectionMerge(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandSelectionControl_t operand1(endOffset);
}

void ParseOperandsSpvOpLabel(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpBranch(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpBranchConditional(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    while (FTell() < endOffset) {
        SpvOperandLiteralInteger_t operandVariadic3(endOffset);
    }
}

void ParseOperandsSpvOpSwitch(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    while (FTell() < endOffset) {
        SpvOperandPairLiteralIntegerIdRef_t operandVariadic2(endOffset);
    }
}

void ParseOperandsSpvOpKill(int64 endOffset) {
}

void ParseOperandsSpvOpReturn(int64 endOffset) {
}

void ParseOperandsSpvOpReturnValue(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpUnreachable(int64 endOffset) {
}

void ParseOperandsSpvOpLifetimeStart(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
}

void ParseOperandsSpvOpLifetimeStop(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
}

void ParseOperandsSpvOpGroupAsyncCopy(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
}

void ParseOperandsSpvOpGroupWaitEvents(int64 endOffset) {
    SpvOperandIdScope_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpGroupAll(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupAny(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupBroadcast(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupIAdd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupFAdd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupFMin(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupUMin(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupSMin(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupFMax(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupUMax(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupSMax(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpReadPipe(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpWritePipe(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpReservedReadPipe(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
}

void ParseOperandsSpvOpReservedWritePipe(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
}

void ParseOperandsSpvOpReserveReadPipePackets(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpReserveWritePipePackets(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpCommitReadPipe(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpCommitWritePipe(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpIsValidReserveId(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpGetNumPipePackets(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGetMaxPipePackets(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupReserveReadPipePackets(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpGroupReserveWritePipePackets(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpGroupCommitReadPipe(int64 endOffset) {
    SpvOperandIdScope_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupCommitWritePipe(int64 endOffset) {
    SpvOperandIdScope_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpEnqueueMarker(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpEnqueueKernel(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic12(endOffset);
    }
}

void ParseOperandsSpvOpGetKernelNDrangeSubGroupCount(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpGetKernelNDrangeMaxSubGroupSize(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpGetKernelWorkGroupSize(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpGetKernelPreferredWorkGroupSizeMultiple(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpRetainEvent(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpReleaseEvent(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpCreateUserEvent(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpIsValidEvent(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSetUserEventStatus(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpCaptureEventProfilingInfo(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpGetDefaultQueue(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpBuildNDRange(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpImageSparseSampleImplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpImageSparseSampleExplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandImageOperands_t operand4(endOffset);
}

void ParseOperandsSpvOpImageSparseSampleDrefImplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpImageSparseSampleDrefExplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandImageOperands_t operand5(endOffset);
}

void ParseOperandsSpvOpImageSparseSampleProjImplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpImageSparseSampleProjExplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandImageOperands_t operand4(endOffset);
}

void ParseOperandsSpvOpImageSparseSampleProjDrefImplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpImageSparseSampleProjDrefExplicitLod(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandImageOperands_t operand5(endOffset);
}

void ParseOperandsSpvOpImageSparseFetch(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpImageSparseGather(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpImageSparseDrefGather(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpImageSparseTexelsResident(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpNoLine(int64 endOffset) {
}

void ParseOperandsSpvOpAtomicFlagTestAndSet(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
}

void ParseOperandsSpvOpAtomicFlagClear(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdScope_t operand1(endOffset);
    SpvOperandIdMemorySemantics_t operand2(endOffset);
}

void ParseOperandsSpvOpImageSparseRead(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpSizeOf(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpTypePipeStorage(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpConstantPipeStorage(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandLiteralInteger_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
}

void ParseOperandsSpvOpCreatePipeFromPipeStorage(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpGetKernelLocalSizeForSubgroupCount(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpGetKernelMaxNumSubgroups(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpTypeNamedBarrier(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpNamedBarrierInitialize(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpMemoryNamedBarrier(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdScope_t operand1(endOffset);
    SpvOperandIdMemorySemantics_t operand2(endOffset);
}

void ParseOperandsSpvOpModuleProcessed(int64 endOffset) {
    SpvOperandLiteralString_t operand0(endOffset);
}

void ParseOperandsSpvOpExecutionModeId(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandExecutionMode_t operand1(endOffset);
}

void ParseOperandsSpvOpDecorateId(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandDecoration_t operand1(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformElect(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformAll(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformAny(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformAllEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformBroadcast(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformBroadcastFirst(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformBallot(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformInverseBallot(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformBallotBitExtract(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformBallotBitCount(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformBallotFindLSB(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformBallotFindMSB(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformShuffle(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformShuffleXor(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformShuffleUp(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformShuffleDown(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformIAdd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformFAdd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformIMul(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformFMul(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformSMin(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformUMin(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformFMin(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformSMax(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformUMax(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformFMax(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformBitwiseAnd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformBitwiseOr(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformBitwiseXor(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformLogicalAnd(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformLogicalOr(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformLogicalXor(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpGroupNonUniformQuadBroadcast(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformQuadSwap(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpCopyLogical(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpPtrEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpPtrNotEqual(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpPtrDiff(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpColorAttachmentReadEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand3(endOffset);
    }
}

void ParseOperandsSpvOpDepthAttachmentReadEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand2(endOffset);
    }
}

void ParseOperandsSpvOpStencilAttachmentReadEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand2(endOffset);
    }
}

void ParseOperandsSpvOpTerminateInvocation(int64 endOffset) {
}

void ParseOperandsSpvOpTypeUntypedPointerKHR(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandStorageClass_t operand1(endOffset);
}

void ParseOperandsSpvOpUntypedVariableKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandStorageClass_t operand2(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand3(endOffset);
    }
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpUntypedAccessChainKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic4(endOffset);
    }
}

void ParseOperandsSpvOpUntypedInBoundsAccessChainKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic4(endOffset);
    }
}

void ParseOperandsSpvOpSubgroupBallotKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupFirstInvocationKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpUntypedPtrAccessChainKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic5(endOffset);
    }
}

void ParseOperandsSpvOpUntypedInBoundsPtrAccessChainKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic5(endOffset);
    }
}

void ParseOperandsSpvOpUntypedArrayLengthKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
}

void ParseOperandsSpvOpUntypedPrefetchKHR(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand2(endOffset);
    }
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand3(endOffset);
    }
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpSubgroupAllKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAnyKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAllEqualKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformRotateKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpSubgroupReadInvocationKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpExtInstWithForwardRefsKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralExtInstInteger_t operand3(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic4(endOffset);
    }
}

void ParseOperandsSpvOpTraceRayKHR(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
}

void ParseOperandsSpvOpExecuteCallableKHR(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpConvertUToAccelerationStructureKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpIgnoreIntersectionKHR(int64 endOffset) {
}

void ParseOperandsSpvOpTerminateRayKHR(int64 endOffset) {
}

void ParseOperandsSpvOpSDot(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpSDotKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpUDot(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpUDotKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpSUDot(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpSUDotKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpSDotAccSat(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpSDotAccSatKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpUDotAccSat(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpUDotAccSatKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpSUDotAccSat(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpSUDotAccSatKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandPackedVectorFormat_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpTypeCooperativeMatrixKHR(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpCooperativeMatrixLoadKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand4(endOffset);
    }
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpCooperativeMatrixStoreKHR(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand3(endOffset);
    }
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpCooperativeMatrixMulAddKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandCooperativeMatrixOperands_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpCooperativeMatrixLengthKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConstantCompositeReplicateEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSpecConstantCompositeReplicateEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpCompositeConstructReplicateEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpTypeRayQueryKHR(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpRayQueryInitializeKHR(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
}

void ParseOperandsSpvOpRayQueryTerminateKHR(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpRayQueryGenerateIntersectionKHR(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpRayQueryConfirmIntersectionKHR(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpRayQueryProceedKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionTypeKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpImageSampleWeightedQCOM(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpImageBoxFilterQCOM(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpImageBlockMatchSSDQCOM(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpImageBlockMatchSADQCOM(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpImageBlockMatchWindowSSDQCOM(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpImageBlockMatchWindowSADQCOM(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpImageBlockMatchGatherSSDQCOM(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpImageBlockMatchGatherSADQCOM(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpGroupIAddNonUniformAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupFAddNonUniformAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupFMinNonUniformAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupUMinNonUniformAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupSMinNonUniformAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupFMaxNonUniformAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupUMaxNonUniformAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupSMaxNonUniformAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpFragmentMaskFetchAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFragmentFetchAMD(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpReadClockKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
}

void ParseOperandsSpvOpFinalizeNodePayloadsAMDX(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpFinishWritingNodePayloadAMDX(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpInitializeNodePayloadsAMDX(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdScope_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformQuadAllKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformQuadAnyKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectRecordHitMotionNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
    SpvOperandIdRef_t operand12(endOffset);
    SpvOperandIdRef_t operand13(endOffset);
}

void ParseOperandsSpvOpHitObjectRecordHitWithIndexMotionNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
    SpvOperandIdRef_t operand12(endOffset);
}

void ParseOperandsSpvOpHitObjectRecordMissMotionNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpHitObjectGetWorldToObjectNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetObjectToWorldNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetObjectRayDirectionNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetObjectRayOriginNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectTraceRayMotionNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
    SpvOperandIdRef_t operand12(endOffset);
}

void ParseOperandsSpvOpHitObjectGetShaderRecordBufferHandleNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetShaderBindingTableRecordIndexNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectRecordEmptyNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpHitObjectTraceRayNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
}

void ParseOperandsSpvOpHitObjectRecordHitNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
    SpvOperandIdRef_t operand12(endOffset);
}

void ParseOperandsSpvOpHitObjectRecordHitWithIndexNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
}

void ParseOperandsSpvOpHitObjectRecordMissNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpHitObjectExecuteShaderNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpHitObjectGetCurrentTimeNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetAttributesNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpHitObjectGetHitKindNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetPrimitiveIndexNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetGeometryIndexNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetInstanceIdNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetInstanceCustomIndexNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetWorldRayDirectionNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetWorldRayOriginNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetRayTMaxNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectGetRayTMinNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectIsEmptyNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectIsHitNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpHitObjectIsMissNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpReorderThreadWithHitObjectNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand1(endOffset);
    }
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand2(endOffset);
    }
}

void ParseOperandsSpvOpReorderThreadWithHintNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpTypeHitObjectNV(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpImageSampleFootprintNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    if (FTell() < endOffset) {
        SpvOperandImageOperands_t operand6(endOffset);
    }
}

void ParseOperandsSpvOpEmitMeshTasksEXT(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand3(endOffset);
    }
}

void ParseOperandsSpvOpSetMeshOutputsEXT(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpGroupNonUniformPartitionNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpWritePackedPrimitiveIndices4x8NV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpFetchMicroTriangleVertexPositionNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpFetchMicroTriangleVertexBarycentricNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpReportIntersectionKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpReportIntersectionNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpIgnoreIntersectionNV(int64 endOffset) {
}

void ParseOperandsSpvOpTerminateRayNV(int64 endOffset) {
}

void ParseOperandsSpvOpTraceNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
}

void ParseOperandsSpvOpTraceMotionNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
}

void ParseOperandsSpvOpTraceRayMotionNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionTriangleVertexPositionsKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpTypeAccelerationStructureKHR(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAccelerationStructureNV(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpExecuteCallableNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpTypeCooperativeMatrixNV(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpCooperativeMatrixLoadNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand5(endOffset);
    }
}

void ParseOperandsSpvOpCooperativeMatrixStoreNV(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand4(endOffset);
    }
}

void ParseOperandsSpvOpCooperativeMatrixMulAddNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpCooperativeMatrixLengthNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpBeginInvocationInterlockEXT(int64 endOffset) {
}

void ParseOperandsSpvOpEndInvocationInterlockEXT(int64 endOffset) {
}

void ParseOperandsSpvOpDemoteToHelperInvocation(int64 endOffset) {
}

void ParseOperandsSpvOpDemoteToHelperInvocationEXT(int64 endOffset) {
}

void ParseOperandsSpvOpIsHelperInvocationEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpConvertUToImageNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertUToSamplerNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertImageToUNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertSamplerToUNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertUToSampledImageNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertSampledImageToUNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSamplerImageAddressingModeNV(int64 endOffset) {
    SpvOperandLiteralInteger_t operand0(endOffset);
}

void ParseOperandsSpvOpRawAccessChainNV(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    if (FTell() < endOffset) {
        SpvOperandRawAccessChainOperands_t operand6(endOffset);
    }
}

void ParseOperandsSpvOpSubgroupShuffleINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupShuffleDownINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupShuffleUpINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupShuffleXorINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupBlockReadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupBlockWriteINTEL(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpSubgroupImageBlockReadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupImageBlockWriteINTEL(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupImageMediaBlockReadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupImageMediaBlockWriteINTEL(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpUCountLeadingZerosINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpUCountTrailingZerosINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpAbsISubINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpAbsUSubINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpIAddSatINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUAddSatINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpIAverageINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUAverageINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpIAverageRoundedINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUAverageRoundedINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpISubSatINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUSubSatINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpIMul32x16INTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpUMul32x16INTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpConstantFunctionPointerINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpFunctionPointerCallINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic2(endOffset);
    }
}

void ParseOperandsSpvOpAsmTargetINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandLiteralString_t operand2(endOffset);
}

void ParseOperandsSpvOpAsmINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralString_t operand4(endOffset);
    SpvOperandLiteralString_t operand5(endOffset);
}

void ParseOperandsSpvOpAsmCallINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic3(endOffset);
    }
}

void ParseOperandsSpvOpAtomicFMinEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAtomicFMaxEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpAssumeTrueKHR(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpExpectKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpDecorateString(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandDecoration_t operand1(endOffset);
}

void ParseOperandsSpvOpDecorateStringGOOGLE(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandDecoration_t operand1(endOffset);
}

void ParseOperandsSpvOpMemberDecorateString(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
    SpvOperandDecoration_t operand2(endOffset);
}

void ParseOperandsSpvOpMemberDecorateStringGOOGLE(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandLiteralInteger_t operand1(endOffset);
    SpvOperandDecoration_t operand2(endOffset);
}

void ParseOperandsSpvOpVmeImageINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpTypeVmeImageINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
}

void ParseOperandsSpvOpTypeAvcImePayloadINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcRefPayloadINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcSicPayloadINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcMcePayloadINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcMceResultINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcImeResultINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcImeResultDualReferenceStreamoutINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcImeSingleReferenceStreaminINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcImeDualReferenceStreaminINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcRefResultINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpTypeAvcSicResultINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceSetInterShapePenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceSetAcOnlyHaarINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceConvertToImePayloadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceConvertToImeResultINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceConvertToRefPayloadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceConvertToRefResultINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceConvertToSicPayloadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceConvertToSicResultINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetMotionVectorsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetInterDistortionsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetBestInterDistortionsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetInterMajorShapeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetInterMinorShapeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetInterDirectionsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetInterReferenceIdsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeInitializeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeSetSingleReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeSetDualReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeRefWindowSizeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeAdjustRefOffsetINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeConvertToMcePayloadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeSetWeightedSadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeConvertToMceResultINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetBorderReachedINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcFmeInitializeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcBmeInitializeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcRefConvertToMcePayloadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcRefConvertToMceResultINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicInitializeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicConfigureSkcINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicConfigureIpeLumaINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
    SpvOperandIdRef_t operand6(endOffset);
    SpvOperandIdRef_t operand7(endOffset);
    SpvOperandIdRef_t operand8(endOffset);
    SpvOperandIdRef_t operand9(endOffset);
    SpvOperandIdRef_t operand10(endOffset);
    SpvOperandIdRef_t operand11(endOffset);
    SpvOperandIdRef_t operand12(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicGetMotionVectorMaskINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicConvertToMcePayloadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicEvaluateIpeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicConvertToMceResultINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicGetIpeLumaShapeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicGetIpeChromaModeINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupAvcSicGetInterRawSadsINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpVariableLengthArrayINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpSaveMemoryINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
}

void ParseOperandsSpvOpRestoreMemoryINTEL(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatSinCosPiINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatCastINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatCastFromIntINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatCastToIntINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatAddINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
    SpvOperandLiteralInteger_t operand9(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatSubINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
    SpvOperandLiteralInteger_t operand9(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatMulINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
    SpvOperandLiteralInteger_t operand9(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatDivINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
    SpvOperandLiteralInteger_t operand9(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatGTINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatGEINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatLTINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatLEINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatEQINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatRecipINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatRSqrtINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatCbrtINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatHypotINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
    SpvOperandLiteralInteger_t operand9(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatSqrtINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatLogINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatLog2INTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatLog10INTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatLog1pINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatExpINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatExp2INTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatExp10INTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatExpm1INTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatSinINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatCosINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatSinCosINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatSinPiINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatCosPiINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatASinINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatASinPiINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatACosINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatACosPiINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatATanINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatATanPiINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatATan2INTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
    SpvOperandLiteralInteger_t operand9(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatPowINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
    SpvOperandLiteralInteger_t operand9(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatPowRINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
    SpvOperandLiteralInteger_t operand9(endOffset);
}

void ParseOperandsSpvOpArbitraryFloatPowNINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpLoopControlINTEL(int64 endOffset) {
    while (FTell() < endOffset) {
        SpvOperandLiteralInteger_t operandVariadic0(endOffset);
    }
}

void ParseOperandsSpvOpAliasDomainDeclINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand1(endOffset);
    }
}

void ParseOperandsSpvOpAliasScopeDeclINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    if (FTell() < endOffset) {
        SpvOperandIdRef_t operand2(endOffset);
    }
}

void ParseOperandsSpvOpAliasScopeListDeclINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic1(endOffset);
    }
}

void ParseOperandsSpvOpFixedSqrtINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedRecipINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedRsqrtINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedSinINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedCosINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedSinCosINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedSinPiINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedCosPiINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedSinCosPiINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedLogINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpFixedExpINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
    SpvOperandLiteralInteger_t operand4(endOffset);
    SpvOperandLiteralInteger_t operand5(endOffset);
    SpvOperandLiteralInteger_t operand6(endOffset);
    SpvOperandLiteralInteger_t operand7(endOffset);
    SpvOperandLiteralInteger_t operand8(endOffset);
}

void ParseOperandsSpvOpPtrCastToCrossWorkgroupINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpCrossWorkgroupCastToPtrINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpReadPipeBlockingINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpWritePipeBlockingINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpFPGARegINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetRayTMinKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpRayQueryGetRayFlagsKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionTKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionInstanceCustomIndexKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionInstanceIdKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionGeometryIndexKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionPrimitiveIndexKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionBarycentricsKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionFrontFaceKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionCandidateAABBOpaqueKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionObjectRayDirectionKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionObjectRayOriginKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetWorldRayDirectionKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpRayQueryGetWorldRayOriginKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionObjectToWorldKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpRayQueryGetIntersectionWorldToObjectKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperandsSpvOpAtomicFAddEXT(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandIdScope_t operand3(endOffset);
    SpvOperandIdMemorySemantics_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpTypeBufferSurfaceINTEL(int64 endOffset) {
    SpvOperandIdResult_t operand0(endOffset);
    SpvOperandAccessQualifier_t operand1(endOffset);
}

void ParseOperandsSpvOpTypeStructContinuedINTEL(int64 endOffset) {
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic0(endOffset);
    }
}

void ParseOperandsSpvOpConstantCompositeContinuedINTEL(int64 endOffset) {
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic0(endOffset);
    }
}

void ParseOperandsSpvOpSpecConstantCompositeContinuedINTEL(int64 endOffset) {
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic0(endOffset);
    }
}

void ParseOperandsSpvOpCompositeConstructContinuedINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    while (FTell() < endOffset) {
        SpvOperandIdRef_t operandVariadic2(endOffset);
    }
}

void ParseOperandsSpvOpConvertFToBF16INTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpConvertBF16ToFINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
}

void ParseOperandsSpvOpControlBarrierArriveINTEL(int64 endOffset) {
    SpvOperandIdScope_t operand0(endOffset);
    SpvOperandIdScope_t operand1(endOffset);
    SpvOperandIdMemorySemantics_t operand2(endOffset);
}

void ParseOperandsSpvOpControlBarrierWaitINTEL(int64 endOffset) {
    SpvOperandIdScope_t operand0(endOffset);
    SpvOperandIdScope_t operand1(endOffset);
    SpvOperandIdMemorySemantics_t operand2(endOffset);
}

void ParseOperandsSpvOpSubgroupBlockPrefetchINTEL(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    if (FTell() < endOffset) {
        SpvOperandMemoryAccess_t operand2(endOffset);
    }
}

void ParseOperandsSpvOpGroupIMulKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupFMulKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupBitwiseAndKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupBitwiseOrKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupBitwiseXorKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupLogicalAndKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupLogicalOrKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpGroupLogicalXorKHR(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdScope_t operand2(endOffset);
    SpvOperandGroupOperation_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
}

void ParseOperandsSpvOpMaskedGatherINTEL(int64 endOffset) {
    SpvOperandIdResultType_t operand0(endOffset);
    SpvOperandIdResult_t operand1(endOffset);
    SpvOperandIdRef_t operand2(endOffset);
    SpvOperandLiteralInteger_t operand3(endOffset);
    SpvOperandIdRef_t operand4(endOffset);
    SpvOperandIdRef_t operand5(endOffset);
}

void ParseOperandsSpvOpMaskedScatterINTEL(int64 endOffset) {
    SpvOperandIdRef_t operand0(endOffset);
    SpvOperandIdRef_t operand1(endOffset);
    SpvOperandLiteralInteger_t operand2(endOffset);
    SpvOperandIdRef_t operand3(endOffset);
}

void ParseOperands(SpvOp opcode, int64 endOffset) {
    switch (opcode) {
        case SpvOpNop:
        {
            ParseOperandsSpvOpNop(endOffset);
            break;
        }
        case SpvOpUndef:
        {
            ParseOperandsSpvOpUndef(endOffset);
            break;
        }
        case SpvOpSourceContinued:
        {
            ParseOperandsSpvOpSourceContinued(endOffset);
            break;
        }
        case SpvOpSource:
        {
            ParseOperandsSpvOpSource(endOffset);
            break;
        }
        case SpvOpSourceExtension:
        {
            ParseOperandsSpvOpSourceExtension(endOffset);
            break;
        }
        case SpvOpName:
        {
            ParseOperandsSpvOpName(endOffset);
            break;
        }
        case SpvOpMemberName:
        {
            ParseOperandsSpvOpMemberName(endOffset);
            break;
        }
        case SpvOpString:
        {
            ParseOperandsSpvOpString(endOffset);
            break;
        }
        case SpvOpLine:
        {
            ParseOperandsSpvOpLine(endOffset);
            break;
        }
        case SpvOpExtension:
        {
            ParseOperandsSpvOpExtension(endOffset);
            break;
        }
        case SpvOpExtInstImport:
        {
            ParseOperandsSpvOpExtInstImport(endOffset);
            break;
        }
        case SpvOpExtInst:
        {
            ParseOperandsSpvOpExtInst(endOffset);
            break;
        }
        case SpvOpMemoryModel:
        {
            ParseOperandsSpvOpMemoryModel(endOffset);
            break;
        }
        case SpvOpEntryPoint:
        {
            ParseOperandsSpvOpEntryPoint(endOffset);
            break;
        }
        case SpvOpExecutionMode:
        {
            ParseOperandsSpvOpExecutionMode(endOffset);
            break;
        }
        case SpvOpCapability:
        {
            ParseOperandsSpvOpCapability(endOffset);
            break;
        }
        case SpvOpTypeVoid:
        {
            ParseOperandsSpvOpTypeVoid(endOffset);
            break;
        }
        case SpvOpTypeBool:
        {
            ParseOperandsSpvOpTypeBool(endOffset);
            break;
        }
        case SpvOpTypeInt:
        {
            ParseOperandsSpvOpTypeInt(endOffset);
            break;
        }
        case SpvOpTypeFloat:
        {
            ParseOperandsSpvOpTypeFloat(endOffset);
            break;
        }
        case SpvOpTypeVector:
        {
            ParseOperandsSpvOpTypeVector(endOffset);
            break;
        }
        case SpvOpTypeMatrix:
        {
            ParseOperandsSpvOpTypeMatrix(endOffset);
            break;
        }
        case SpvOpTypeImage:
        {
            ParseOperandsSpvOpTypeImage(endOffset);
            break;
        }
        case SpvOpTypeSampler:
        {
            ParseOperandsSpvOpTypeSampler(endOffset);
            break;
        }
        case SpvOpTypeSampledImage:
        {
            ParseOperandsSpvOpTypeSampledImage(endOffset);
            break;
        }
        case SpvOpTypeArray:
        {
            ParseOperandsSpvOpTypeArray(endOffset);
            break;
        }
        case SpvOpTypeRuntimeArray:
        {
            ParseOperandsSpvOpTypeRuntimeArray(endOffset);
            break;
        }
        case SpvOpTypeStruct:
        {
            ParseOperandsSpvOpTypeStruct(endOffset);
            break;
        }
        case SpvOpTypeOpaque:
        {
            ParseOperandsSpvOpTypeOpaque(endOffset);
            break;
        }
        case SpvOpTypePointer:
        {
            ParseOperandsSpvOpTypePointer(endOffset);
            break;
        }
        case SpvOpTypeFunction:
        {
            ParseOperandsSpvOpTypeFunction(endOffset);
            break;
        }
        case SpvOpTypeEvent:
        {
            ParseOperandsSpvOpTypeEvent(endOffset);
            break;
        }
        case SpvOpTypeDeviceEvent:
        {
            ParseOperandsSpvOpTypeDeviceEvent(endOffset);
            break;
        }
        case SpvOpTypeReserveId:
        {
            ParseOperandsSpvOpTypeReserveId(endOffset);
            break;
        }
        case SpvOpTypeQueue:
        {
            ParseOperandsSpvOpTypeQueue(endOffset);
            break;
        }
        case SpvOpTypePipe:
        {
            ParseOperandsSpvOpTypePipe(endOffset);
            break;
        }
        case SpvOpTypeForwardPointer:
        {
            ParseOperandsSpvOpTypeForwardPointer(endOffset);
            break;
        }
        case SpvOpConstantTrue:
        {
            ParseOperandsSpvOpConstantTrue(endOffset);
            break;
        }
        case SpvOpConstantFalse:
        {
            ParseOperandsSpvOpConstantFalse(endOffset);
            break;
        }
        case SpvOpConstant:
        {
            ParseOperandsSpvOpConstant(endOffset);
            break;
        }
        case SpvOpConstantComposite:
        {
            ParseOperandsSpvOpConstantComposite(endOffset);
            break;
        }
        case SpvOpConstantSampler:
        {
            ParseOperandsSpvOpConstantSampler(endOffset);
            break;
        }
        case SpvOpConstantNull:
        {
            ParseOperandsSpvOpConstantNull(endOffset);
            break;
        }
        case SpvOpSpecConstantTrue:
        {
            ParseOperandsSpvOpSpecConstantTrue(endOffset);
            break;
        }
        case SpvOpSpecConstantFalse:
        {
            ParseOperandsSpvOpSpecConstantFalse(endOffset);
            break;
        }
        case SpvOpSpecConstant:
        {
            ParseOperandsSpvOpSpecConstant(endOffset);
            break;
        }
        case SpvOpSpecConstantComposite:
        {
            ParseOperandsSpvOpSpecConstantComposite(endOffset);
            break;
        }
        case SpvOpSpecConstantOp:
        {
            ParseOperandsSpvOpSpecConstantOp(endOffset);
            break;
        }
        case SpvOpFunction:
        {
            ParseOperandsSpvOpFunction(endOffset);
            break;
        }
        case SpvOpFunctionParameter:
        {
            ParseOperandsSpvOpFunctionParameter(endOffset);
            break;
        }
        case SpvOpFunctionEnd:
        {
            ParseOperandsSpvOpFunctionEnd(endOffset);
            break;
        }
        case SpvOpFunctionCall:
        {
            ParseOperandsSpvOpFunctionCall(endOffset);
            break;
        }
        case SpvOpVariable:
        {
            ParseOperandsSpvOpVariable(endOffset);
            break;
        }
        case SpvOpImageTexelPointer:
        {
            ParseOperandsSpvOpImageTexelPointer(endOffset);
            break;
        }
        case SpvOpLoad:
        {
            ParseOperandsSpvOpLoad(endOffset);
            break;
        }
        case SpvOpStore:
        {
            ParseOperandsSpvOpStore(endOffset);
            break;
        }
        case SpvOpCopyMemory:
        {
            ParseOperandsSpvOpCopyMemory(endOffset);
            break;
        }
        case SpvOpCopyMemorySized:
        {
            ParseOperandsSpvOpCopyMemorySized(endOffset);
            break;
        }
        case SpvOpAccessChain:
        {
            ParseOperandsSpvOpAccessChain(endOffset);
            break;
        }
        case SpvOpInBoundsAccessChain:
        {
            ParseOperandsSpvOpInBoundsAccessChain(endOffset);
            break;
        }
        case SpvOpPtrAccessChain:
        {
            ParseOperandsSpvOpPtrAccessChain(endOffset);
            break;
        }
        case SpvOpArrayLength:
        {
            ParseOperandsSpvOpArrayLength(endOffset);
            break;
        }
        case SpvOpGenericPtrMemSemantics:
        {
            ParseOperandsSpvOpGenericPtrMemSemantics(endOffset);
            break;
        }
        case SpvOpInBoundsPtrAccessChain:
        {
            ParseOperandsSpvOpInBoundsPtrAccessChain(endOffset);
            break;
        }
        case SpvOpDecorate:
        {
            ParseOperandsSpvOpDecorate(endOffset);
            break;
        }
        case SpvOpMemberDecorate:
        {
            ParseOperandsSpvOpMemberDecorate(endOffset);
            break;
        }
        case SpvOpDecorationGroup:
        {
            ParseOperandsSpvOpDecorationGroup(endOffset);
            break;
        }
        case SpvOpGroupDecorate:
        {
            ParseOperandsSpvOpGroupDecorate(endOffset);
            break;
        }
        case SpvOpGroupMemberDecorate:
        {
            ParseOperandsSpvOpGroupMemberDecorate(endOffset);
            break;
        }
        case SpvOpVectorExtractDynamic:
        {
            ParseOperandsSpvOpVectorExtractDynamic(endOffset);
            break;
        }
        case SpvOpVectorInsertDynamic:
        {
            ParseOperandsSpvOpVectorInsertDynamic(endOffset);
            break;
        }
        case SpvOpVectorShuffle:
        {
            ParseOperandsSpvOpVectorShuffle(endOffset);
            break;
        }
        case SpvOpCompositeConstruct:
        {
            ParseOperandsSpvOpCompositeConstruct(endOffset);
            break;
        }
        case SpvOpCompositeExtract:
        {
            ParseOperandsSpvOpCompositeExtract(endOffset);
            break;
        }
        case SpvOpCompositeInsert:
        {
            ParseOperandsSpvOpCompositeInsert(endOffset);
            break;
        }
        case SpvOpCopyObject:
        {
            ParseOperandsSpvOpCopyObject(endOffset);
            break;
        }
        case SpvOpTranspose:
        {
            ParseOperandsSpvOpTranspose(endOffset);
            break;
        }
        case SpvOpSampledImage:
        {
            ParseOperandsSpvOpSampledImage(endOffset);
            break;
        }
        case SpvOpImageSampleImplicitLod:
        {
            ParseOperandsSpvOpImageSampleImplicitLod(endOffset);
            break;
        }
        case SpvOpImageSampleExplicitLod:
        {
            ParseOperandsSpvOpImageSampleExplicitLod(endOffset);
            break;
        }
        case SpvOpImageSampleDrefImplicitLod:
        {
            ParseOperandsSpvOpImageSampleDrefImplicitLod(endOffset);
            break;
        }
        case SpvOpImageSampleDrefExplicitLod:
        {
            ParseOperandsSpvOpImageSampleDrefExplicitLod(endOffset);
            break;
        }
        case SpvOpImageSampleProjImplicitLod:
        {
            ParseOperandsSpvOpImageSampleProjImplicitLod(endOffset);
            break;
        }
        case SpvOpImageSampleProjExplicitLod:
        {
            ParseOperandsSpvOpImageSampleProjExplicitLod(endOffset);
            break;
        }
        case SpvOpImageSampleProjDrefImplicitLod:
        {
            ParseOperandsSpvOpImageSampleProjDrefImplicitLod(endOffset);
            break;
        }
        case SpvOpImageSampleProjDrefExplicitLod:
        {
            ParseOperandsSpvOpImageSampleProjDrefExplicitLod(endOffset);
            break;
        }
        case SpvOpImageFetch:
        {
            ParseOperandsSpvOpImageFetch(endOffset);
            break;
        }
        case SpvOpImageGather:
        {
            ParseOperandsSpvOpImageGather(endOffset);
            break;
        }
        case SpvOpImageDrefGather:
        {
            ParseOperandsSpvOpImageDrefGather(endOffset);
            break;
        }
        case SpvOpImageRead:
        {
            ParseOperandsSpvOpImageRead(endOffset);
            break;
        }
        case SpvOpImageWrite:
        {
            ParseOperandsSpvOpImageWrite(endOffset);
            break;
        }
        case SpvOpImage:
        {
            ParseOperandsSpvOpImage(endOffset);
            break;
        }
        case SpvOpImageQueryFormat:
        {
            ParseOperandsSpvOpImageQueryFormat(endOffset);
            break;
        }
        case SpvOpImageQueryOrder:
        {
            ParseOperandsSpvOpImageQueryOrder(endOffset);
            break;
        }
        case SpvOpImageQuerySizeLod:
        {
            ParseOperandsSpvOpImageQuerySizeLod(endOffset);
            break;
        }
        case SpvOpImageQuerySize:
        {
            ParseOperandsSpvOpImageQuerySize(endOffset);
            break;
        }
        case SpvOpImageQueryLod:
        {
            ParseOperandsSpvOpImageQueryLod(endOffset);
            break;
        }
        case SpvOpImageQueryLevels:
        {
            ParseOperandsSpvOpImageQueryLevels(endOffset);
            break;
        }
        case SpvOpImageQuerySamples:
        {
            ParseOperandsSpvOpImageQuerySamples(endOffset);
            break;
        }
        case SpvOpConvertFToU:
        {
            ParseOperandsSpvOpConvertFToU(endOffset);
            break;
        }
        case SpvOpConvertFToS:
        {
            ParseOperandsSpvOpConvertFToS(endOffset);
            break;
        }
        case SpvOpConvertSToF:
        {
            ParseOperandsSpvOpConvertSToF(endOffset);
            break;
        }
        case SpvOpConvertUToF:
        {
            ParseOperandsSpvOpConvertUToF(endOffset);
            break;
        }
        case SpvOpUConvert:
        {
            ParseOperandsSpvOpUConvert(endOffset);
            break;
        }
        case SpvOpSConvert:
        {
            ParseOperandsSpvOpSConvert(endOffset);
            break;
        }
        case SpvOpFConvert:
        {
            ParseOperandsSpvOpFConvert(endOffset);
            break;
        }
        case SpvOpQuantizeToF16:
        {
            ParseOperandsSpvOpQuantizeToF16(endOffset);
            break;
        }
        case SpvOpConvertPtrToU:
        {
            ParseOperandsSpvOpConvertPtrToU(endOffset);
            break;
        }
        case SpvOpSatConvertSToU:
        {
            ParseOperandsSpvOpSatConvertSToU(endOffset);
            break;
        }
        case SpvOpSatConvertUToS:
        {
            ParseOperandsSpvOpSatConvertUToS(endOffset);
            break;
        }
        case SpvOpConvertUToPtr:
        {
            ParseOperandsSpvOpConvertUToPtr(endOffset);
            break;
        }
        case SpvOpPtrCastToGeneric:
        {
            ParseOperandsSpvOpPtrCastToGeneric(endOffset);
            break;
        }
        case SpvOpGenericCastToPtr:
        {
            ParseOperandsSpvOpGenericCastToPtr(endOffset);
            break;
        }
        case SpvOpGenericCastToPtrExplicit:
        {
            ParseOperandsSpvOpGenericCastToPtrExplicit(endOffset);
            break;
        }
        case SpvOpBitcast:
        {
            ParseOperandsSpvOpBitcast(endOffset);
            break;
        }
        case SpvOpSNegate:
        {
            ParseOperandsSpvOpSNegate(endOffset);
            break;
        }
        case SpvOpFNegate:
        {
            ParseOperandsSpvOpFNegate(endOffset);
            break;
        }
        case SpvOpIAdd:
        {
            ParseOperandsSpvOpIAdd(endOffset);
            break;
        }
        case SpvOpFAdd:
        {
            ParseOperandsSpvOpFAdd(endOffset);
            break;
        }
        case SpvOpISub:
        {
            ParseOperandsSpvOpISub(endOffset);
            break;
        }
        case SpvOpFSub:
        {
            ParseOperandsSpvOpFSub(endOffset);
            break;
        }
        case SpvOpIMul:
        {
            ParseOperandsSpvOpIMul(endOffset);
            break;
        }
        case SpvOpFMul:
        {
            ParseOperandsSpvOpFMul(endOffset);
            break;
        }
        case SpvOpUDiv:
        {
            ParseOperandsSpvOpUDiv(endOffset);
            break;
        }
        case SpvOpSDiv:
        {
            ParseOperandsSpvOpSDiv(endOffset);
            break;
        }
        case SpvOpFDiv:
        {
            ParseOperandsSpvOpFDiv(endOffset);
            break;
        }
        case SpvOpUMod:
        {
            ParseOperandsSpvOpUMod(endOffset);
            break;
        }
        case SpvOpSRem:
        {
            ParseOperandsSpvOpSRem(endOffset);
            break;
        }
        case SpvOpSMod:
        {
            ParseOperandsSpvOpSMod(endOffset);
            break;
        }
        case SpvOpFRem:
        {
            ParseOperandsSpvOpFRem(endOffset);
            break;
        }
        case SpvOpFMod:
        {
            ParseOperandsSpvOpFMod(endOffset);
            break;
        }
        case SpvOpVectorTimesScalar:
        {
            ParseOperandsSpvOpVectorTimesScalar(endOffset);
            break;
        }
        case SpvOpMatrixTimesScalar:
        {
            ParseOperandsSpvOpMatrixTimesScalar(endOffset);
            break;
        }
        case SpvOpVectorTimesMatrix:
        {
            ParseOperandsSpvOpVectorTimesMatrix(endOffset);
            break;
        }
        case SpvOpMatrixTimesVector:
        {
            ParseOperandsSpvOpMatrixTimesVector(endOffset);
            break;
        }
        case SpvOpMatrixTimesMatrix:
        {
            ParseOperandsSpvOpMatrixTimesMatrix(endOffset);
            break;
        }
        case SpvOpOuterProduct:
        {
            ParseOperandsSpvOpOuterProduct(endOffset);
            break;
        }
        case SpvOpDot:
        {
            ParseOperandsSpvOpDot(endOffset);
            break;
        }
        case SpvOpIAddCarry:
        {
            ParseOperandsSpvOpIAddCarry(endOffset);
            break;
        }
        case SpvOpISubBorrow:
        {
            ParseOperandsSpvOpISubBorrow(endOffset);
            break;
        }
        case SpvOpUMulExtended:
        {
            ParseOperandsSpvOpUMulExtended(endOffset);
            break;
        }
        case SpvOpSMulExtended:
        {
            ParseOperandsSpvOpSMulExtended(endOffset);
            break;
        }
        case SpvOpAny:
        {
            ParseOperandsSpvOpAny(endOffset);
            break;
        }
        case SpvOpAll:
        {
            ParseOperandsSpvOpAll(endOffset);
            break;
        }
        case SpvOpIsNan:
        {
            ParseOperandsSpvOpIsNan(endOffset);
            break;
        }
        case SpvOpIsInf:
        {
            ParseOperandsSpvOpIsInf(endOffset);
            break;
        }
        case SpvOpIsFinite:
        {
            ParseOperandsSpvOpIsFinite(endOffset);
            break;
        }
        case SpvOpIsNormal:
        {
            ParseOperandsSpvOpIsNormal(endOffset);
            break;
        }
        case SpvOpSignBitSet:
        {
            ParseOperandsSpvOpSignBitSet(endOffset);
            break;
        }
        case SpvOpLessOrGreater:
        {
            ParseOperandsSpvOpLessOrGreater(endOffset);
            break;
        }
        case SpvOpOrdered:
        {
            ParseOperandsSpvOpOrdered(endOffset);
            break;
        }
        case SpvOpUnordered:
        {
            ParseOperandsSpvOpUnordered(endOffset);
            break;
        }
        case SpvOpLogicalEqual:
        {
            ParseOperandsSpvOpLogicalEqual(endOffset);
            break;
        }
        case SpvOpLogicalNotEqual:
        {
            ParseOperandsSpvOpLogicalNotEqual(endOffset);
            break;
        }
        case SpvOpLogicalOr:
        {
            ParseOperandsSpvOpLogicalOr(endOffset);
            break;
        }
        case SpvOpLogicalAnd:
        {
            ParseOperandsSpvOpLogicalAnd(endOffset);
            break;
        }
        case SpvOpLogicalNot:
        {
            ParseOperandsSpvOpLogicalNot(endOffset);
            break;
        }
        case SpvOpSelect:
        {
            ParseOperandsSpvOpSelect(endOffset);
            break;
        }
        case SpvOpIEqual:
        {
            ParseOperandsSpvOpIEqual(endOffset);
            break;
        }
        case SpvOpINotEqual:
        {
            ParseOperandsSpvOpINotEqual(endOffset);
            break;
        }
        case SpvOpUGreaterThan:
        {
            ParseOperandsSpvOpUGreaterThan(endOffset);
            break;
        }
        case SpvOpSGreaterThan:
        {
            ParseOperandsSpvOpSGreaterThan(endOffset);
            break;
        }
        case SpvOpUGreaterThanEqual:
        {
            ParseOperandsSpvOpUGreaterThanEqual(endOffset);
            break;
        }
        case SpvOpSGreaterThanEqual:
        {
            ParseOperandsSpvOpSGreaterThanEqual(endOffset);
            break;
        }
        case SpvOpULessThan:
        {
            ParseOperandsSpvOpULessThan(endOffset);
            break;
        }
        case SpvOpSLessThan:
        {
            ParseOperandsSpvOpSLessThan(endOffset);
            break;
        }
        case SpvOpULessThanEqual:
        {
            ParseOperandsSpvOpULessThanEqual(endOffset);
            break;
        }
        case SpvOpSLessThanEqual:
        {
            ParseOperandsSpvOpSLessThanEqual(endOffset);
            break;
        }
        case SpvOpFOrdEqual:
        {
            ParseOperandsSpvOpFOrdEqual(endOffset);
            break;
        }
        case SpvOpFUnordEqual:
        {
            ParseOperandsSpvOpFUnordEqual(endOffset);
            break;
        }
        case SpvOpFOrdNotEqual:
        {
            ParseOperandsSpvOpFOrdNotEqual(endOffset);
            break;
        }
        case SpvOpFUnordNotEqual:
        {
            ParseOperandsSpvOpFUnordNotEqual(endOffset);
            break;
        }
        case SpvOpFOrdLessThan:
        {
            ParseOperandsSpvOpFOrdLessThan(endOffset);
            break;
        }
        case SpvOpFUnordLessThan:
        {
            ParseOperandsSpvOpFUnordLessThan(endOffset);
            break;
        }
        case SpvOpFOrdGreaterThan:
        {
            ParseOperandsSpvOpFOrdGreaterThan(endOffset);
            break;
        }
        case SpvOpFUnordGreaterThan:
        {
            ParseOperandsSpvOpFUnordGreaterThan(endOffset);
            break;
        }
        case SpvOpFOrdLessThanEqual:
        {
            ParseOperandsSpvOpFOrdLessThanEqual(endOffset);
            break;
        }
        case SpvOpFUnordLessThanEqual:
        {
            ParseOperandsSpvOpFUnordLessThanEqual(endOffset);
            break;
        }
        case SpvOpFOrdGreaterThanEqual:
        {
            ParseOperandsSpvOpFOrdGreaterThanEqual(endOffset);
            break;
        }
        case SpvOpFUnordGreaterThanEqual:
        {
            ParseOperandsSpvOpFUnordGreaterThanEqual(endOffset);
            break;
        }
        case SpvOpShiftRightLogical:
        {
            ParseOperandsSpvOpShiftRightLogical(endOffset);
            break;
        }
        case SpvOpShiftRightArithmetic:
        {
            ParseOperandsSpvOpShiftRightArithmetic(endOffset);
            break;
        }
        case SpvOpShiftLeftLogical:
        {
            ParseOperandsSpvOpShiftLeftLogical(endOffset);
            break;
        }
        case SpvOpBitwiseOr:
        {
            ParseOperandsSpvOpBitwiseOr(endOffset);
            break;
        }
        case SpvOpBitwiseXor:
        {
            ParseOperandsSpvOpBitwiseXor(endOffset);
            break;
        }
        case SpvOpBitwiseAnd:
        {
            ParseOperandsSpvOpBitwiseAnd(endOffset);
            break;
        }
        case SpvOpNot:
        {
            ParseOperandsSpvOpNot(endOffset);
            break;
        }
        case SpvOpBitFieldInsert:
        {
            ParseOperandsSpvOpBitFieldInsert(endOffset);
            break;
        }
        case SpvOpBitFieldSExtract:
        {
            ParseOperandsSpvOpBitFieldSExtract(endOffset);
            break;
        }
        case SpvOpBitFieldUExtract:
        {
            ParseOperandsSpvOpBitFieldUExtract(endOffset);
            break;
        }
        case SpvOpBitReverse:
        {
            ParseOperandsSpvOpBitReverse(endOffset);
            break;
        }
        case SpvOpBitCount:
        {
            ParseOperandsSpvOpBitCount(endOffset);
            break;
        }
        case SpvOpDPdx:
        {
            ParseOperandsSpvOpDPdx(endOffset);
            break;
        }
        case SpvOpDPdy:
        {
            ParseOperandsSpvOpDPdy(endOffset);
            break;
        }
        case SpvOpFwidth:
        {
            ParseOperandsSpvOpFwidth(endOffset);
            break;
        }
        case SpvOpDPdxFine:
        {
            ParseOperandsSpvOpDPdxFine(endOffset);
            break;
        }
        case SpvOpDPdyFine:
        {
            ParseOperandsSpvOpDPdyFine(endOffset);
            break;
        }
        case SpvOpFwidthFine:
        {
            ParseOperandsSpvOpFwidthFine(endOffset);
            break;
        }
        case SpvOpDPdxCoarse:
        {
            ParseOperandsSpvOpDPdxCoarse(endOffset);
            break;
        }
        case SpvOpDPdyCoarse:
        {
            ParseOperandsSpvOpDPdyCoarse(endOffset);
            break;
        }
        case SpvOpFwidthCoarse:
        {
            ParseOperandsSpvOpFwidthCoarse(endOffset);
            break;
        }
        case SpvOpEmitVertex:
        {
            ParseOperandsSpvOpEmitVertex(endOffset);
            break;
        }
        case SpvOpEndPrimitive:
        {
            ParseOperandsSpvOpEndPrimitive(endOffset);
            break;
        }
        case SpvOpEmitStreamVertex:
        {
            ParseOperandsSpvOpEmitStreamVertex(endOffset);
            break;
        }
        case SpvOpEndStreamPrimitive:
        {
            ParseOperandsSpvOpEndStreamPrimitive(endOffset);
            break;
        }
        case SpvOpControlBarrier:
        {
            ParseOperandsSpvOpControlBarrier(endOffset);
            break;
        }
        case SpvOpMemoryBarrier:
        {
            ParseOperandsSpvOpMemoryBarrier(endOffset);
            break;
        }
        case SpvOpAtomicLoad:
        {
            ParseOperandsSpvOpAtomicLoad(endOffset);
            break;
        }
        case SpvOpAtomicStore:
        {
            ParseOperandsSpvOpAtomicStore(endOffset);
            break;
        }
        case SpvOpAtomicExchange:
        {
            ParseOperandsSpvOpAtomicExchange(endOffset);
            break;
        }
        case SpvOpAtomicCompareExchange:
        {
            ParseOperandsSpvOpAtomicCompareExchange(endOffset);
            break;
        }
        case SpvOpAtomicCompareExchangeWeak:
        {
            ParseOperandsSpvOpAtomicCompareExchangeWeak(endOffset);
            break;
        }
        case SpvOpAtomicIIncrement:
        {
            ParseOperandsSpvOpAtomicIIncrement(endOffset);
            break;
        }
        case SpvOpAtomicIDecrement:
        {
            ParseOperandsSpvOpAtomicIDecrement(endOffset);
            break;
        }
        case SpvOpAtomicIAdd:
        {
            ParseOperandsSpvOpAtomicIAdd(endOffset);
            break;
        }
        case SpvOpAtomicISub:
        {
            ParseOperandsSpvOpAtomicISub(endOffset);
            break;
        }
        case SpvOpAtomicSMin:
        {
            ParseOperandsSpvOpAtomicSMin(endOffset);
            break;
        }
        case SpvOpAtomicUMin:
        {
            ParseOperandsSpvOpAtomicUMin(endOffset);
            break;
        }
        case SpvOpAtomicSMax:
        {
            ParseOperandsSpvOpAtomicSMax(endOffset);
            break;
        }
        case SpvOpAtomicUMax:
        {
            ParseOperandsSpvOpAtomicUMax(endOffset);
            break;
        }
        case SpvOpAtomicAnd:
        {
            ParseOperandsSpvOpAtomicAnd(endOffset);
            break;
        }
        case SpvOpAtomicOr:
        {
            ParseOperandsSpvOpAtomicOr(endOffset);
            break;
        }
        case SpvOpAtomicXor:
        {
            ParseOperandsSpvOpAtomicXor(endOffset);
            break;
        }
        case SpvOpPhi:
        {
            ParseOperandsSpvOpPhi(endOffset);
            break;
        }
        case SpvOpLoopMerge:
        {
            ParseOperandsSpvOpLoopMerge(endOffset);
            break;
        }
        case SpvOpSelectionMerge:
        {
            ParseOperandsSpvOpSelectionMerge(endOffset);
            break;
        }
        case SpvOpLabel:
        {
            ParseOperandsSpvOpLabel(endOffset);
            break;
        }
        case SpvOpBranch:
        {
            ParseOperandsSpvOpBranch(endOffset);
            break;
        }
        case SpvOpBranchConditional:
        {
            ParseOperandsSpvOpBranchConditional(endOffset);
            break;
        }
        case SpvOpSwitch:
        {
            ParseOperandsSpvOpSwitch(endOffset);
            break;
        }
        case SpvOpKill:
        {
            ParseOperandsSpvOpKill(endOffset);
            break;
        }
        case SpvOpReturn:
        {
            ParseOperandsSpvOpReturn(endOffset);
            break;
        }
        case SpvOpReturnValue:
        {
            ParseOperandsSpvOpReturnValue(endOffset);
            break;
        }
        case SpvOpUnreachable:
        {
            ParseOperandsSpvOpUnreachable(endOffset);
            break;
        }
        case SpvOpLifetimeStart:
        {
            ParseOperandsSpvOpLifetimeStart(endOffset);
            break;
        }
        case SpvOpLifetimeStop:
        {
            ParseOperandsSpvOpLifetimeStop(endOffset);
            break;
        }
        case SpvOpGroupAsyncCopy:
        {
            ParseOperandsSpvOpGroupAsyncCopy(endOffset);
            break;
        }
        case SpvOpGroupWaitEvents:
        {
            ParseOperandsSpvOpGroupWaitEvents(endOffset);
            break;
        }
        case SpvOpGroupAll:
        {
            ParseOperandsSpvOpGroupAll(endOffset);
            break;
        }
        case SpvOpGroupAny:
        {
            ParseOperandsSpvOpGroupAny(endOffset);
            break;
        }
        case SpvOpGroupBroadcast:
        {
            ParseOperandsSpvOpGroupBroadcast(endOffset);
            break;
        }
        case SpvOpGroupIAdd:
        {
            ParseOperandsSpvOpGroupIAdd(endOffset);
            break;
        }
        case SpvOpGroupFAdd:
        {
            ParseOperandsSpvOpGroupFAdd(endOffset);
            break;
        }
        case SpvOpGroupFMin:
        {
            ParseOperandsSpvOpGroupFMin(endOffset);
            break;
        }
        case SpvOpGroupUMin:
        {
            ParseOperandsSpvOpGroupUMin(endOffset);
            break;
        }
        case SpvOpGroupSMin:
        {
            ParseOperandsSpvOpGroupSMin(endOffset);
            break;
        }
        case SpvOpGroupFMax:
        {
            ParseOperandsSpvOpGroupFMax(endOffset);
            break;
        }
        case SpvOpGroupUMax:
        {
            ParseOperandsSpvOpGroupUMax(endOffset);
            break;
        }
        case SpvOpGroupSMax:
        {
            ParseOperandsSpvOpGroupSMax(endOffset);
            break;
        }
        case SpvOpReadPipe:
        {
            ParseOperandsSpvOpReadPipe(endOffset);
            break;
        }
        case SpvOpWritePipe:
        {
            ParseOperandsSpvOpWritePipe(endOffset);
            break;
        }
        case SpvOpReservedReadPipe:
        {
            ParseOperandsSpvOpReservedReadPipe(endOffset);
            break;
        }
        case SpvOpReservedWritePipe:
        {
            ParseOperandsSpvOpReservedWritePipe(endOffset);
            break;
        }
        case SpvOpReserveReadPipePackets:
        {
            ParseOperandsSpvOpReserveReadPipePackets(endOffset);
            break;
        }
        case SpvOpReserveWritePipePackets:
        {
            ParseOperandsSpvOpReserveWritePipePackets(endOffset);
            break;
        }
        case SpvOpCommitReadPipe:
        {
            ParseOperandsSpvOpCommitReadPipe(endOffset);
            break;
        }
        case SpvOpCommitWritePipe:
        {
            ParseOperandsSpvOpCommitWritePipe(endOffset);
            break;
        }
        case SpvOpIsValidReserveId:
        {
            ParseOperandsSpvOpIsValidReserveId(endOffset);
            break;
        }
        case SpvOpGetNumPipePackets:
        {
            ParseOperandsSpvOpGetNumPipePackets(endOffset);
            break;
        }
        case SpvOpGetMaxPipePackets:
        {
            ParseOperandsSpvOpGetMaxPipePackets(endOffset);
            break;
        }
        case SpvOpGroupReserveReadPipePackets:
        {
            ParseOperandsSpvOpGroupReserveReadPipePackets(endOffset);
            break;
        }
        case SpvOpGroupReserveWritePipePackets:
        {
            ParseOperandsSpvOpGroupReserveWritePipePackets(endOffset);
            break;
        }
        case SpvOpGroupCommitReadPipe:
        {
            ParseOperandsSpvOpGroupCommitReadPipe(endOffset);
            break;
        }
        case SpvOpGroupCommitWritePipe:
        {
            ParseOperandsSpvOpGroupCommitWritePipe(endOffset);
            break;
        }
        case SpvOpEnqueueMarker:
        {
            ParseOperandsSpvOpEnqueueMarker(endOffset);
            break;
        }
        case SpvOpEnqueueKernel:
        {
            ParseOperandsSpvOpEnqueueKernel(endOffset);
            break;
        }
        case SpvOpGetKernelNDrangeSubGroupCount:
        {
            ParseOperandsSpvOpGetKernelNDrangeSubGroupCount(endOffset);
            break;
        }
        case SpvOpGetKernelNDrangeMaxSubGroupSize:
        {
            ParseOperandsSpvOpGetKernelNDrangeMaxSubGroupSize(endOffset);
            break;
        }
        case SpvOpGetKernelWorkGroupSize:
        {
            ParseOperandsSpvOpGetKernelWorkGroupSize(endOffset);
            break;
        }
        case SpvOpGetKernelPreferredWorkGroupSizeMultiple:
        {
            ParseOperandsSpvOpGetKernelPreferredWorkGroupSizeMultiple(endOffset);
            break;
        }
        case SpvOpRetainEvent:
        {
            ParseOperandsSpvOpRetainEvent(endOffset);
            break;
        }
        case SpvOpReleaseEvent:
        {
            ParseOperandsSpvOpReleaseEvent(endOffset);
            break;
        }
        case SpvOpCreateUserEvent:
        {
            ParseOperandsSpvOpCreateUserEvent(endOffset);
            break;
        }
        case SpvOpIsValidEvent:
        {
            ParseOperandsSpvOpIsValidEvent(endOffset);
            break;
        }
        case SpvOpSetUserEventStatus:
        {
            ParseOperandsSpvOpSetUserEventStatus(endOffset);
            break;
        }
        case SpvOpCaptureEventProfilingInfo:
        {
            ParseOperandsSpvOpCaptureEventProfilingInfo(endOffset);
            break;
        }
        case SpvOpGetDefaultQueue:
        {
            ParseOperandsSpvOpGetDefaultQueue(endOffset);
            break;
        }
        case SpvOpBuildNDRange:
        {
            ParseOperandsSpvOpBuildNDRange(endOffset);
            break;
        }
        case SpvOpImageSparseSampleImplicitLod:
        {
            ParseOperandsSpvOpImageSparseSampleImplicitLod(endOffset);
            break;
        }
        case SpvOpImageSparseSampleExplicitLod:
        {
            ParseOperandsSpvOpImageSparseSampleExplicitLod(endOffset);
            break;
        }
        case SpvOpImageSparseSampleDrefImplicitLod:
        {
            ParseOperandsSpvOpImageSparseSampleDrefImplicitLod(endOffset);
            break;
        }
        case SpvOpImageSparseSampleDrefExplicitLod:
        {
            ParseOperandsSpvOpImageSparseSampleDrefExplicitLod(endOffset);
            break;
        }
        case SpvOpImageSparseSampleProjImplicitLod:
        {
            ParseOperandsSpvOpImageSparseSampleProjImplicitLod(endOffset);
            break;
        }
        case SpvOpImageSparseSampleProjExplicitLod:
        {
            ParseOperandsSpvOpImageSparseSampleProjExplicitLod(endOffset);
            break;
        }
        case SpvOpImageSparseSampleProjDrefImplicitLod:
        {
            ParseOperandsSpvOpImageSparseSampleProjDrefImplicitLod(endOffset);
            break;
        }
        case SpvOpImageSparseSampleProjDrefExplicitLod:
        {
            ParseOperandsSpvOpImageSparseSampleProjDrefExplicitLod(endOffset);
            break;
        }
        case SpvOpImageSparseFetch:
        {
            ParseOperandsSpvOpImageSparseFetch(endOffset);
            break;
        }
        case SpvOpImageSparseGather:
        {
            ParseOperandsSpvOpImageSparseGather(endOffset);
            break;
        }
        case SpvOpImageSparseDrefGather:
        {
            ParseOperandsSpvOpImageSparseDrefGather(endOffset);
            break;
        }
        case SpvOpImageSparseTexelsResident:
        {
            ParseOperandsSpvOpImageSparseTexelsResident(endOffset);
            break;
        }
        case SpvOpNoLine:
        {
            ParseOperandsSpvOpNoLine(endOffset);
            break;
        }
        case SpvOpAtomicFlagTestAndSet:
        {
            ParseOperandsSpvOpAtomicFlagTestAndSet(endOffset);
            break;
        }
        case SpvOpAtomicFlagClear:
        {
            ParseOperandsSpvOpAtomicFlagClear(endOffset);
            break;
        }
        case SpvOpImageSparseRead:
        {
            ParseOperandsSpvOpImageSparseRead(endOffset);
            break;
        }
        case SpvOpSizeOf:
        {
            ParseOperandsSpvOpSizeOf(endOffset);
            break;
        }
        case SpvOpTypePipeStorage:
        {
            ParseOperandsSpvOpTypePipeStorage(endOffset);
            break;
        }
        case SpvOpConstantPipeStorage:
        {
            ParseOperandsSpvOpConstantPipeStorage(endOffset);
            break;
        }
        case SpvOpCreatePipeFromPipeStorage:
        {
            ParseOperandsSpvOpCreatePipeFromPipeStorage(endOffset);
            break;
        }
        case SpvOpGetKernelLocalSizeForSubgroupCount:
        {
            ParseOperandsSpvOpGetKernelLocalSizeForSubgroupCount(endOffset);
            break;
        }
        case SpvOpGetKernelMaxNumSubgroups:
        {
            ParseOperandsSpvOpGetKernelMaxNumSubgroups(endOffset);
            break;
        }
        case SpvOpTypeNamedBarrier:
        {
            ParseOperandsSpvOpTypeNamedBarrier(endOffset);
            break;
        }
        case SpvOpNamedBarrierInitialize:
        {
            ParseOperandsSpvOpNamedBarrierInitialize(endOffset);
            break;
        }
        case SpvOpMemoryNamedBarrier:
        {
            ParseOperandsSpvOpMemoryNamedBarrier(endOffset);
            break;
        }
        case SpvOpModuleProcessed:
        {
            ParseOperandsSpvOpModuleProcessed(endOffset);
            break;
        }
        case SpvOpExecutionModeId:
        {
            ParseOperandsSpvOpExecutionModeId(endOffset);
            break;
        }
        case SpvOpDecorateId:
        {
            ParseOperandsSpvOpDecorateId(endOffset);
            break;
        }
        case SpvOpGroupNonUniformElect:
        {
            ParseOperandsSpvOpGroupNonUniformElect(endOffset);
            break;
        }
        case SpvOpGroupNonUniformAll:
        {
            ParseOperandsSpvOpGroupNonUniformAll(endOffset);
            break;
        }
        case SpvOpGroupNonUniformAny:
        {
            ParseOperandsSpvOpGroupNonUniformAny(endOffset);
            break;
        }
        case SpvOpGroupNonUniformAllEqual:
        {
            ParseOperandsSpvOpGroupNonUniformAllEqual(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBroadcast:
        {
            ParseOperandsSpvOpGroupNonUniformBroadcast(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBroadcastFirst:
        {
            ParseOperandsSpvOpGroupNonUniformBroadcastFirst(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBallot:
        {
            ParseOperandsSpvOpGroupNonUniformBallot(endOffset);
            break;
        }
        case SpvOpGroupNonUniformInverseBallot:
        {
            ParseOperandsSpvOpGroupNonUniformInverseBallot(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBallotBitExtract:
        {
            ParseOperandsSpvOpGroupNonUniformBallotBitExtract(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBallotBitCount:
        {
            ParseOperandsSpvOpGroupNonUniformBallotBitCount(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBallotFindLSB:
        {
            ParseOperandsSpvOpGroupNonUniformBallotFindLSB(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBallotFindMSB:
        {
            ParseOperandsSpvOpGroupNonUniformBallotFindMSB(endOffset);
            break;
        }
        case SpvOpGroupNonUniformShuffle:
        {
            ParseOperandsSpvOpGroupNonUniformShuffle(endOffset);
            break;
        }
        case SpvOpGroupNonUniformShuffleXor:
        {
            ParseOperandsSpvOpGroupNonUniformShuffleXor(endOffset);
            break;
        }
        case SpvOpGroupNonUniformShuffleUp:
        {
            ParseOperandsSpvOpGroupNonUniformShuffleUp(endOffset);
            break;
        }
        case SpvOpGroupNonUniformShuffleDown:
        {
            ParseOperandsSpvOpGroupNonUniformShuffleDown(endOffset);
            break;
        }
        case SpvOpGroupNonUniformIAdd:
        {
            ParseOperandsSpvOpGroupNonUniformIAdd(endOffset);
            break;
        }
        case SpvOpGroupNonUniformFAdd:
        {
            ParseOperandsSpvOpGroupNonUniformFAdd(endOffset);
            break;
        }
        case SpvOpGroupNonUniformIMul:
        {
            ParseOperandsSpvOpGroupNonUniformIMul(endOffset);
            break;
        }
        case SpvOpGroupNonUniformFMul:
        {
            ParseOperandsSpvOpGroupNonUniformFMul(endOffset);
            break;
        }
        case SpvOpGroupNonUniformSMin:
        {
            ParseOperandsSpvOpGroupNonUniformSMin(endOffset);
            break;
        }
        case SpvOpGroupNonUniformUMin:
        {
            ParseOperandsSpvOpGroupNonUniformUMin(endOffset);
            break;
        }
        case SpvOpGroupNonUniformFMin:
        {
            ParseOperandsSpvOpGroupNonUniformFMin(endOffset);
            break;
        }
        case SpvOpGroupNonUniformSMax:
        {
            ParseOperandsSpvOpGroupNonUniformSMax(endOffset);
            break;
        }
        case SpvOpGroupNonUniformUMax:
        {
            ParseOperandsSpvOpGroupNonUniformUMax(endOffset);
            break;
        }
        case SpvOpGroupNonUniformFMax:
        {
            ParseOperandsSpvOpGroupNonUniformFMax(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBitwiseAnd:
        {
            ParseOperandsSpvOpGroupNonUniformBitwiseAnd(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBitwiseOr:
        {
            ParseOperandsSpvOpGroupNonUniformBitwiseOr(endOffset);
            break;
        }
        case SpvOpGroupNonUniformBitwiseXor:
        {
            ParseOperandsSpvOpGroupNonUniformBitwiseXor(endOffset);
            break;
        }
        case SpvOpGroupNonUniformLogicalAnd:
        {
            ParseOperandsSpvOpGroupNonUniformLogicalAnd(endOffset);
            break;
        }
        case SpvOpGroupNonUniformLogicalOr:
        {
            ParseOperandsSpvOpGroupNonUniformLogicalOr(endOffset);
            break;
        }
        case SpvOpGroupNonUniformLogicalXor:
        {
            ParseOperandsSpvOpGroupNonUniformLogicalXor(endOffset);
            break;
        }
        case SpvOpGroupNonUniformQuadBroadcast:
        {
            ParseOperandsSpvOpGroupNonUniformQuadBroadcast(endOffset);
            break;
        }
        case SpvOpGroupNonUniformQuadSwap:
        {
            ParseOperandsSpvOpGroupNonUniformQuadSwap(endOffset);
            break;
        }
        case SpvOpCopyLogical:
        {
            ParseOperandsSpvOpCopyLogical(endOffset);
            break;
        }
        case SpvOpPtrEqual:
        {
            ParseOperandsSpvOpPtrEqual(endOffset);
            break;
        }
        case SpvOpPtrNotEqual:
        {
            ParseOperandsSpvOpPtrNotEqual(endOffset);
            break;
        }
        case SpvOpPtrDiff:
        {
            ParseOperandsSpvOpPtrDiff(endOffset);
            break;
        }
        case SpvOpColorAttachmentReadEXT:
        {
            ParseOperandsSpvOpColorAttachmentReadEXT(endOffset);
            break;
        }
        case SpvOpDepthAttachmentReadEXT:
        {
            ParseOperandsSpvOpDepthAttachmentReadEXT(endOffset);
            break;
        }
        case SpvOpStencilAttachmentReadEXT:
        {
            ParseOperandsSpvOpStencilAttachmentReadEXT(endOffset);
            break;
        }
        case SpvOpTerminateInvocation:
        {
            ParseOperandsSpvOpTerminateInvocation(endOffset);
            break;
        }
        case SpvOpTypeUntypedPointerKHR:
        {
            ParseOperandsSpvOpTypeUntypedPointerKHR(endOffset);
            break;
        }
        case SpvOpUntypedVariableKHR:
        {
            ParseOperandsSpvOpUntypedVariableKHR(endOffset);
            break;
        }
        case SpvOpUntypedAccessChainKHR:
        {
            ParseOperandsSpvOpUntypedAccessChainKHR(endOffset);
            break;
        }
        case SpvOpUntypedInBoundsAccessChainKHR:
        {
            ParseOperandsSpvOpUntypedInBoundsAccessChainKHR(endOffset);
            break;
        }
        case SpvOpSubgroupBallotKHR:
        {
            ParseOperandsSpvOpSubgroupBallotKHR(endOffset);
            break;
        }
        case SpvOpSubgroupFirstInvocationKHR:
        {
            ParseOperandsSpvOpSubgroupFirstInvocationKHR(endOffset);
            break;
        }
        case SpvOpUntypedPtrAccessChainKHR:
        {
            ParseOperandsSpvOpUntypedPtrAccessChainKHR(endOffset);
            break;
        }
        case SpvOpUntypedInBoundsPtrAccessChainKHR:
        {
            ParseOperandsSpvOpUntypedInBoundsPtrAccessChainKHR(endOffset);
            break;
        }
        case SpvOpUntypedArrayLengthKHR:
        {
            ParseOperandsSpvOpUntypedArrayLengthKHR(endOffset);
            break;
        }
        case SpvOpUntypedPrefetchKHR:
        {
            ParseOperandsSpvOpUntypedPrefetchKHR(endOffset);
            break;
        }
        case SpvOpSubgroupAllKHR:
        {
            ParseOperandsSpvOpSubgroupAllKHR(endOffset);
            break;
        }
        case SpvOpSubgroupAnyKHR:
        {
            ParseOperandsSpvOpSubgroupAnyKHR(endOffset);
            break;
        }
        case SpvOpSubgroupAllEqualKHR:
        {
            ParseOperandsSpvOpSubgroupAllEqualKHR(endOffset);
            break;
        }
        case SpvOpGroupNonUniformRotateKHR:
        {
            ParseOperandsSpvOpGroupNonUniformRotateKHR(endOffset);
            break;
        }
        case SpvOpSubgroupReadInvocationKHR:
        {
            ParseOperandsSpvOpSubgroupReadInvocationKHR(endOffset);
            break;
        }
        case SpvOpExtInstWithForwardRefsKHR:
        {
            ParseOperandsSpvOpExtInstWithForwardRefsKHR(endOffset);
            break;
        }
        case SpvOpTraceRayKHR:
        {
            ParseOperandsSpvOpTraceRayKHR(endOffset);
            break;
        }
        case SpvOpExecuteCallableKHR:
        {
            ParseOperandsSpvOpExecuteCallableKHR(endOffset);
            break;
        }
        case SpvOpConvertUToAccelerationStructureKHR:
        {
            ParseOperandsSpvOpConvertUToAccelerationStructureKHR(endOffset);
            break;
        }
        case SpvOpIgnoreIntersectionKHR:
        {
            ParseOperandsSpvOpIgnoreIntersectionKHR(endOffset);
            break;
        }
        case SpvOpTerminateRayKHR:
        {
            ParseOperandsSpvOpTerminateRayKHR(endOffset);
            break;
        }
        case SpvOpSDot:
        {
            ParseOperandsSpvOpSDot(endOffset);
            break;
        }
        case SpvOpSDotKHR:
        {
            ParseOperandsSpvOpSDotKHR(endOffset);
            break;
        }
        case SpvOpUDot:
        {
            ParseOperandsSpvOpUDot(endOffset);
            break;
        }
        case SpvOpUDotKHR:
        {
            ParseOperandsSpvOpUDotKHR(endOffset);
            break;
        }
        case SpvOpSUDot:
        {
            ParseOperandsSpvOpSUDot(endOffset);
            break;
        }
        case SpvOpSUDotKHR:
        {
            ParseOperandsSpvOpSUDotKHR(endOffset);
            break;
        }
        case SpvOpSDotAccSat:
        {
            ParseOperandsSpvOpSDotAccSat(endOffset);
            break;
        }
        case SpvOpSDotAccSatKHR:
        {
            ParseOperandsSpvOpSDotAccSatKHR(endOffset);
            break;
        }
        case SpvOpUDotAccSat:
        {
            ParseOperandsSpvOpUDotAccSat(endOffset);
            break;
        }
        case SpvOpUDotAccSatKHR:
        {
            ParseOperandsSpvOpUDotAccSatKHR(endOffset);
            break;
        }
        case SpvOpSUDotAccSat:
        {
            ParseOperandsSpvOpSUDotAccSat(endOffset);
            break;
        }
        case SpvOpSUDotAccSatKHR:
        {
            ParseOperandsSpvOpSUDotAccSatKHR(endOffset);
            break;
        }
        case SpvOpTypeCooperativeMatrixKHR:
        {
            ParseOperandsSpvOpTypeCooperativeMatrixKHR(endOffset);
            break;
        }
        case SpvOpCooperativeMatrixLoadKHR:
        {
            ParseOperandsSpvOpCooperativeMatrixLoadKHR(endOffset);
            break;
        }
        case SpvOpCooperativeMatrixStoreKHR:
        {
            ParseOperandsSpvOpCooperativeMatrixStoreKHR(endOffset);
            break;
        }
        case SpvOpCooperativeMatrixMulAddKHR:
        {
            ParseOperandsSpvOpCooperativeMatrixMulAddKHR(endOffset);
            break;
        }
        case SpvOpCooperativeMatrixLengthKHR:
        {
            ParseOperandsSpvOpCooperativeMatrixLengthKHR(endOffset);
            break;
        }
        case SpvOpConstantCompositeReplicateEXT:
        {
            ParseOperandsSpvOpConstantCompositeReplicateEXT(endOffset);
            break;
        }
        case SpvOpSpecConstantCompositeReplicateEXT:
        {
            ParseOperandsSpvOpSpecConstantCompositeReplicateEXT(endOffset);
            break;
        }
        case SpvOpCompositeConstructReplicateEXT:
        {
            ParseOperandsSpvOpCompositeConstructReplicateEXT(endOffset);
            break;
        }
        case SpvOpTypeRayQueryKHR:
        {
            ParseOperandsSpvOpTypeRayQueryKHR(endOffset);
            break;
        }
        case SpvOpRayQueryInitializeKHR:
        {
            ParseOperandsSpvOpRayQueryInitializeKHR(endOffset);
            break;
        }
        case SpvOpRayQueryTerminateKHR:
        {
            ParseOperandsSpvOpRayQueryTerminateKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGenerateIntersectionKHR:
        {
            ParseOperandsSpvOpRayQueryGenerateIntersectionKHR(endOffset);
            break;
        }
        case SpvOpRayQueryConfirmIntersectionKHR:
        {
            ParseOperandsSpvOpRayQueryConfirmIntersectionKHR(endOffset);
            break;
        }
        case SpvOpRayQueryProceedKHR:
        {
            ParseOperandsSpvOpRayQueryProceedKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionTypeKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionTypeKHR(endOffset);
            break;
        }
        case SpvOpImageSampleWeightedQCOM:
        {
            ParseOperandsSpvOpImageSampleWeightedQCOM(endOffset);
            break;
        }
        case SpvOpImageBoxFilterQCOM:
        {
            ParseOperandsSpvOpImageBoxFilterQCOM(endOffset);
            break;
        }
        case SpvOpImageBlockMatchSSDQCOM:
        {
            ParseOperandsSpvOpImageBlockMatchSSDQCOM(endOffset);
            break;
        }
        case SpvOpImageBlockMatchSADQCOM:
        {
            ParseOperandsSpvOpImageBlockMatchSADQCOM(endOffset);
            break;
        }
        case SpvOpImageBlockMatchWindowSSDQCOM:
        {
            ParseOperandsSpvOpImageBlockMatchWindowSSDQCOM(endOffset);
            break;
        }
        case SpvOpImageBlockMatchWindowSADQCOM:
        {
            ParseOperandsSpvOpImageBlockMatchWindowSADQCOM(endOffset);
            break;
        }
        case SpvOpImageBlockMatchGatherSSDQCOM:
        {
            ParseOperandsSpvOpImageBlockMatchGatherSSDQCOM(endOffset);
            break;
        }
        case SpvOpImageBlockMatchGatherSADQCOM:
        {
            ParseOperandsSpvOpImageBlockMatchGatherSADQCOM(endOffset);
            break;
        }
        case SpvOpGroupIAddNonUniformAMD:
        {
            ParseOperandsSpvOpGroupIAddNonUniformAMD(endOffset);
            break;
        }
        case SpvOpGroupFAddNonUniformAMD:
        {
            ParseOperandsSpvOpGroupFAddNonUniformAMD(endOffset);
            break;
        }
        case SpvOpGroupFMinNonUniformAMD:
        {
            ParseOperandsSpvOpGroupFMinNonUniformAMD(endOffset);
            break;
        }
        case SpvOpGroupUMinNonUniformAMD:
        {
            ParseOperandsSpvOpGroupUMinNonUniformAMD(endOffset);
            break;
        }
        case SpvOpGroupSMinNonUniformAMD:
        {
            ParseOperandsSpvOpGroupSMinNonUniformAMD(endOffset);
            break;
        }
        case SpvOpGroupFMaxNonUniformAMD:
        {
            ParseOperandsSpvOpGroupFMaxNonUniformAMD(endOffset);
            break;
        }
        case SpvOpGroupUMaxNonUniformAMD:
        {
            ParseOperandsSpvOpGroupUMaxNonUniformAMD(endOffset);
            break;
        }
        case SpvOpGroupSMaxNonUniformAMD:
        {
            ParseOperandsSpvOpGroupSMaxNonUniformAMD(endOffset);
            break;
        }
        case SpvOpFragmentMaskFetchAMD:
        {
            ParseOperandsSpvOpFragmentMaskFetchAMD(endOffset);
            break;
        }
        case SpvOpFragmentFetchAMD:
        {
            ParseOperandsSpvOpFragmentFetchAMD(endOffset);
            break;
        }
        case SpvOpReadClockKHR:
        {
            ParseOperandsSpvOpReadClockKHR(endOffset);
            break;
        }
        case SpvOpFinalizeNodePayloadsAMDX:
        {
            ParseOperandsSpvOpFinalizeNodePayloadsAMDX(endOffset);
            break;
        }
        case SpvOpFinishWritingNodePayloadAMDX:
        {
            ParseOperandsSpvOpFinishWritingNodePayloadAMDX(endOffset);
            break;
        }
        case SpvOpInitializeNodePayloadsAMDX:
        {
            ParseOperandsSpvOpInitializeNodePayloadsAMDX(endOffset);
            break;
        }
        case SpvOpGroupNonUniformQuadAllKHR:
        {
            ParseOperandsSpvOpGroupNonUniformQuadAllKHR(endOffset);
            break;
        }
        case SpvOpGroupNonUniformQuadAnyKHR:
        {
            ParseOperandsSpvOpGroupNonUniformQuadAnyKHR(endOffset);
            break;
        }
        case SpvOpHitObjectRecordHitMotionNV:
        {
            ParseOperandsSpvOpHitObjectRecordHitMotionNV(endOffset);
            break;
        }
        case SpvOpHitObjectRecordHitWithIndexMotionNV:
        {
            ParseOperandsSpvOpHitObjectRecordHitWithIndexMotionNV(endOffset);
            break;
        }
        case SpvOpHitObjectRecordMissMotionNV:
        {
            ParseOperandsSpvOpHitObjectRecordMissMotionNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetWorldToObjectNV:
        {
            ParseOperandsSpvOpHitObjectGetWorldToObjectNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetObjectToWorldNV:
        {
            ParseOperandsSpvOpHitObjectGetObjectToWorldNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetObjectRayDirectionNV:
        {
            ParseOperandsSpvOpHitObjectGetObjectRayDirectionNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetObjectRayOriginNV:
        {
            ParseOperandsSpvOpHitObjectGetObjectRayOriginNV(endOffset);
            break;
        }
        case SpvOpHitObjectTraceRayMotionNV:
        {
            ParseOperandsSpvOpHitObjectTraceRayMotionNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetShaderRecordBufferHandleNV:
        {
            ParseOperandsSpvOpHitObjectGetShaderRecordBufferHandleNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetShaderBindingTableRecordIndexNV:
        {
            ParseOperandsSpvOpHitObjectGetShaderBindingTableRecordIndexNV(endOffset);
            break;
        }
        case SpvOpHitObjectRecordEmptyNV:
        {
            ParseOperandsSpvOpHitObjectRecordEmptyNV(endOffset);
            break;
        }
        case SpvOpHitObjectTraceRayNV:
        {
            ParseOperandsSpvOpHitObjectTraceRayNV(endOffset);
            break;
        }
        case SpvOpHitObjectRecordHitNV:
        {
            ParseOperandsSpvOpHitObjectRecordHitNV(endOffset);
            break;
        }
        case SpvOpHitObjectRecordHitWithIndexNV:
        {
            ParseOperandsSpvOpHitObjectRecordHitWithIndexNV(endOffset);
            break;
        }
        case SpvOpHitObjectRecordMissNV:
        {
            ParseOperandsSpvOpHitObjectRecordMissNV(endOffset);
            break;
        }
        case SpvOpHitObjectExecuteShaderNV:
        {
            ParseOperandsSpvOpHitObjectExecuteShaderNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetCurrentTimeNV:
        {
            ParseOperandsSpvOpHitObjectGetCurrentTimeNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetAttributesNV:
        {
            ParseOperandsSpvOpHitObjectGetAttributesNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetHitKindNV:
        {
            ParseOperandsSpvOpHitObjectGetHitKindNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetPrimitiveIndexNV:
        {
            ParseOperandsSpvOpHitObjectGetPrimitiveIndexNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetGeometryIndexNV:
        {
            ParseOperandsSpvOpHitObjectGetGeometryIndexNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetInstanceIdNV:
        {
            ParseOperandsSpvOpHitObjectGetInstanceIdNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetInstanceCustomIndexNV:
        {
            ParseOperandsSpvOpHitObjectGetInstanceCustomIndexNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetWorldRayDirectionNV:
        {
            ParseOperandsSpvOpHitObjectGetWorldRayDirectionNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetWorldRayOriginNV:
        {
            ParseOperandsSpvOpHitObjectGetWorldRayOriginNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetRayTMaxNV:
        {
            ParseOperandsSpvOpHitObjectGetRayTMaxNV(endOffset);
            break;
        }
        case SpvOpHitObjectGetRayTMinNV:
        {
            ParseOperandsSpvOpHitObjectGetRayTMinNV(endOffset);
            break;
        }
        case SpvOpHitObjectIsEmptyNV:
        {
            ParseOperandsSpvOpHitObjectIsEmptyNV(endOffset);
            break;
        }
        case SpvOpHitObjectIsHitNV:
        {
            ParseOperandsSpvOpHitObjectIsHitNV(endOffset);
            break;
        }
        case SpvOpHitObjectIsMissNV:
        {
            ParseOperandsSpvOpHitObjectIsMissNV(endOffset);
            break;
        }
        case SpvOpReorderThreadWithHitObjectNV:
        {
            ParseOperandsSpvOpReorderThreadWithHitObjectNV(endOffset);
            break;
        }
        case SpvOpReorderThreadWithHintNV:
        {
            ParseOperandsSpvOpReorderThreadWithHintNV(endOffset);
            break;
        }
        case SpvOpTypeHitObjectNV:
        {
            ParseOperandsSpvOpTypeHitObjectNV(endOffset);
            break;
        }
        case SpvOpImageSampleFootprintNV:
        {
            ParseOperandsSpvOpImageSampleFootprintNV(endOffset);
            break;
        }
        case SpvOpEmitMeshTasksEXT:
        {
            ParseOperandsSpvOpEmitMeshTasksEXT(endOffset);
            break;
        }
        case SpvOpSetMeshOutputsEXT:
        {
            ParseOperandsSpvOpSetMeshOutputsEXT(endOffset);
            break;
        }
        case SpvOpGroupNonUniformPartitionNV:
        {
            ParseOperandsSpvOpGroupNonUniformPartitionNV(endOffset);
            break;
        }
        case SpvOpWritePackedPrimitiveIndices4x8NV:
        {
            ParseOperandsSpvOpWritePackedPrimitiveIndices4x8NV(endOffset);
            break;
        }
        case SpvOpFetchMicroTriangleVertexPositionNV:
        {
            ParseOperandsSpvOpFetchMicroTriangleVertexPositionNV(endOffset);
            break;
        }
        case SpvOpFetchMicroTriangleVertexBarycentricNV:
        {
            ParseOperandsSpvOpFetchMicroTriangleVertexBarycentricNV(endOffset);
            break;
        }
        case SpvOpReportIntersectionKHR:
        {
            ParseOperandsSpvOpReportIntersectionKHR(endOffset);
            break;
        }
        case SpvOpReportIntersectionNV:
        {
            ParseOperandsSpvOpReportIntersectionNV(endOffset);
            break;
        }
        case SpvOpIgnoreIntersectionNV:
        {
            ParseOperandsSpvOpIgnoreIntersectionNV(endOffset);
            break;
        }
        case SpvOpTerminateRayNV:
        {
            ParseOperandsSpvOpTerminateRayNV(endOffset);
            break;
        }
        case SpvOpTraceNV:
        {
            ParseOperandsSpvOpTraceNV(endOffset);
            break;
        }
        case SpvOpTraceMotionNV:
        {
            ParseOperandsSpvOpTraceMotionNV(endOffset);
            break;
        }
        case SpvOpTraceRayMotionNV:
        {
            ParseOperandsSpvOpTraceRayMotionNV(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionTriangleVertexPositionsKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionTriangleVertexPositionsKHR(endOffset);
            break;
        }
        case SpvOpTypeAccelerationStructureKHR:
        {
            ParseOperandsSpvOpTypeAccelerationStructureKHR(endOffset);
            break;
        }
        case SpvOpTypeAccelerationStructureNV:
        {
            ParseOperandsSpvOpTypeAccelerationStructureNV(endOffset);
            break;
        }
        case SpvOpExecuteCallableNV:
        {
            ParseOperandsSpvOpExecuteCallableNV(endOffset);
            break;
        }
        case SpvOpTypeCooperativeMatrixNV:
        {
            ParseOperandsSpvOpTypeCooperativeMatrixNV(endOffset);
            break;
        }
        case SpvOpCooperativeMatrixLoadNV:
        {
            ParseOperandsSpvOpCooperativeMatrixLoadNV(endOffset);
            break;
        }
        case SpvOpCooperativeMatrixStoreNV:
        {
            ParseOperandsSpvOpCooperativeMatrixStoreNV(endOffset);
            break;
        }
        case SpvOpCooperativeMatrixMulAddNV:
        {
            ParseOperandsSpvOpCooperativeMatrixMulAddNV(endOffset);
            break;
        }
        case SpvOpCooperativeMatrixLengthNV:
        {
            ParseOperandsSpvOpCooperativeMatrixLengthNV(endOffset);
            break;
        }
        case SpvOpBeginInvocationInterlockEXT:
        {
            ParseOperandsSpvOpBeginInvocationInterlockEXT(endOffset);
            break;
        }
        case SpvOpEndInvocationInterlockEXT:
        {
            ParseOperandsSpvOpEndInvocationInterlockEXT(endOffset);
            break;
        }
        case SpvOpDemoteToHelperInvocation:
        {
            ParseOperandsSpvOpDemoteToHelperInvocation(endOffset);
            break;
        }
        case SpvOpDemoteToHelperInvocationEXT:
        {
            ParseOperandsSpvOpDemoteToHelperInvocationEXT(endOffset);
            break;
        }
        case SpvOpIsHelperInvocationEXT:
        {
            ParseOperandsSpvOpIsHelperInvocationEXT(endOffset);
            break;
        }
        case SpvOpConvertUToImageNV:
        {
            ParseOperandsSpvOpConvertUToImageNV(endOffset);
            break;
        }
        case SpvOpConvertUToSamplerNV:
        {
            ParseOperandsSpvOpConvertUToSamplerNV(endOffset);
            break;
        }
        case SpvOpConvertImageToUNV:
        {
            ParseOperandsSpvOpConvertImageToUNV(endOffset);
            break;
        }
        case SpvOpConvertSamplerToUNV:
        {
            ParseOperandsSpvOpConvertSamplerToUNV(endOffset);
            break;
        }
        case SpvOpConvertUToSampledImageNV:
        {
            ParseOperandsSpvOpConvertUToSampledImageNV(endOffset);
            break;
        }
        case SpvOpConvertSampledImageToUNV:
        {
            ParseOperandsSpvOpConvertSampledImageToUNV(endOffset);
            break;
        }
        case SpvOpSamplerImageAddressingModeNV:
        {
            ParseOperandsSpvOpSamplerImageAddressingModeNV(endOffset);
            break;
        }
        case SpvOpRawAccessChainNV:
        {
            ParseOperandsSpvOpRawAccessChainNV(endOffset);
            break;
        }
        case SpvOpSubgroupShuffleINTEL:
        {
            ParseOperandsSpvOpSubgroupShuffleINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupShuffleDownINTEL:
        {
            ParseOperandsSpvOpSubgroupShuffleDownINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupShuffleUpINTEL:
        {
            ParseOperandsSpvOpSubgroupShuffleUpINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupShuffleXorINTEL:
        {
            ParseOperandsSpvOpSubgroupShuffleXorINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupBlockReadINTEL:
        {
            ParseOperandsSpvOpSubgroupBlockReadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupBlockWriteINTEL:
        {
            ParseOperandsSpvOpSubgroupBlockWriteINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupImageBlockReadINTEL:
        {
            ParseOperandsSpvOpSubgroupImageBlockReadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupImageBlockWriteINTEL:
        {
            ParseOperandsSpvOpSubgroupImageBlockWriteINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupImageMediaBlockReadINTEL:
        {
            ParseOperandsSpvOpSubgroupImageMediaBlockReadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupImageMediaBlockWriteINTEL:
        {
            ParseOperandsSpvOpSubgroupImageMediaBlockWriteINTEL(endOffset);
            break;
        }
        case SpvOpUCountLeadingZerosINTEL:
        {
            ParseOperandsSpvOpUCountLeadingZerosINTEL(endOffset);
            break;
        }
        case SpvOpUCountTrailingZerosINTEL:
        {
            ParseOperandsSpvOpUCountTrailingZerosINTEL(endOffset);
            break;
        }
        case SpvOpAbsISubINTEL:
        {
            ParseOperandsSpvOpAbsISubINTEL(endOffset);
            break;
        }
        case SpvOpAbsUSubINTEL:
        {
            ParseOperandsSpvOpAbsUSubINTEL(endOffset);
            break;
        }
        case SpvOpIAddSatINTEL:
        {
            ParseOperandsSpvOpIAddSatINTEL(endOffset);
            break;
        }
        case SpvOpUAddSatINTEL:
        {
            ParseOperandsSpvOpUAddSatINTEL(endOffset);
            break;
        }
        case SpvOpIAverageINTEL:
        {
            ParseOperandsSpvOpIAverageINTEL(endOffset);
            break;
        }
        case SpvOpUAverageINTEL:
        {
            ParseOperandsSpvOpUAverageINTEL(endOffset);
            break;
        }
        case SpvOpIAverageRoundedINTEL:
        {
            ParseOperandsSpvOpIAverageRoundedINTEL(endOffset);
            break;
        }
        case SpvOpUAverageRoundedINTEL:
        {
            ParseOperandsSpvOpUAverageRoundedINTEL(endOffset);
            break;
        }
        case SpvOpISubSatINTEL:
        {
            ParseOperandsSpvOpISubSatINTEL(endOffset);
            break;
        }
        case SpvOpUSubSatINTEL:
        {
            ParseOperandsSpvOpUSubSatINTEL(endOffset);
            break;
        }
        case SpvOpIMul32x16INTEL:
        {
            ParseOperandsSpvOpIMul32x16INTEL(endOffset);
            break;
        }
        case SpvOpUMul32x16INTEL:
        {
            ParseOperandsSpvOpUMul32x16INTEL(endOffset);
            break;
        }
        case SpvOpConstantFunctionPointerINTEL:
        {
            ParseOperandsSpvOpConstantFunctionPointerINTEL(endOffset);
            break;
        }
        case SpvOpFunctionPointerCallINTEL:
        {
            ParseOperandsSpvOpFunctionPointerCallINTEL(endOffset);
            break;
        }
        case SpvOpAsmTargetINTEL:
        {
            ParseOperandsSpvOpAsmTargetINTEL(endOffset);
            break;
        }
        case SpvOpAsmINTEL:
        {
            ParseOperandsSpvOpAsmINTEL(endOffset);
            break;
        }
        case SpvOpAsmCallINTEL:
        {
            ParseOperandsSpvOpAsmCallINTEL(endOffset);
            break;
        }
        case SpvOpAtomicFMinEXT:
        {
            ParseOperandsSpvOpAtomicFMinEXT(endOffset);
            break;
        }
        case SpvOpAtomicFMaxEXT:
        {
            ParseOperandsSpvOpAtomicFMaxEXT(endOffset);
            break;
        }
        case SpvOpAssumeTrueKHR:
        {
            ParseOperandsSpvOpAssumeTrueKHR(endOffset);
            break;
        }
        case SpvOpExpectKHR:
        {
            ParseOperandsSpvOpExpectKHR(endOffset);
            break;
        }
        case SpvOpDecorateString:
        {
            ParseOperandsSpvOpDecorateString(endOffset);
            break;
        }
        case SpvOpDecorateStringGOOGLE:
        {
            ParseOperandsSpvOpDecorateStringGOOGLE(endOffset);
            break;
        }
        case SpvOpMemberDecorateString:
        {
            ParseOperandsSpvOpMemberDecorateString(endOffset);
            break;
        }
        case SpvOpMemberDecorateStringGOOGLE:
        {
            ParseOperandsSpvOpMemberDecorateStringGOOGLE(endOffset);
            break;
        }
        case SpvOpVmeImageINTEL:
        {
            ParseOperandsSpvOpVmeImageINTEL(endOffset);
            break;
        }
        case SpvOpTypeVmeImageINTEL:
        {
            ParseOperandsSpvOpTypeVmeImageINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcImePayloadINTEL:
        {
            ParseOperandsSpvOpTypeAvcImePayloadINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcRefPayloadINTEL:
        {
            ParseOperandsSpvOpTypeAvcRefPayloadINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcSicPayloadINTEL:
        {
            ParseOperandsSpvOpTypeAvcSicPayloadINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcMcePayloadINTEL:
        {
            ParseOperandsSpvOpTypeAvcMcePayloadINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcMceResultINTEL:
        {
            ParseOperandsSpvOpTypeAvcMceResultINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcImeResultINTEL:
        {
            ParseOperandsSpvOpTypeAvcImeResultINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL:
        {
            ParseOperandsSpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcImeResultDualReferenceStreamoutINTEL:
        {
            ParseOperandsSpvOpTypeAvcImeResultDualReferenceStreamoutINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcImeSingleReferenceStreaminINTEL:
        {
            ParseOperandsSpvOpTypeAvcImeSingleReferenceStreaminINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcImeDualReferenceStreaminINTEL:
        {
            ParseOperandsSpvOpTypeAvcImeDualReferenceStreaminINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcRefResultINTEL:
        {
            ParseOperandsSpvOpTypeAvcRefResultINTEL(endOffset);
            break;
        }
        case SpvOpTypeAvcSicResultINTEL:
        {
            ParseOperandsSpvOpTypeAvcSicResultINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceSetInterShapePenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceSetInterShapePenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceSetAcOnlyHaarINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceSetAcOnlyHaarINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceConvertToImePayloadINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceConvertToImePayloadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceConvertToImeResultINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceConvertToImeResultINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceConvertToRefPayloadINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceConvertToRefPayloadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceConvertToRefResultINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceConvertToRefResultINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceConvertToSicPayloadINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceConvertToSicPayloadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceConvertToSicResultINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceConvertToSicResultINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetMotionVectorsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetMotionVectorsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetInterDistortionsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetInterDistortionsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetBestInterDistortionsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetBestInterDistortionsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetInterMajorShapeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetInterMajorShapeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetInterMinorShapeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetInterMinorShapeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetInterDirectionsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetInterDirectionsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetInterReferenceIdsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetInterReferenceIdsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeInitializeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeInitializeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeSetSingleReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeSetSingleReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeSetDualReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeSetDualReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeRefWindowSizeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeRefWindowSizeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeAdjustRefOffsetINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeAdjustRefOffsetINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeConvertToMcePayloadINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeConvertToMcePayloadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeSetWeightedSadINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeSetWeightedSadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeConvertToMceResultINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeConvertToMceResultINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetBorderReachedINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetBorderReachedINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcFmeInitializeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcFmeInitializeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcBmeInitializeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcBmeInitializeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcRefConvertToMcePayloadINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcRefConvertToMcePayloadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcRefConvertToMceResultINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcRefConvertToMceResultINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicInitializeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicInitializeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicConfigureSkcINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicConfigureSkcINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicConfigureIpeLumaINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicConfigureIpeLumaINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicGetMotionVectorMaskINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicGetMotionVectorMaskINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicConvertToMcePayloadINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicConvertToMcePayloadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicEvaluateIpeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicEvaluateIpeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicConvertToMceResultINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicConvertToMceResultINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicGetIpeLumaShapeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicGetIpeLumaShapeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicGetIpeChromaModeINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicGetIpeChromaModeINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupAvcSicGetInterRawSadsINTEL:
        {
            ParseOperandsSpvOpSubgroupAvcSicGetInterRawSadsINTEL(endOffset);
            break;
        }
        case SpvOpVariableLengthArrayINTEL:
        {
            ParseOperandsSpvOpVariableLengthArrayINTEL(endOffset);
            break;
        }
        case SpvOpSaveMemoryINTEL:
        {
            ParseOperandsSpvOpSaveMemoryINTEL(endOffset);
            break;
        }
        case SpvOpRestoreMemoryINTEL:
        {
            ParseOperandsSpvOpRestoreMemoryINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatSinCosPiINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatSinCosPiINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatCastINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatCastINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatCastFromIntINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatCastFromIntINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatCastToIntINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatCastToIntINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatAddINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatAddINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatSubINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatSubINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatMulINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatMulINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatDivINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatDivINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatGTINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatGTINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatGEINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatGEINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatLTINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatLTINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatLEINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatLEINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatEQINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatEQINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatRecipINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatRecipINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatRSqrtINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatRSqrtINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatCbrtINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatCbrtINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatHypotINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatHypotINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatSqrtINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatSqrtINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatLogINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatLogINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatLog2INTEL:
        {
            ParseOperandsSpvOpArbitraryFloatLog2INTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatLog10INTEL:
        {
            ParseOperandsSpvOpArbitraryFloatLog10INTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatLog1pINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatLog1pINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatExpINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatExpINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatExp2INTEL:
        {
            ParseOperandsSpvOpArbitraryFloatExp2INTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatExp10INTEL:
        {
            ParseOperandsSpvOpArbitraryFloatExp10INTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatExpm1INTEL:
        {
            ParseOperandsSpvOpArbitraryFloatExpm1INTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatSinINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatSinINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatCosINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatCosINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatSinCosINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatSinCosINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatSinPiINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatSinPiINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatCosPiINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatCosPiINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatASinINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatASinINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatASinPiINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatASinPiINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatACosINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatACosINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatACosPiINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatACosPiINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatATanINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatATanINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatATanPiINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatATanPiINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatATan2INTEL:
        {
            ParseOperandsSpvOpArbitraryFloatATan2INTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatPowINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatPowINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatPowRINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatPowRINTEL(endOffset);
            break;
        }
        case SpvOpArbitraryFloatPowNINTEL:
        {
            ParseOperandsSpvOpArbitraryFloatPowNINTEL(endOffset);
            break;
        }
        case SpvOpLoopControlINTEL:
        {
            ParseOperandsSpvOpLoopControlINTEL(endOffset);
            break;
        }
        case SpvOpAliasDomainDeclINTEL:
        {
            ParseOperandsSpvOpAliasDomainDeclINTEL(endOffset);
            break;
        }
        case SpvOpAliasScopeDeclINTEL:
        {
            ParseOperandsSpvOpAliasScopeDeclINTEL(endOffset);
            break;
        }
        case SpvOpAliasScopeListDeclINTEL:
        {
            ParseOperandsSpvOpAliasScopeListDeclINTEL(endOffset);
            break;
        }
        case SpvOpFixedSqrtINTEL:
        {
            ParseOperandsSpvOpFixedSqrtINTEL(endOffset);
            break;
        }
        case SpvOpFixedRecipINTEL:
        {
            ParseOperandsSpvOpFixedRecipINTEL(endOffset);
            break;
        }
        case SpvOpFixedRsqrtINTEL:
        {
            ParseOperandsSpvOpFixedRsqrtINTEL(endOffset);
            break;
        }
        case SpvOpFixedSinINTEL:
        {
            ParseOperandsSpvOpFixedSinINTEL(endOffset);
            break;
        }
        case SpvOpFixedCosINTEL:
        {
            ParseOperandsSpvOpFixedCosINTEL(endOffset);
            break;
        }
        case SpvOpFixedSinCosINTEL:
        {
            ParseOperandsSpvOpFixedSinCosINTEL(endOffset);
            break;
        }
        case SpvOpFixedSinPiINTEL:
        {
            ParseOperandsSpvOpFixedSinPiINTEL(endOffset);
            break;
        }
        case SpvOpFixedCosPiINTEL:
        {
            ParseOperandsSpvOpFixedCosPiINTEL(endOffset);
            break;
        }
        case SpvOpFixedSinCosPiINTEL:
        {
            ParseOperandsSpvOpFixedSinCosPiINTEL(endOffset);
            break;
        }
        case SpvOpFixedLogINTEL:
        {
            ParseOperandsSpvOpFixedLogINTEL(endOffset);
            break;
        }
        case SpvOpFixedExpINTEL:
        {
            ParseOperandsSpvOpFixedExpINTEL(endOffset);
            break;
        }
        case SpvOpPtrCastToCrossWorkgroupINTEL:
        {
            ParseOperandsSpvOpPtrCastToCrossWorkgroupINTEL(endOffset);
            break;
        }
        case SpvOpCrossWorkgroupCastToPtrINTEL:
        {
            ParseOperandsSpvOpCrossWorkgroupCastToPtrINTEL(endOffset);
            break;
        }
        case SpvOpReadPipeBlockingINTEL:
        {
            ParseOperandsSpvOpReadPipeBlockingINTEL(endOffset);
            break;
        }
        case SpvOpWritePipeBlockingINTEL:
        {
            ParseOperandsSpvOpWritePipeBlockingINTEL(endOffset);
            break;
        }
        case SpvOpFPGARegINTEL:
        {
            ParseOperandsSpvOpFPGARegINTEL(endOffset);
            break;
        }
        case SpvOpRayQueryGetRayTMinKHR:
        {
            ParseOperandsSpvOpRayQueryGetRayTMinKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetRayFlagsKHR:
        {
            ParseOperandsSpvOpRayQueryGetRayFlagsKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionTKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionTKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionInstanceCustomIndexKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionInstanceCustomIndexKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionInstanceIdKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionInstanceIdKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionGeometryIndexKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionGeometryIndexKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionPrimitiveIndexKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionPrimitiveIndexKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionBarycentricsKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionBarycentricsKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionFrontFaceKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionFrontFaceKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionCandidateAABBOpaqueKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionCandidateAABBOpaqueKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionObjectRayDirectionKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionObjectRayDirectionKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionObjectRayOriginKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionObjectRayOriginKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetWorldRayDirectionKHR:
        {
            ParseOperandsSpvOpRayQueryGetWorldRayDirectionKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetWorldRayOriginKHR:
        {
            ParseOperandsSpvOpRayQueryGetWorldRayOriginKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionObjectToWorldKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionObjectToWorldKHR(endOffset);
            break;
        }
        case SpvOpRayQueryGetIntersectionWorldToObjectKHR:
        {
            ParseOperandsSpvOpRayQueryGetIntersectionWorldToObjectKHR(endOffset);
            break;
        }
        case SpvOpAtomicFAddEXT:
        {
            ParseOperandsSpvOpAtomicFAddEXT(endOffset);
            break;
        }
        case SpvOpTypeBufferSurfaceINTEL:
        {
            ParseOperandsSpvOpTypeBufferSurfaceINTEL(endOffset);
            break;
        }
        case SpvOpTypeStructContinuedINTEL:
        {
            ParseOperandsSpvOpTypeStructContinuedINTEL(endOffset);
            break;
        }
        case SpvOpConstantCompositeContinuedINTEL:
        {
            ParseOperandsSpvOpConstantCompositeContinuedINTEL(endOffset);
            break;
        }
        case SpvOpSpecConstantCompositeContinuedINTEL:
        {
            ParseOperandsSpvOpSpecConstantCompositeContinuedINTEL(endOffset);
            break;
        }
        case SpvOpCompositeConstructContinuedINTEL:
        {
            ParseOperandsSpvOpCompositeConstructContinuedINTEL(endOffset);
            break;
        }
        case SpvOpConvertFToBF16INTEL:
        {
            ParseOperandsSpvOpConvertFToBF16INTEL(endOffset);
            break;
        }
        case SpvOpConvertBF16ToFINTEL:
        {
            ParseOperandsSpvOpConvertBF16ToFINTEL(endOffset);
            break;
        }
        case SpvOpControlBarrierArriveINTEL:
        {
            ParseOperandsSpvOpControlBarrierArriveINTEL(endOffset);
            break;
        }
        case SpvOpControlBarrierWaitINTEL:
        {
            ParseOperandsSpvOpControlBarrierWaitINTEL(endOffset);
            break;
        }
        case SpvOpSubgroupBlockPrefetchINTEL:
        {
            ParseOperandsSpvOpSubgroupBlockPrefetchINTEL(endOffset);
            break;
        }
        case SpvOpGroupIMulKHR:
        {
            ParseOperandsSpvOpGroupIMulKHR(endOffset);
            break;
        }
        case SpvOpGroupFMulKHR:
        {
            ParseOperandsSpvOpGroupFMulKHR(endOffset);
            break;
        }
        case SpvOpGroupBitwiseAndKHR:
        {
            ParseOperandsSpvOpGroupBitwiseAndKHR(endOffset);
            break;
        }
        case SpvOpGroupBitwiseOrKHR:
        {
            ParseOperandsSpvOpGroupBitwiseOrKHR(endOffset);
            break;
        }
        case SpvOpGroupBitwiseXorKHR:
        {
            ParseOperandsSpvOpGroupBitwiseXorKHR(endOffset);
            break;
        }
        case SpvOpGroupLogicalAndKHR:
        {
            ParseOperandsSpvOpGroupLogicalAndKHR(endOffset);
            break;
        }
        case SpvOpGroupLogicalOrKHR:
        {
            ParseOperandsSpvOpGroupLogicalOrKHR(endOffset);
            break;
        }
        case SpvOpGroupLogicalXorKHR:
        {
            ParseOperandsSpvOpGroupLogicalXorKHR(endOffset);
            break;
        }
        case SpvOpMaskedGatherINTEL:
        {
            ParseOperandsSpvOpMaskedGatherINTEL(endOffset);
            break;
        }
        case SpvOpMaskedScatterINTEL:
        {
            ParseOperandsSpvOpMaskedScatterINTEL(endOffset);
            break;
        }
        default:
        Assert(false, "Unknown opcode: " + opcode);
            break;
    }
}
/* End replacement for spirv_core_grammar_inc.bt */

string GetVendorToolName(SpvWord_t& generatorId) {
    switch(generatorId) {
        case 0: return "Khronos";
        case 1: return "LunarG";
        case 2: return "Valve";
        case 3: return "Codeplay";
        case 4: return "NVIDIA";
        case 5: return "ARM";
        case 6: return "Khronos LLVM/SPIR-V Translator";
        case 7: return "Khronos SPIR-V Tools Assembler";
        case 8: return "Khronos Glslang Reference Front End";
        case 9: return "Qualcomm";
        case 10: return "AMD";
        case 11: return "Intel";
        case 12: return "Imagination";
        case 13: return "Google Shaderc over Glslang";
        case 14: return "Google spiregg";
        case 15: return "Google rspirv";
        case 16: return "X-LEGEND Mesa-IR/SPIR-V Translator";
        case 17: return "Khronos SPIR-V Tools Linker";
        case 18: return "Wine VKD3D Shader Compiler";
        case 19: return "Tellusim Clay Shader Compiler";
        case 20: return "W3C WebGPU Group WHLSL Shader Translator";
        case 21: return "Google Clspv";
        case 22: return "Google MLIR SPIR-V Serializer";
        case 23: return "Google Tint Compiler";
        case 24: return "Google ANGLE Shader Compiler";
        case 25: return "Netease Games Messiah Shader Compiler";
        case 26: return "Xenia Xenia Emulator Microcode Translator";
        case 27: return "Embark Studios Rust GPU Compiler Backend";
        case 28: return "gfx-rs community Naga";
        case 29: return "Mikkosoft Productions MSP Shader Compiler";
        case 30: return "SpvGenTwo community SpvGenTwo SPIR-V IR Tools";
        case 31: return "Google Skia SkSL";
        case 32: return "TornadoVM SPIRV Beehive Toolkit";
        case 33: return "DragonJoker ShaderWriter";
        case 34: return "Rayan Hatout SPIRVSmith";
        case 35: return "Saarland University Shady";
        case 36: return "Taichi Graphics Taichi";
        default: return "Unknown Generator";
    }
}

typedef SpvWord_t SpvVersion_t <read=ReadSpvVersion, write=WriteSpvVersion>;

string ReadSpvVersion(SpvVersion_t v) {
    string s;
    
    if (((v & 0x000000ff) != 0) || ((v & 0xff000000) != 0)) {
        Printf("Invalid SPIR-V binary (failed to read the version).");
        Exit(-1);
    }
    
    SPrintf(s, "%d.%d", (v & 0xff0000) >> 16, (v & 0x00ff00) >> 8);
    return s;
}

void WriteSpvVersion(SpvVersion_t& v, string s) {
    SpvWord_t major;
    SpvWord_t minor;
    SScanf(s, "%d.%d", major, minor);
    v = ((0xff & major) << 16) + ((0xff & minor) << 8);
}

typedef struct GeneratorInfo_ {
    SpvWord_t tool : 16 <comment=GetVendorToolName>;
    SpvWord_t misc : 16;
} GeneratorInfo_t <comment=GetGeneratorInfoComment>;

string GetGeneratorInfoComment(GeneratorInfo_t& g) {
    string s;
    SPrintf(s, "Tool: %s ; Misc: %d", GetVendorToolName(g.tool), g.misc);
    return s;
}

typedef struct SpvHeader {
    SpvWord_t magic <format=hex>;
    SpvVersion_t version;
    GeneratorInfo_t generator;
    SpvWord_t bound;
    SpvWord_t schema;
} SpvHeader_t;

void DetectEndianness() {
    local uint magic;

    LittleEndian();
    magic = ReadUInt();
    
    if (magic != SpvMagicNumber) {
        BigEndian();
        magic = ReadUInt();
        
        if (magic != SpvMagicNumber) {
            Printf("Invalid SPIRV binary.\n");
            Exit(-1);
        }
    }
}

typedef struct InstructionOperands_ (SpvOp opcode, int64 endOffset) {
    ParseOperands(opcode, endOffset);
} InstructionOperands_t;

typedef struct Instruction_ {
    local int64 instPos = FTell();
    
    if (IsLittleEndian()) {
        SpvOp opcode : 16;
        SpvWord_t instWordCount : 16;
    } else {
        SpvWord_t instWordCount : 16;
        SpvOp opcode : 16;
    }
    
    local int64 nextInstPos = instPos + instruction.instWordCount * sizeof(SpvWord_t);
    
    if (instPos + sizeof(SpvWord_t) < nextInstPos) {
        InstructionOperands_t operands(opcode, nextInstPos);
    }
} Instruction_t;

void ParseInstruction() {
    Instruction_t instruction;
}


// Main

DetectEndianness();

SpvHeader_t header;

FSeek(5 * sizeof(SpvWord_t));

while(FEof() == 0) {
    ParseInstruction();
}
